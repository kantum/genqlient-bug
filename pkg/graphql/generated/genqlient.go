// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Boolean expression to filter rows from the table "action". All fields are combined with a logical 'AND'.
type ActionBoolExp struct {
	And               []*ActionBoolExp           `json:"_and,omitempty"`
	Not               *ActionBoolExp             `json:"_not,omitempty"`
	Or                []*ActionBoolExp           `json:"_or,omitempty"`
	Buttons           *ButtonBoolExp             `json:"buttons,omitempty"`
	Buttons_aggregate *Button_aggregate_bool_exp `json:"buttons_aggregate,omitempty"`
	Command           *StringComparisonExp       `json:"command,omitempty"`
	CreatedAt         *TimestamptzComparisonExp  `json:"createdAt,omitempty"`
	DeletedAt         *TimestamptzComparisonExp  `json:"deletedAt,omitempty"`
	Description       *StringComparisonExp       `json:"description,omitempty"`
	Id                *UuidComparisonExp         `json:"id,omitempty"`
	Label             *StringComparisonExp       `json:"label,omitempty"`
	Name              *StringComparisonExp       `json:"name,omitempty"`
	Type              *StringComparisonExp       `json:"type,omitempty"`
	UpdatedAt         *TimestamptzComparisonExp  `json:"updatedAt,omitempty"`
}

// GetAnd returns ActionBoolExp.And, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetAnd() []*ActionBoolExp { return v.And }

// GetNot returns ActionBoolExp.Not, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetNot() *ActionBoolExp { return v.Not }

// GetOr returns ActionBoolExp.Or, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetOr() []*ActionBoolExp { return v.Or }

// GetButtons returns ActionBoolExp.Buttons, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetButtons() *ButtonBoolExp { return v.Buttons }

// GetButtons_aggregate returns ActionBoolExp.Buttons_aggregate, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetButtons_aggregate() *Button_aggregate_bool_exp { return v.Buttons_aggregate }

// GetCommand returns ActionBoolExp.Command, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetCommand() *StringComparisonExp { return v.Command }

// GetCreatedAt returns ActionBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns ActionBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns ActionBoolExp.Description, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetId returns ActionBoolExp.Id, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns ActionBoolExp.Label, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetName returns ActionBoolExp.Name, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetType returns ActionBoolExp.Type, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetType() *StringComparisonExp { return v.Type }

// GetUpdatedAt returns ActionBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ActionBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "action"
type ActionConstraint string

const (
	// unique or primary key constraint on columns "id"
	ActionConstraintActionPkey ActionConstraint = "action_pkey"
)

// input type for inserting data into table "action"
type ActionInsertInput struct {
	Buttons *ButtonArrRelInsertInput `json:"buttons,omitempty"`
	// The command of the action.
	Command string `json:"command"`
	// The date and time when the action was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the action was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the action.
	Description string `json:"description"`
	// The unique identifier of the action.
	Id string `json:"id"`
	// The label of the action is used to override the name in the UI.
	Label string `json:"label"`
	// The name of the action.
	Name string `json:"name"`
	// The type of the action.
	Type string `json:"type"`
	// The date and time when the action was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetButtons returns ActionInsertInput.Buttons, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetButtons() *ButtonArrRelInsertInput { return v.Buttons }

// GetCommand returns ActionInsertInput.Command, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetCommand() string { return v.Command }

// GetCreatedAt returns ActionInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns ActionInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns ActionInsertInput.Description, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetDescription() string { return v.Description }

// GetId returns ActionInsertInput.Id, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetId() string { return v.Id }

// GetLabel returns ActionInsertInput.Label, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetLabel() string { return v.Label }

// GetName returns ActionInsertInput.Name, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetName() string { return v.Name }

// GetType returns ActionInsertInput.Type, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetType() string { return v.Type }

// GetUpdatedAt returns ActionInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ActionInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "action"
type ActionObjRelInsertInput struct {
	Data *ActionInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *ActionOnConflict `json:"onConflict,omitempty"`
}

// GetData returns ActionObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *ActionObjRelInsertInput) GetData() *ActionInsertInput { return v.Data }

// GetOnConflict returns ActionObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *ActionObjRelInsertInput) GetOnConflict() *ActionOnConflict { return v.OnConflict }

// on_conflict condition type for table "action"
type ActionOnConflict struct {
	Constraint     ActionConstraint     `json:"constraint"`
	Update_columns []ActionUpdateColumn `json:"update_columns"`
	Where          *ActionBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns ActionOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *ActionOnConflict) GetConstraint() ActionConstraint { return v.Constraint }

// GetUpdate_columns returns ActionOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *ActionOnConflict) GetUpdate_columns() []ActionUpdateColumn { return v.Update_columns }

// GetWhere returns ActionOnConflict.Where, and is useful for accessing the field via an interface.
func (v *ActionOnConflict) GetWhere() *ActionBoolExp { return v.Where }

// update columns of table "action"
type ActionUpdateColumn string

const (
	// column name
	ActionUpdateColumnCommand ActionUpdateColumn = "command"
	// column name
	ActionUpdateColumnCreatedat ActionUpdateColumn = "createdAt"
	// column name
	ActionUpdateColumnDeletedat ActionUpdateColumn = "deletedAt"
	// column name
	ActionUpdateColumnDescription ActionUpdateColumn = "description"
	// column name
	ActionUpdateColumnId ActionUpdateColumn = "id"
	// column name
	ActionUpdateColumnLabel ActionUpdateColumn = "label"
	// column name
	ActionUpdateColumnName ActionUpdateColumn = "name"
	// column name
	ActionUpdateColumnType ActionUpdateColumn = "type"
	// column name
	ActionUpdateColumnUpdatedat ActionUpdateColumn = "updatedAt"
)

// Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
type BooleanComparisonExp struct {
	Eq     bool   `json:"_eq"`
	Gt     bool   `json:"_gt"`
	Gte    bool   `json:"_gte"`
	In     []bool `json:"_in"`
	IsNull bool   `json:"_isNull"`
	Lt     bool   `json:"_lt"`
	Lte    bool   `json:"_lte"`
	Neq    bool   `json:"_neq"`
	Nin    []bool `json:"_nin"`
}

// GetEq returns BooleanComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetEq() bool { return v.Eq }

// GetGt returns BooleanComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetGt() bool { return v.Gt }

// GetGte returns BooleanComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetGte() bool { return v.Gte }

// GetIn returns BooleanComparisonExp.In, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetIn() []bool { return v.In }

// GetIsNull returns BooleanComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLt returns BooleanComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetLt() bool { return v.Lt }

// GetLte returns BooleanComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetLte() bool { return v.Lte }

// GetNeq returns BooleanComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetNeq() bool { return v.Neq }

// GetNin returns BooleanComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *BooleanComparisonExp) GetNin() []bool { return v.Nin }

// input type for inserting array relation for remote table "button"
type ButtonArrRelInsertInput struct {
	Data []*ButtonInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *ButtonOnConflict `json:"onConflict,omitempty"`
}

// GetData returns ButtonArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *ButtonArrRelInsertInput) GetData() []*ButtonInsertInput { return v.Data }

// GetOnConflict returns ButtonArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *ButtonArrRelInsertInput) GetOnConflict() *ButtonOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "button". All fields are combined with a logical 'AND'.
type ButtonBoolExp struct {
	And                    []*ButtonBoolExp                `json:"_and,omitempty"`
	Not                    *ButtonBoolExp                  `json:"_not,omitempty"`
	Or                     []*ButtonBoolExp                `json:"_or,omitempty"`
	Action                 *ActionBoolExp                  `json:"action,omitempty"`
	ActionId               *UuidComparisonExp              `json:"actionId,omitempty"`
	Card_buttons           *CardButtonBoolExp              `json:"card_buttons,omitempty"`
	Card_buttons_aggregate *Card_button_aggregate_bool_exp `json:"card_buttons_aggregate,omitempty"`
	ColorOff               *CitextComparisonExp            `json:"colorOff,omitempty"`
	ColorOn                *CitextComparisonExp            `json:"colorOn,omitempty"`
	CreatedAt              *TimestamptzComparisonExp       `json:"createdAt,omitempty"`
	DeletedAt              *TimestamptzComparisonExp       `json:"deletedAt,omitempty"`
	Description            *StringComparisonExp            `json:"description,omitempty"`
	Global                 *BooleanComparisonExp           `json:"global,omitempty"`
	Icon                   *StringComparisonExp            `json:"icon,omitempty"`
	Id                     *UuidComparisonExp              `json:"id,omitempty"`
	Label                  *StringComparisonExp            `json:"label,omitempty"`
	Name                   *StringComparisonExp            `json:"name,omitempty"`
	Position               *IntComparisonExp               `json:"position,omitempty"`
	Show                   *BooleanComparisonExp           `json:"show,omitempty"`
	UpdatedAt              *TimestamptzComparisonExp       `json:"updatedAt,omitempty"`
	Url                    *StringComparisonExp            `json:"url,omitempty"`
}

// GetAnd returns ButtonBoolExp.And, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetAnd() []*ButtonBoolExp { return v.And }

// GetNot returns ButtonBoolExp.Not, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetNot() *ButtonBoolExp { return v.Not }

// GetOr returns ButtonBoolExp.Or, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetOr() []*ButtonBoolExp { return v.Or }

// GetAction returns ButtonBoolExp.Action, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetAction() *ActionBoolExp { return v.Action }

// GetActionId returns ButtonBoolExp.ActionId, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetActionId() *UuidComparisonExp { return v.ActionId }

// GetCard_buttons returns ButtonBoolExp.Card_buttons, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetCard_buttons() *CardButtonBoolExp { return v.Card_buttons }

// GetCard_buttons_aggregate returns ButtonBoolExp.Card_buttons_aggregate, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetCard_buttons_aggregate() *Card_button_aggregate_bool_exp {
	return v.Card_buttons_aggregate
}

// GetColorOff returns ButtonBoolExp.ColorOff, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetColorOff() *CitextComparisonExp { return v.ColorOff }

// GetColorOn returns ButtonBoolExp.ColorOn, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetColorOn() *CitextComparisonExp { return v.ColorOn }

// GetCreatedAt returns ButtonBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns ButtonBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns ButtonBoolExp.Description, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetGlobal returns ButtonBoolExp.Global, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetGlobal() *BooleanComparisonExp { return v.Global }

// GetIcon returns ButtonBoolExp.Icon, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetIcon() *StringComparisonExp { return v.Icon }

// GetId returns ButtonBoolExp.Id, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns ButtonBoolExp.Label, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetName returns ButtonBoolExp.Name, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetPosition returns ButtonBoolExp.Position, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetPosition() *IntComparisonExp { return v.Position }

// GetShow returns ButtonBoolExp.Show, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetShow() *BooleanComparisonExp { return v.Show }

// GetUpdatedAt returns ButtonBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUrl returns ButtonBoolExp.Url, and is useful for accessing the field via an interface.
func (v *ButtonBoolExp) GetUrl() *StringComparisonExp { return v.Url }

// unique or primary key constraints on table "button"
type ButtonConstraint string

const (
	// unique or primary key constraint on columns "id"
	ButtonConstraintButtonPkey ButtonConstraint = "button_pkey"
)

// input type for inserting data into table "button"
type ButtonInsertInput struct {
	Action *ActionObjRelInsertInput `json:"action,omitempty"`
	// The action that the button triggers.
	ActionId     string                       `json:"actionId"`
	Card_buttons *CardButtonArrRelInsertInput `json:"card_buttons,omitempty"`
	// The color of the button when it is off.
	ColorOff string `json:"colorOff"`
	// The color of the button when it is on.
	ColorOn string `json:"colorOn"`
	// The date and time when the button was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the button was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the button.
	Description string `json:"description"`
	// Whether the button is global.
	Global bool `json:"global"`
	// The icon of the button.
	Icon string `json:"icon"`
	// The unique identifier of the button.
	Id string `json:"id"`
	// The label of the button is used to override the name in the UI.
	Label string `json:"label"`
	// The name of the button.
	Name string `json:"name"`
	// The position of the button.
	Position int  `json:"position"`
	Show     bool `json:"show"`
	// The date and time when the button was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The url of the button.
	Url string `json:"url"`
}

// GetAction returns ButtonInsertInput.Action, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetAction() *ActionObjRelInsertInput { return v.Action }

// GetActionId returns ButtonInsertInput.ActionId, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetActionId() string { return v.ActionId }

// GetCard_buttons returns ButtonInsertInput.Card_buttons, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetCard_buttons() *CardButtonArrRelInsertInput { return v.Card_buttons }

// GetColorOff returns ButtonInsertInput.ColorOff, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetColorOff() string { return v.ColorOff }

// GetColorOn returns ButtonInsertInput.ColorOn, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetColorOn() string { return v.ColorOn }

// GetCreatedAt returns ButtonInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns ButtonInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns ButtonInsertInput.Description, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetDescription() string { return v.Description }

// GetGlobal returns ButtonInsertInput.Global, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetGlobal() bool { return v.Global }

// GetIcon returns ButtonInsertInput.Icon, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetIcon() string { return v.Icon }

// GetId returns ButtonInsertInput.Id, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetId() string { return v.Id }

// GetLabel returns ButtonInsertInput.Label, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetLabel() string { return v.Label }

// GetName returns ButtonInsertInput.Name, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetName() string { return v.Name }

// GetPosition returns ButtonInsertInput.Position, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetPosition() int { return v.Position }

// GetShow returns ButtonInsertInput.Show, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetShow() bool { return v.Show }

// GetUpdatedAt returns ButtonInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns ButtonInsertInput.Url, and is useful for accessing the field via an interface.
func (v *ButtonInsertInput) GetUrl() string { return v.Url }

// input type for inserting object relation for remote table "button"
type ButtonObjRelInsertInput struct {
	Data *ButtonInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *ButtonOnConflict `json:"onConflict,omitempty"`
}

// GetData returns ButtonObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *ButtonObjRelInsertInput) GetData() *ButtonInsertInput { return v.Data }

// GetOnConflict returns ButtonObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *ButtonObjRelInsertInput) GetOnConflict() *ButtonOnConflict { return v.OnConflict }

// on_conflict condition type for table "button"
type ButtonOnConflict struct {
	Constraint     ButtonConstraint     `json:"constraint"`
	Update_columns []ButtonUpdateColumn `json:"update_columns"`
	Where          *ButtonBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns ButtonOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *ButtonOnConflict) GetConstraint() ButtonConstraint { return v.Constraint }

// GetUpdate_columns returns ButtonOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *ButtonOnConflict) GetUpdate_columns() []ButtonUpdateColumn { return v.Update_columns }

// GetWhere returns ButtonOnConflict.Where, and is useful for accessing the field via an interface.
func (v *ButtonOnConflict) GetWhere() *ButtonBoolExp { return v.Where }

// select columns of table "button"
type ButtonSelectColumn string

const (
	// column name
	ButtonSelectColumnActionid ButtonSelectColumn = "actionId"
	// column name
	ButtonSelectColumnColoroff ButtonSelectColumn = "colorOff"
	// column name
	ButtonSelectColumnColoron ButtonSelectColumn = "colorOn"
	// column name
	ButtonSelectColumnCreatedat ButtonSelectColumn = "createdAt"
	// column name
	ButtonSelectColumnDeletedat ButtonSelectColumn = "deletedAt"
	// column name
	ButtonSelectColumnDescription ButtonSelectColumn = "description"
	// column name
	ButtonSelectColumnGlobal ButtonSelectColumn = "global"
	// column name
	ButtonSelectColumnIcon ButtonSelectColumn = "icon"
	// column name
	ButtonSelectColumnId ButtonSelectColumn = "id"
	// column name
	ButtonSelectColumnLabel ButtonSelectColumn = "label"
	// column name
	ButtonSelectColumnName ButtonSelectColumn = "name"
	// column name
	ButtonSelectColumnPosition ButtonSelectColumn = "position"
	// column name
	ButtonSelectColumnShow ButtonSelectColumn = "show"
	// column name
	ButtonSelectColumnUpdatedat ButtonSelectColumn = "updatedAt"
	// column name
	ButtonSelectColumnUrl ButtonSelectColumn = "url"
)

// update columns of table "button"
type ButtonUpdateColumn string

const (
	// column name
	ButtonUpdateColumnActionid ButtonUpdateColumn = "actionId"
	// column name
	ButtonUpdateColumnColoroff ButtonUpdateColumn = "colorOff"
	// column name
	ButtonUpdateColumnColoron ButtonUpdateColumn = "colorOn"
	// column name
	ButtonUpdateColumnCreatedat ButtonUpdateColumn = "createdAt"
	// column name
	ButtonUpdateColumnDeletedat ButtonUpdateColumn = "deletedAt"
	// column name
	ButtonUpdateColumnDescription ButtonUpdateColumn = "description"
	// column name
	ButtonUpdateColumnGlobal ButtonUpdateColumn = "global"
	// column name
	ButtonUpdateColumnIcon ButtonUpdateColumn = "icon"
	// column name
	ButtonUpdateColumnId ButtonUpdateColumn = "id"
	// column name
	ButtonUpdateColumnLabel ButtonUpdateColumn = "label"
	// column name
	ButtonUpdateColumnName ButtonUpdateColumn = "name"
	// column name
	ButtonUpdateColumnPosition ButtonUpdateColumn = "position"
	// column name
	ButtonUpdateColumnShow ButtonUpdateColumn = "show"
	// column name
	ButtonUpdateColumnUpdatedat ButtonUpdateColumn = "updatedAt"
	// column name
	ButtonUpdateColumnUrl ButtonUpdateColumn = "url"
)

type Button_aggregate_bool_exp struct {
	Bool_and *Button_aggregate_bool_exp_bool_and `json:"bool_and,omitempty"`
	Bool_or  *Button_aggregate_bool_exp_bool_or  `json:"bool_or,omitempty"`
	Count    *Button_aggregate_bool_exp_count    `json:"count,omitempty"`
}

// GetBool_and returns Button_aggregate_bool_exp.Bool_and, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp) GetBool_and() *Button_aggregate_bool_exp_bool_and {
	return v.Bool_and
}

// GetBool_or returns Button_aggregate_bool_exp.Bool_or, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp) GetBool_or() *Button_aggregate_bool_exp_bool_or { return v.Bool_or }

// GetCount returns Button_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp) GetCount() *Button_aggregate_bool_exp_count { return v.Count }

type Button_aggregate_bool_exp_bool_and struct {
	Arguments Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columns `json:"arguments"`
	Distinct  bool                                                                      `json:"distinct"`
	Filter    *ButtonBoolExp                                                            `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                     `json:"predicate,omitempty"`
}

// GetArguments returns Button_aggregate_bool_exp_bool_and.Arguments, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_and) GetArguments() Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Button_aggregate_bool_exp_bool_and.Distinct, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_and) GetDistinct() bool { return v.Distinct }

// GetFilter returns Button_aggregate_bool_exp_bool_and.Filter, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_and) GetFilter() *ButtonBoolExp { return v.Filter }

// GetPredicate returns Button_aggregate_bool_exp_bool_and.Predicate, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_and) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type Button_aggregate_bool_exp_bool_or struct {
	Arguments Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columns `json:"arguments"`
	Distinct  bool                                                                     `json:"distinct"`
	Filter    *ButtonBoolExp                                                           `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                    `json:"predicate,omitempty"`
}

// GetArguments returns Button_aggregate_bool_exp_bool_or.Arguments, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_or) GetArguments() Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Button_aggregate_bool_exp_bool_or.Distinct, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_or) GetDistinct() bool { return v.Distinct }

// GetFilter returns Button_aggregate_bool_exp_bool_or.Filter, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_or) GetFilter() *ButtonBoolExp { return v.Filter }

// GetPredicate returns Button_aggregate_bool_exp_bool_or.Predicate, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_bool_or) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type Button_aggregate_bool_exp_count struct {
	Arguments []ButtonSelectColumn `json:"arguments"`
	Distinct  bool                 `json:"distinct"`
	Filter    *ButtonBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp    `json:"predicate,omitempty"`
}

// GetArguments returns Button_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_count) GetArguments() []ButtonSelectColumn { return v.Arguments }

// GetDistinct returns Button_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Button_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_count) GetFilter() *ButtonBoolExp { return v.Filter }

// GetPredicate returns Button_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Button_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// select "button_aggregate_bool_exp_bool_and_arguments_columns" columns of table "button"
type Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columns string

const (
	// column name
	Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columnsGlobal Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columns = "global"
	// column name
	Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columnsShow Button_select_column_button_aggregate_bool_exp_bool_and_arguments_columns = "show"
)

// select "button_aggregate_bool_exp_bool_or_arguments_columns" columns of table "button"
type Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columns string

const (
	// column name
	Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columnsGlobal Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columns = "global"
	// column name
	Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columnsShow Button_select_column_button_aggregate_bool_exp_bool_or_arguments_columns = "show"
)

// Boolean expression to filter rows from the table "calendar". All fields are combined with a logical 'AND'.
type CalendarBoolExp struct {
	And              []*CalendarBoolExp        `json:"_and,omitempty"`
	Not              *CalendarBoolExp          `json:"_not,omitempty"`
	Or               []*CalendarBoolExp        `json:"_or,omitempty"`
	CreatedAt        *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt        *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Description      *StringComparisonExp      `json:"description,omitempty"`
	Events           *EventBoolExp             `json:"events,omitempty"`
	Events_aggregate *Event_aggregate_bool_exp `json:"events_aggregate,omitempty"`
	Id               *UuidComparisonExp        `json:"id,omitempty"`
	Label            *StringComparisonExp      `json:"label,omitempty"`
	Line             *LineBoolExp              `json:"line,omitempty"`
	Name             *StringComparisonExp      `json:"name,omitempty"`
	UpdatedAt        *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns CalendarBoolExp.And, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetAnd() []*CalendarBoolExp { return v.And }

// GetNot returns CalendarBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetNot() *CalendarBoolExp { return v.Not }

// GetOr returns CalendarBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetOr() []*CalendarBoolExp { return v.Or }

// GetCreatedAt returns CalendarBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns CalendarBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns CalendarBoolExp.Description, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetEvents returns CalendarBoolExp.Events, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetEvents() *EventBoolExp { return v.Events }

// GetEvents_aggregate returns CalendarBoolExp.Events_aggregate, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetEvents_aggregate() *Event_aggregate_bool_exp { return v.Events_aggregate }

// GetId returns CalendarBoolExp.Id, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns CalendarBoolExp.Label, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLine returns CalendarBoolExp.Line, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetName returns CalendarBoolExp.Name, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetUpdatedAt returns CalendarBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CalendarBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "calendar"
type CalendarConstraint string

const (
	// unique or primary key constraint on columns "id"
	CalendarConstraintCalendarPkey CalendarConstraint = "calendar_pkey"
)

// input type for inserting data into table "calendar"
type CalendarInsertInput struct {
	// The date and time when the calendar was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the calendar was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the calendar.
	Description string                  `json:"description"`
	Events      *EventArrRelInsertInput `json:"events,omitempty"`
	// The unique identifier of the calendar.
	Id string `json:"id"`
	// The label of the calendar is used to override the name in the UI.
	Label string                 `json:"label"`
	Line  *LineObjRelInsertInput `json:"line,omitempty"`
	// The name of the calendar.
	Name string `json:"name"`
	// The date and time when the calendar was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCreatedAt returns CalendarInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns CalendarInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns CalendarInsertInput.Description, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetDescription() string { return v.Description }

// GetEvents returns CalendarInsertInput.Events, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetEvents() *EventArrRelInsertInput { return v.Events }

// GetId returns CalendarInsertInput.Id, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetId() string { return v.Id }

// GetLabel returns CalendarInsertInput.Label, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetLabel() string { return v.Label }

// GetLine returns CalendarInsertInput.Line, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetName returns CalendarInsertInput.Name, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetName() string { return v.Name }

// GetUpdatedAt returns CalendarInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CalendarInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "calendar"
type CalendarObjRelInsertInput struct {
	Data *CalendarInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CalendarOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CalendarObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CalendarObjRelInsertInput) GetData() *CalendarInsertInput { return v.Data }

// GetOnConflict returns CalendarObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CalendarObjRelInsertInput) GetOnConflict() *CalendarOnConflict { return v.OnConflict }

// on_conflict condition type for table "calendar"
type CalendarOnConflict struct {
	Constraint     CalendarConstraint     `json:"constraint"`
	Update_columns []CalendarUpdateColumn `json:"update_columns"`
	Where          *CalendarBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CalendarOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CalendarOnConflict) GetConstraint() CalendarConstraint { return v.Constraint }

// GetUpdate_columns returns CalendarOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CalendarOnConflict) GetUpdate_columns() []CalendarUpdateColumn { return v.Update_columns }

// GetWhere returns CalendarOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CalendarOnConflict) GetWhere() *CalendarBoolExp { return v.Where }

// update columns of table "calendar"
type CalendarUpdateColumn string

const (
	// column name
	CalendarUpdateColumnCreatedat CalendarUpdateColumn = "createdAt"
	// column name
	CalendarUpdateColumnDeletedat CalendarUpdateColumn = "deletedAt"
	// column name
	CalendarUpdateColumnDescription CalendarUpdateColumn = "description"
	// column name
	CalendarUpdateColumnId CalendarUpdateColumn = "id"
	// column name
	CalendarUpdateColumnLabel CalendarUpdateColumn = "label"
	// column name
	CalendarUpdateColumnName CalendarUpdateColumn = "name"
	// column name
	CalendarUpdateColumnUpdatedat CalendarUpdateColumn = "updatedAt"
)

// input type for inserting array relation for remote table "card"
type CardArrRelInsertInput struct {
	Data []*CardInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CardOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CardArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CardArrRelInsertInput) GetData() []*CardInsertInput { return v.Data }

// GetOnConflict returns CardArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CardArrRelInsertInput) GetOnConflict() *CardOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "card". All fields are combined with a logical 'AND'.
type CardBoolExp struct {
	And                    []*CardBoolExp                  `json:"_and,omitempty"`
	Not                    *CardBoolExp                    `json:"_not,omitempty"`
	Or                     []*CardBoolExp                  `json:"_or,omitempty"`
	BackgroundColor        *CitextComparisonExp            `json:"backgroundColor,omitempty"`
	BorderColor            *CitextComparisonExp            `json:"borderColor,omitempty"`
	Card_buttons           *CardButtonBoolExp              `json:"card_buttons,omitempty"`
	Card_buttons_aggregate *Card_button_aggregate_bool_exp `json:"card_buttons_aggregate,omitempty"`
	Card_grids             *CardGridBoolExp                `json:"card_grids,omitempty"`
	Card_grids_aggregate   *Card_grid_aggregate_bool_exp   `json:"card_grids_aggregate,omitempty"`
	Card_tags              *CardTagBoolExp                 `json:"card_tags,omitempty"`
	Card_tags_aggregate    *Card_tag_aggregate_bool_exp    `json:"card_tags_aggregate,omitempty"`
	Card_type              *CardTypeBoolExp                `json:"card_type,omitempty"`
	CreatedAt              *TimestamptzComparisonExp       `json:"createdAt,omitempty"`
	DeletedAt              *TimestamptzComparisonExp       `json:"deletedAt,omitempty"`
	Description            *StringComparisonExp            `json:"description,omitempty"`
	Id                     *UuidComparisonExp              `json:"id,omitempty"`
	Label                  *StringComparisonExp            `json:"label,omitempty"`
	Line                   *LineBoolExp                    `json:"line,omitempty"`
	LineId                 *UuidComparisonExp              `json:"lineId,omitempty"`
	Name                   *StringComparisonExp            `json:"name,omitempty"`
	SlotColor              *CitextComparisonExp            `json:"slotColor,omitempty"`
	TextColor              *CitextComparisonExp            `json:"textColor,omitempty"`
	Type                   *CardTypeEnumComparisonExp      `json:"type,omitempty"`
	UpdatedAt              *TimestamptzComparisonExp       `json:"updatedAt,omitempty"`
}

// GetAnd returns CardBoolExp.And, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetAnd() []*CardBoolExp { return v.And }

// GetNot returns CardBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetNot() *CardBoolExp { return v.Not }

// GetOr returns CardBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetOr() []*CardBoolExp { return v.Or }

// GetBackgroundColor returns CardBoolExp.BackgroundColor, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetBackgroundColor() *CitextComparisonExp { return v.BackgroundColor }

// GetBorderColor returns CardBoolExp.BorderColor, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetBorderColor() *CitextComparisonExp { return v.BorderColor }

// GetCard_buttons returns CardBoolExp.Card_buttons, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_buttons() *CardButtonBoolExp { return v.Card_buttons }

// GetCard_buttons_aggregate returns CardBoolExp.Card_buttons_aggregate, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_buttons_aggregate() *Card_button_aggregate_bool_exp {
	return v.Card_buttons_aggregate
}

// GetCard_grids returns CardBoolExp.Card_grids, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_grids() *CardGridBoolExp { return v.Card_grids }

// GetCard_grids_aggregate returns CardBoolExp.Card_grids_aggregate, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_grids_aggregate() *Card_grid_aggregate_bool_exp {
	return v.Card_grids_aggregate
}

// GetCard_tags returns CardBoolExp.Card_tags, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_tags() *CardTagBoolExp { return v.Card_tags }

// GetCard_tags_aggregate returns CardBoolExp.Card_tags_aggregate, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_tags_aggregate() *Card_tag_aggregate_bool_exp {
	return v.Card_tags_aggregate
}

// GetCard_type returns CardBoolExp.Card_type, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCard_type() *CardTypeBoolExp { return v.Card_type }

// GetCreatedAt returns CardBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns CardBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns CardBoolExp.Description, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetId returns CardBoolExp.Id, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns CardBoolExp.Label, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLine returns CardBoolExp.Line, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetLineId returns CardBoolExp.LineId, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetLineId() *UuidComparisonExp { return v.LineId }

// GetName returns CardBoolExp.Name, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetSlotColor returns CardBoolExp.SlotColor, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetSlotColor() *CitextComparisonExp { return v.SlotColor }

// GetTextColor returns CardBoolExp.TextColor, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetTextColor() *CitextComparisonExp { return v.TextColor }

// GetType returns CardBoolExp.Type, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetType() *CardTypeEnumComparisonExp { return v.Type }

// GetUpdatedAt returns CardBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// input type for inserting array relation for remote table "card_button"
type CardButtonArrRelInsertInput struct {
	Data []*CardButtonInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CardButtonOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CardButtonArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CardButtonArrRelInsertInput) GetData() []*CardButtonInsertInput { return v.Data }

// GetOnConflict returns CardButtonArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CardButtonArrRelInsertInput) GetOnConflict() *CardButtonOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "card_button". All fields are combined with a logical 'AND'.
type CardButtonBoolExp struct {
	And       []*CardButtonBoolExp      `json:"_and,omitempty"`
	Not       *CardButtonBoolExp        `json:"_not,omitempty"`
	Or        []*CardButtonBoolExp      `json:"_or,omitempty"`
	Button    *ButtonBoolExp            `json:"button,omitempty"`
	ButtonId  *UuidComparisonExp        `json:"buttonId,omitempty"`
	Card      *CardBoolExp              `json:"card,omitempty"`
	CardId    *UuidComparisonExp        `json:"cardId,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns CardButtonBoolExp.And, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetAnd() []*CardButtonBoolExp { return v.And }

// GetNot returns CardButtonBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetNot() *CardButtonBoolExp { return v.Not }

// GetOr returns CardButtonBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetOr() []*CardButtonBoolExp { return v.Or }

// GetButton returns CardButtonBoolExp.Button, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetButton() *ButtonBoolExp { return v.Button }

// GetButtonId returns CardButtonBoolExp.ButtonId, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetButtonId() *UuidComparisonExp { return v.ButtonId }

// GetCard returns CardButtonBoolExp.Card, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetCard() *CardBoolExp { return v.Card }

// GetCardId returns CardButtonBoolExp.CardId, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetCardId() *UuidComparisonExp { return v.CardId }

// GetCreatedAt returns CardButtonBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns CardButtonBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetUpdatedAt returns CardButtonBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardButtonBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "card_button"
type CardButtonConstraint string

const (
	// unique or primary key constraint on columns "card_id", "button_id"
	CardButtonConstraintCardButtonPkey CardButtonConstraint = "card_button_pkey"
)

// input type for inserting data into table "card_button"
type CardButtonInsertInput struct {
	Button    *ButtonObjRelInsertInput `json:"button,omitempty"`
	ButtonId  string                   `json:"buttonId"`
	Card      *CardObjRelInsertInput   `json:"card,omitempty"`
	CardId    string                   `json:"cardId"`
	CreatedAt time.Time                `json:"createdAt"`
	DeletedAt time.Time                `json:"deletedAt"`
	UpdatedAt time.Time                `json:"updatedAt"`
}

// GetButton returns CardButtonInsertInput.Button, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetButton() *ButtonObjRelInsertInput { return v.Button }

// GetButtonId returns CardButtonInsertInput.ButtonId, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetButtonId() string { return v.ButtonId }

// GetCard returns CardButtonInsertInput.Card, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetCard() *CardObjRelInsertInput { return v.Card }

// GetCardId returns CardButtonInsertInput.CardId, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetCardId() string { return v.CardId }

// GetCreatedAt returns CardButtonInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns CardButtonInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetUpdatedAt returns CardButtonInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardButtonInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// on_conflict condition type for table "card_button"
type CardButtonOnConflict struct {
	Constraint     CardButtonConstraint     `json:"constraint"`
	Update_columns []CardButtonUpdateColumn `json:"update_columns"`
	Where          *CardButtonBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CardButtonOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CardButtonOnConflict) GetConstraint() CardButtonConstraint { return v.Constraint }

// GetUpdate_columns returns CardButtonOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CardButtonOnConflict) GetUpdate_columns() []CardButtonUpdateColumn { return v.Update_columns }

// GetWhere returns CardButtonOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CardButtonOnConflict) GetWhere() *CardButtonBoolExp { return v.Where }

// select columns of table "card_button"
type CardButtonSelectColumn string

const (
	// column name
	CardButtonSelectColumnButtonid CardButtonSelectColumn = "buttonId"
	// column name
	CardButtonSelectColumnCardid CardButtonSelectColumn = "cardId"
	// column name
	CardButtonSelectColumnCreatedat CardButtonSelectColumn = "createdAt"
	// column name
	CardButtonSelectColumnDeletedat CardButtonSelectColumn = "deletedAt"
	// column name
	CardButtonSelectColumnUpdatedat CardButtonSelectColumn = "updatedAt"
)

// update columns of table "card_button"
type CardButtonUpdateColumn string

const (
	// column name
	CardButtonUpdateColumnButtonid CardButtonUpdateColumn = "buttonId"
	// column name
	CardButtonUpdateColumnCardid CardButtonUpdateColumn = "cardId"
	// column name
	CardButtonUpdateColumnCreatedat CardButtonUpdateColumn = "createdAt"
	// column name
	CardButtonUpdateColumnDeletedat CardButtonUpdateColumn = "deletedAt"
	// column name
	CardButtonUpdateColumnUpdatedat CardButtonUpdateColumn = "updatedAt"
)

// unique or primary key constraints on table "card"
type CardConstraint string

const (
	// unique or primary key constraint on columns "id"
	CardConstraintCardPkey CardConstraint = "card_pkey"
)

// input type for inserting array relation for remote table "card_grid"
type CardGridArrRelInsertInput struct {
	Data []*CardGridInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CardGridOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CardGridArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CardGridArrRelInsertInput) GetData() []*CardGridInsertInput { return v.Data }

// GetOnConflict returns CardGridArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CardGridArrRelInsertInput) GetOnConflict() *CardGridOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "card_grid". All fields are combined with a logical 'AND'.
type CardGridBoolExp struct {
	And       []*CardGridBoolExp        `json:"_and,omitempty"`
	Not       *CardGridBoolExp          `json:"_not,omitempty"`
	Or        []*CardGridBoolExp        `json:"_or,omitempty"`
	Card      *CardBoolExp              `json:"card,omitempty"`
	CardId    *UuidComparisonExp        `json:"cardId,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Grid      *GridBoolExp              `json:"grid,omitempty"`
	GridId    *UuidComparisonExp        `json:"gridId,omitempty"`
	Position  *IntComparisonExp         `json:"position,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns CardGridBoolExp.And, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetAnd() []*CardGridBoolExp { return v.And }

// GetNot returns CardGridBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetNot() *CardGridBoolExp { return v.Not }

// GetOr returns CardGridBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetOr() []*CardGridBoolExp { return v.Or }

// GetCard returns CardGridBoolExp.Card, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetCard() *CardBoolExp { return v.Card }

// GetCardId returns CardGridBoolExp.CardId, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetCardId() *UuidComparisonExp { return v.CardId }

// GetCreatedAt returns CardGridBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns CardGridBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetGrid returns CardGridBoolExp.Grid, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetGrid() *GridBoolExp { return v.Grid }

// GetGridId returns CardGridBoolExp.GridId, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetGridId() *UuidComparisonExp { return v.GridId }

// GetPosition returns CardGridBoolExp.Position, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetPosition() *IntComparisonExp { return v.Position }

// GetUpdatedAt returns CardGridBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardGridBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "card_grid"
type CardGridConstraint string

const (
	// unique or primary key constraint on columns "card_id", "grid_id"
	CardGridConstraintCardGridPkey CardGridConstraint = "card_grid_pkey"
)

// input type for inserting data into table "card_grid"
type CardGridInsertInput struct {
	Card *CardObjRelInsertInput `json:"card,omitempty"`
	// The card that is in the grid.
	CardId string `json:"cardId"`
	// The date and time when the card grid was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the card grid was deleted.
	DeletedAt time.Time              `json:"deletedAt"`
	Grid      *GridObjRelInsertInput `json:"grid,omitempty"`
	// The grid that the card is in.
	GridId string `json:"gridId"`
	// The position of the card in the grid.
	Position int `json:"position"`
	// The date and time when the card grid was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCard returns CardGridInsertInput.Card, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetCard() *CardObjRelInsertInput { return v.Card }

// GetCardId returns CardGridInsertInput.CardId, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetCardId() string { return v.CardId }

// GetCreatedAt returns CardGridInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns CardGridInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetGrid returns CardGridInsertInput.Grid, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetGrid() *GridObjRelInsertInput { return v.Grid }

// GetGridId returns CardGridInsertInput.GridId, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetGridId() string { return v.GridId }

// GetPosition returns CardGridInsertInput.Position, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetPosition() int { return v.Position }

// GetUpdatedAt returns CardGridInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardGridInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// on_conflict condition type for table "card_grid"
type CardGridOnConflict struct {
	Constraint     CardGridConstraint     `json:"constraint"`
	Update_columns []CardGridUpdateColumn `json:"update_columns"`
	Where          *CardGridBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CardGridOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CardGridOnConflict) GetConstraint() CardGridConstraint { return v.Constraint }

// GetUpdate_columns returns CardGridOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CardGridOnConflict) GetUpdate_columns() []CardGridUpdateColumn { return v.Update_columns }

// GetWhere returns CardGridOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CardGridOnConflict) GetWhere() *CardGridBoolExp { return v.Where }

// select columns of table "card_grid"
type CardGridSelectColumn string

const (
	// column name
	CardGridSelectColumnCardid CardGridSelectColumn = "cardId"
	// column name
	CardGridSelectColumnCreatedat CardGridSelectColumn = "createdAt"
	// column name
	CardGridSelectColumnDeletedat CardGridSelectColumn = "deletedAt"
	// column name
	CardGridSelectColumnGridid CardGridSelectColumn = "gridId"
	// column name
	CardGridSelectColumnPosition CardGridSelectColumn = "position"
	// column name
	CardGridSelectColumnUpdatedat CardGridSelectColumn = "updatedAt"
)

// update columns of table "card_grid"
type CardGridUpdateColumn string

const (
	// column name
	CardGridUpdateColumnCardid CardGridUpdateColumn = "cardId"
	// column name
	CardGridUpdateColumnCreatedat CardGridUpdateColumn = "createdAt"
	// column name
	CardGridUpdateColumnDeletedat CardGridUpdateColumn = "deletedAt"
	// column name
	CardGridUpdateColumnGridid CardGridUpdateColumn = "gridId"
	// column name
	CardGridUpdateColumnPosition CardGridUpdateColumn = "position"
	// column name
	CardGridUpdateColumnUpdatedat CardGridUpdateColumn = "updatedAt"
)

// input type for inserting data into table "card"
type CardInsertInput struct {
	// The background color of the card.
	BackgroundColor string `json:"backgroundColor"`
	// The border color of the card.
	BorderColor  string                       `json:"borderColor"`
	Card_buttons *CardButtonArrRelInsertInput `json:"card_buttons,omitempty"`
	Card_grids   *CardGridArrRelInsertInput   `json:"card_grids,omitempty"`
	Card_tags    *CardTagArrRelInsertInput    `json:"card_tags,omitempty"`
	Card_type    *CardTypeObjRelInsertInput   `json:"card_type,omitempty"`
	// The date and time when the card was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the card was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the card.
	Description string `json:"description"`
	// The unique identifier of the card.
	Id string `json:"id"`
	// The label of the card is used to override the name in the UI.
	Label string                 `json:"label"`
	Line  *LineObjRelInsertInput `json:"line,omitempty"`
	// The line that the card is associated with.
	LineId string `json:"lineId"`
	// The name of the card.
	Name string `json:"name"`
	// The slot color of the card.
	SlotColor string `json:"slotColor"`
	// The text color of the card.
	TextColor string `json:"textColor"`
	// The type of the card.
	Type CardTypeEnum `json:"type"`
	// The date and time when the card was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetBackgroundColor returns CardInsertInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetBackgroundColor() string { return v.BackgroundColor }

// GetBorderColor returns CardInsertInput.BorderColor, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetBorderColor() string { return v.BorderColor }

// GetCard_buttons returns CardInsertInput.Card_buttons, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetCard_buttons() *CardButtonArrRelInsertInput { return v.Card_buttons }

// GetCard_grids returns CardInsertInput.Card_grids, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetCard_grids() *CardGridArrRelInsertInput { return v.Card_grids }

// GetCard_tags returns CardInsertInput.Card_tags, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetCard_tags() *CardTagArrRelInsertInput { return v.Card_tags }

// GetCard_type returns CardInsertInput.Card_type, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetCard_type() *CardTypeObjRelInsertInput { return v.Card_type }

// GetCreatedAt returns CardInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns CardInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns CardInsertInput.Description, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetDescription() string { return v.Description }

// GetId returns CardInsertInput.Id, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetId() string { return v.Id }

// GetLabel returns CardInsertInput.Label, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetLabel() string { return v.Label }

// GetLine returns CardInsertInput.Line, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetLineId returns CardInsertInput.LineId, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetLineId() string { return v.LineId }

// GetName returns CardInsertInput.Name, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetName() string { return v.Name }

// GetSlotColor returns CardInsertInput.SlotColor, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetSlotColor() string { return v.SlotColor }

// GetTextColor returns CardInsertInput.TextColor, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetTextColor() string { return v.TextColor }

// GetType returns CardInsertInput.Type, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetType() CardTypeEnum { return v.Type }

// GetUpdatedAt returns CardInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "card"
type CardObjRelInsertInput struct {
	Data *CardInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CardOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CardObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CardObjRelInsertInput) GetData() *CardInsertInput { return v.Data }

// GetOnConflict returns CardObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CardObjRelInsertInput) GetOnConflict() *CardOnConflict { return v.OnConflict }

// on_conflict condition type for table "card"
type CardOnConflict struct {
	Constraint     CardConstraint     `json:"constraint"`
	Update_columns []CardUpdateColumn `json:"update_columns"`
	Where          *CardBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CardOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CardOnConflict) GetConstraint() CardConstraint { return v.Constraint }

// GetUpdate_columns returns CardOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CardOnConflict) GetUpdate_columns() []CardUpdateColumn { return v.Update_columns }

// GetWhere returns CardOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CardOnConflict) GetWhere() *CardBoolExp { return v.Where }

// select columns of table "card"
type CardSelectColumn string

const (
	// column name
	CardSelectColumnBackgroundcolor CardSelectColumn = "backgroundColor"
	// column name
	CardSelectColumnBordercolor CardSelectColumn = "borderColor"
	// column name
	CardSelectColumnCreatedat CardSelectColumn = "createdAt"
	// column name
	CardSelectColumnDeletedat CardSelectColumn = "deletedAt"
	// column name
	CardSelectColumnDescription CardSelectColumn = "description"
	// column name
	CardSelectColumnId CardSelectColumn = "id"
	// column name
	CardSelectColumnLabel CardSelectColumn = "label"
	// column name
	CardSelectColumnLineid CardSelectColumn = "lineId"
	// column name
	CardSelectColumnName CardSelectColumn = "name"
	// column name
	CardSelectColumnSlotcolor CardSelectColumn = "slotColor"
	// column name
	CardSelectColumnTextcolor CardSelectColumn = "textColor"
	// column name
	CardSelectColumnType CardSelectColumn = "type"
	// column name
	CardSelectColumnUpdatedat CardSelectColumn = "updatedAt"
)

// input type for inserting array relation for remote table "card_tag"
type CardTagArrRelInsertInput struct {
	Data []*CardTagInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CardTagOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CardTagArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CardTagArrRelInsertInput) GetData() []*CardTagInsertInput { return v.Data }

// GetOnConflict returns CardTagArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CardTagArrRelInsertInput) GetOnConflict() *CardTagOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "card_tag". All fields are combined with a logical 'AND'.
type CardTagBoolExp struct {
	And       []*CardTagBoolExp         `json:"_and,omitempty"`
	Not       *CardTagBoolExp           `json:"_not,omitempty"`
	Or        []*CardTagBoolExp         `json:"_or,omitempty"`
	Card      *CardBoolExp              `json:"card,omitempty"`
	CardId    *UuidComparisonExp        `json:"cardId,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Tag       *TagBoolExp               `json:"tag,omitempty"`
	TagId     *UuidComparisonExp        `json:"tagId,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns CardTagBoolExp.And, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetAnd() []*CardTagBoolExp { return v.And }

// GetNot returns CardTagBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetNot() *CardTagBoolExp { return v.Not }

// GetOr returns CardTagBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetOr() []*CardTagBoolExp { return v.Or }

// GetCard returns CardTagBoolExp.Card, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetCard() *CardBoolExp { return v.Card }

// GetCardId returns CardTagBoolExp.CardId, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetCardId() *UuidComparisonExp { return v.CardId }

// GetCreatedAt returns CardTagBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns CardTagBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetTag returns CardTagBoolExp.Tag, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetTag() *TagBoolExp { return v.Tag }

// GetTagId returns CardTagBoolExp.TagId, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetTagId() *UuidComparisonExp { return v.TagId }

// GetUpdatedAt returns CardTagBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardTagBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "card_tag"
type CardTagConstraint string

const (
	// unique or primary key constraint on columns "tag_id", "card_id"
	CardTagConstraintCardTagPkey CardTagConstraint = "card_tag_pkey"
)

// input type for inserting data into table "card_tag"
type CardTagInsertInput struct {
	Card      *CardObjRelInsertInput `json:"card,omitempty"`
	CardId    string                 `json:"cardId"`
	CreatedAt time.Time              `json:"createdAt"`
	DeletedAt time.Time              `json:"deletedAt"`
	Tag       *TagObjRelInsertInput  `json:"tag,omitempty"`
	TagId     string                 `json:"tagId"`
	UpdatedAt time.Time              `json:"updatedAt"`
}

// GetCard returns CardTagInsertInput.Card, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetCard() *CardObjRelInsertInput { return v.Card }

// GetCardId returns CardTagInsertInput.CardId, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetCardId() string { return v.CardId }

// GetCreatedAt returns CardTagInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns CardTagInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetTag returns CardTagInsertInput.Tag, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetTag() *TagObjRelInsertInput { return v.Tag }

// GetTagId returns CardTagInsertInput.TagId, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetTagId() string { return v.TagId }

// GetUpdatedAt returns CardTagInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CardTagInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// on_conflict condition type for table "card_tag"
type CardTagOnConflict struct {
	Constraint     CardTagConstraint     `json:"constraint"`
	Update_columns []CardTagUpdateColumn `json:"update_columns"`
	Where          *CardTagBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CardTagOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CardTagOnConflict) GetConstraint() CardTagConstraint { return v.Constraint }

// GetUpdate_columns returns CardTagOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CardTagOnConflict) GetUpdate_columns() []CardTagUpdateColumn { return v.Update_columns }

// GetWhere returns CardTagOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CardTagOnConflict) GetWhere() *CardTagBoolExp { return v.Where }

// select columns of table "card_tag"
type CardTagSelectColumn string

const (
	// column name
	CardTagSelectColumnCardid CardTagSelectColumn = "cardId"
	// column name
	CardTagSelectColumnCreatedat CardTagSelectColumn = "createdAt"
	// column name
	CardTagSelectColumnDeletedat CardTagSelectColumn = "deletedAt"
	// column name
	CardTagSelectColumnTagid CardTagSelectColumn = "tagId"
	// column name
	CardTagSelectColumnUpdatedat CardTagSelectColumn = "updatedAt"
)

// update columns of table "card_tag"
type CardTagUpdateColumn string

const (
	// column name
	CardTagUpdateColumnCardid CardTagUpdateColumn = "cardId"
	// column name
	CardTagUpdateColumnCreatedat CardTagUpdateColumn = "createdAt"
	// column name
	CardTagUpdateColumnDeletedat CardTagUpdateColumn = "deletedAt"
	// column name
	CardTagUpdateColumnTagid CardTagUpdateColumn = "tagId"
	// column name
	CardTagUpdateColumnUpdatedat CardTagUpdateColumn = "updatedAt"
)

// Boolean expression to filter rows from the table "card_type". All fields are combined with a logical 'AND'.
type CardTypeBoolExp struct {
	And             []*CardTypeBoolExp       `json:"_and,omitempty"`
	Not             *CardTypeBoolExp         `json:"_not,omitempty"`
	Or              []*CardTypeBoolExp       `json:"_or,omitempty"`
	Cards           *CardBoolExp             `json:"cards,omitempty"`
	Cards_aggregate *Card_aggregate_bool_exp `json:"cards_aggregate,omitempty"`
	Comment         *StringComparisonExp     `json:"comment,omitempty"`
	Value           *StringComparisonExp     `json:"value,omitempty"`
}

// GetAnd returns CardTypeBoolExp.And, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetAnd() []*CardTypeBoolExp { return v.And }

// GetNot returns CardTypeBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetNot() *CardTypeBoolExp { return v.Not }

// GetOr returns CardTypeBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetOr() []*CardTypeBoolExp { return v.Or }

// GetCards returns CardTypeBoolExp.Cards, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetCards() *CardBoolExp { return v.Cards }

// GetCards_aggregate returns CardTypeBoolExp.Cards_aggregate, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetCards_aggregate() *Card_aggregate_bool_exp { return v.Cards_aggregate }

// GetComment returns CardTypeBoolExp.Comment, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetComment() *StringComparisonExp { return v.Comment }

// GetValue returns CardTypeBoolExp.Value, and is useful for accessing the field via an interface.
func (v *CardTypeBoolExp) GetValue() *StringComparisonExp { return v.Value }

// unique or primary key constraints on table "card_type"
type CardTypeConstraint string

const (
	// unique or primary key constraint on columns "value"
	CardTypeConstraintCardTypePkey CardTypeConstraint = "card_type_pkey"
	// unique or primary key constraint on columns "value"
	CardTypeConstraintCardTypeUnique CardTypeConstraint = "card_type_unique"
)

type CardTypeEnum string

const (
	// A line card
	CardTypeEnumLine CardTypeEnum = "LINE"
	// A void card
	CardTypeEnumVoid CardTypeEnum = "VOID"
)

// Boolean expression to compare columns of type "CardTypeEnum". All fields are combined with logical 'AND'.
type CardTypeEnumComparisonExp struct {
	Eq     CardTypeEnum   `json:"_eq"`
	In     []CardTypeEnum `json:"_in"`
	IsNull bool           `json:"_isNull"`
	Neq    CardTypeEnum   `json:"_neq"`
	Nin    []CardTypeEnum `json:"_nin"`
}

// GetEq returns CardTypeEnumComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *CardTypeEnumComparisonExp) GetEq() CardTypeEnum { return v.Eq }

// GetIn returns CardTypeEnumComparisonExp.In, and is useful for accessing the field via an interface.
func (v *CardTypeEnumComparisonExp) GetIn() []CardTypeEnum { return v.In }

// GetIsNull returns CardTypeEnumComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *CardTypeEnumComparisonExp) GetIsNull() bool { return v.IsNull }

// GetNeq returns CardTypeEnumComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *CardTypeEnumComparisonExp) GetNeq() CardTypeEnum { return v.Neq }

// GetNin returns CardTypeEnumComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *CardTypeEnumComparisonExp) GetNin() []CardTypeEnum { return v.Nin }

// input type for inserting data into table "card_type"
type CardTypeInsertInput struct {
	Cards *CardArrRelInsertInput `json:"cards,omitempty"`
	// The comment of the card type.
	Comment string `json:"comment"`
	// The value of the card type.
	Value string `json:"value"`
}

// GetCards returns CardTypeInsertInput.Cards, and is useful for accessing the field via an interface.
func (v *CardTypeInsertInput) GetCards() *CardArrRelInsertInput { return v.Cards }

// GetComment returns CardTypeInsertInput.Comment, and is useful for accessing the field via an interface.
func (v *CardTypeInsertInput) GetComment() string { return v.Comment }

// GetValue returns CardTypeInsertInput.Value, and is useful for accessing the field via an interface.
func (v *CardTypeInsertInput) GetValue() string { return v.Value }

// input type for inserting object relation for remote table "card_type"
type CardTypeObjRelInsertInput struct {
	Data *CardTypeInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CardTypeOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CardTypeObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CardTypeObjRelInsertInput) GetData() *CardTypeInsertInput { return v.Data }

// GetOnConflict returns CardTypeObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CardTypeObjRelInsertInput) GetOnConflict() *CardTypeOnConflict { return v.OnConflict }

// on_conflict condition type for table "card_type"
type CardTypeOnConflict struct {
	Constraint     CardTypeConstraint     `json:"constraint"`
	Update_columns []CardTypeUpdateColumn `json:"update_columns"`
	Where          *CardTypeBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CardTypeOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CardTypeOnConflict) GetConstraint() CardTypeConstraint { return v.Constraint }

// GetUpdate_columns returns CardTypeOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CardTypeOnConflict) GetUpdate_columns() []CardTypeUpdateColumn { return v.Update_columns }

// GetWhere returns CardTypeOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CardTypeOnConflict) GetWhere() *CardTypeBoolExp { return v.Where }

// update columns of table "card_type"
type CardTypeUpdateColumn string

const (
	// column name
	CardTypeUpdateColumnComment CardTypeUpdateColumn = "comment"
	// column name
	CardTypeUpdateColumnValue CardTypeUpdateColumn = "value"
)

// update columns of table "card"
type CardUpdateColumn string

const (
	// column name
	CardUpdateColumnBackgroundcolor CardUpdateColumn = "backgroundColor"
	// column name
	CardUpdateColumnBordercolor CardUpdateColumn = "borderColor"
	// column name
	CardUpdateColumnCreatedat CardUpdateColumn = "createdAt"
	// column name
	CardUpdateColumnDeletedat CardUpdateColumn = "deletedAt"
	// column name
	CardUpdateColumnDescription CardUpdateColumn = "description"
	// column name
	CardUpdateColumnId CardUpdateColumn = "id"
	// column name
	CardUpdateColumnLabel CardUpdateColumn = "label"
	// column name
	CardUpdateColumnLineid CardUpdateColumn = "lineId"
	// column name
	CardUpdateColumnName CardUpdateColumn = "name"
	// column name
	CardUpdateColumnSlotcolor CardUpdateColumn = "slotColor"
	// column name
	CardUpdateColumnTextcolor CardUpdateColumn = "textColor"
	// column name
	CardUpdateColumnType CardUpdateColumn = "type"
	// column name
	CardUpdateColumnUpdatedat CardUpdateColumn = "updatedAt"
)

type Card_aggregate_bool_exp struct {
	Count *Card_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Card_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Card_aggregate_bool_exp) GetCount() *Card_aggregate_bool_exp_count { return v.Count }

type Card_aggregate_bool_exp_count struct {
	Arguments []CardSelectColumn `json:"arguments"`
	Distinct  bool               `json:"distinct"`
	Filter    *CardBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp  `json:"predicate,omitempty"`
}

// GetArguments returns Card_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Card_aggregate_bool_exp_count) GetArguments() []CardSelectColumn { return v.Arguments }

// GetDistinct returns Card_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Card_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Card_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Card_aggregate_bool_exp_count) GetFilter() *CardBoolExp { return v.Filter }

// GetPredicate returns Card_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Card_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

type Card_button_aggregate_bool_exp struct {
	Count *Card_button_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Card_button_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Card_button_aggregate_bool_exp) GetCount() *Card_button_aggregate_bool_exp_count {
	return v.Count
}

type Card_button_aggregate_bool_exp_count struct {
	Arguments []CardButtonSelectColumn `json:"arguments"`
	Distinct  bool                     `json:"distinct"`
	Filter    *CardButtonBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp        `json:"predicate,omitempty"`
}

// GetArguments returns Card_button_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Card_button_aggregate_bool_exp_count) GetArguments() []CardButtonSelectColumn {
	return v.Arguments
}

// GetDistinct returns Card_button_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Card_button_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Card_button_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Card_button_aggregate_bool_exp_count) GetFilter() *CardButtonBoolExp { return v.Filter }

// GetPredicate returns Card_button_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Card_button_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

type Card_grid_aggregate_bool_exp struct {
	Count *Card_grid_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Card_grid_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Card_grid_aggregate_bool_exp) GetCount() *Card_grid_aggregate_bool_exp_count { return v.Count }

type Card_grid_aggregate_bool_exp_count struct {
	Arguments []CardGridSelectColumn `json:"arguments"`
	Distinct  bool                   `json:"distinct"`
	Filter    *CardGridBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp      `json:"predicate,omitempty"`
}

// GetArguments returns Card_grid_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Card_grid_aggregate_bool_exp_count) GetArguments() []CardGridSelectColumn {
	return v.Arguments
}

// GetDistinct returns Card_grid_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Card_grid_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Card_grid_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Card_grid_aggregate_bool_exp_count) GetFilter() *CardGridBoolExp { return v.Filter }

// GetPredicate returns Card_grid_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Card_grid_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

type Card_tag_aggregate_bool_exp struct {
	Count *Card_tag_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Card_tag_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Card_tag_aggregate_bool_exp) GetCount() *Card_tag_aggregate_bool_exp_count { return v.Count }

type Card_tag_aggregate_bool_exp_count struct {
	Arguments []CardTagSelectColumn `json:"arguments"`
	Distinct  bool                  `json:"distinct"`
	Filter    *CardTagBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp     `json:"predicate,omitempty"`
}

// GetArguments returns Card_tag_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Card_tag_aggregate_bool_exp_count) GetArguments() []CardTagSelectColumn { return v.Arguments }

// GetDistinct returns Card_tag_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Card_tag_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Card_tag_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Card_tag_aggregate_bool_exp_count) GetFilter() *CardTagBoolExp { return v.Filter }

// GetPredicate returns Card_tag_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Card_tag_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
type CitextComparisonExp struct {
	Eq  string `json:"_eq"`
	Gt  string `json:"_gt"`
	Gte string `json:"_gte"`
	// does the column match the given case-insensitive pattern
	Ilike string   `json:"_ilike"`
	In    []string `json:"_in"`
	// does the column match the given POSIX regular expression, case insensitive
	Iregex string `json:"_iregex"`
	IsNull bool   `json:"_isNull"`
	// does the column match the given pattern
	Like string `json:"_like"`
	Lt   string `json:"_lt"`
	Lte  string `json:"_lte"`
	Neq  string `json:"_neq"`
	// does the column NOT match the given case-insensitive pattern
	Nilike string   `json:"_nilike"`
	Nin    []string `json:"_nin"`
	// does the column NOT match the given POSIX regular expression, case insensitive
	Niregex string `json:"_niregex"`
	// does the column NOT match the given pattern
	Nlike string `json:"_nlike"`
	// does the column NOT match the given POSIX regular expression, case sensitive
	Nregex string `json:"_nregex"`
	// does the column NOT match the given SQL regular expression
	Nsimilar string `json:"_nsimilar"`
	// does the column match the given POSIX regular expression, case sensitive
	Regex string `json:"_regex"`
	// does the column match the given SQL regular expression
	Similar string `json:"_similar"`
}

// GetEq returns CitextComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetEq() string { return v.Eq }

// GetGt returns CitextComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetGt() string { return v.Gt }

// GetGte returns CitextComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetGte() string { return v.Gte }

// GetIlike returns CitextComparisonExp.Ilike, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetIlike() string { return v.Ilike }

// GetIn returns CitextComparisonExp.In, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetIn() []string { return v.In }

// GetIregex returns CitextComparisonExp.Iregex, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetIregex() string { return v.Iregex }

// GetIsNull returns CitextComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLike returns CitextComparisonExp.Like, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetLike() string { return v.Like }

// GetLt returns CitextComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetLt() string { return v.Lt }

// GetLte returns CitextComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetLte() string { return v.Lte }

// GetNeq returns CitextComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNeq() string { return v.Neq }

// GetNilike returns CitextComparisonExp.Nilike, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNilike() string { return v.Nilike }

// GetNin returns CitextComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNin() []string { return v.Nin }

// GetNiregex returns CitextComparisonExp.Niregex, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNiregex() string { return v.Niregex }

// GetNlike returns CitextComparisonExp.Nlike, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNlike() string { return v.Nlike }

// GetNregex returns CitextComparisonExp.Nregex, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNregex() string { return v.Nregex }

// GetNsimilar returns CitextComparisonExp.Nsimilar, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetNsimilar() string { return v.Nsimilar }

// GetRegex returns CitextComparisonExp.Regex, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetRegex() string { return v.Regex }

// GetSimilar returns CitextComparisonExp.Similar, and is useful for accessing the field via an interface.
func (v *CitextComparisonExp) GetSimilar() string { return v.Similar }

// Boolean expression to filter rows from the table "codec". All fields are combined with a logical 'AND'.
type CodecBoolExp struct {
	And          []*CodecBoolExp           `json:"_and,omitempty"`
	Not          *CodecBoolExp             `json:"_not,omitempty"`
	Or           []*CodecBoolExp           `json:"_or,omitempty"`
	Capabilities *StringComparisonExp      `json:"capabilities,omitempty"`
	CreatedAt    *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt    *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Id           *UuidComparisonExp        `json:"id,omitempty"`
	Line         *LineBoolExp              `json:"line,omitempty"`
	SmartcodecId *IntComparisonExp         `json:"smartcodecId,omitempty"`
	UpdatedAt    *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns CodecBoolExp.And, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetAnd() []*CodecBoolExp { return v.And }

// GetNot returns CodecBoolExp.Not, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetNot() *CodecBoolExp { return v.Not }

// GetOr returns CodecBoolExp.Or, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetOr() []*CodecBoolExp { return v.Or }

// GetCapabilities returns CodecBoolExp.Capabilities, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetCapabilities() *StringComparisonExp { return v.Capabilities }

// GetCreatedAt returns CodecBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns CodecBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetId returns CodecBoolExp.Id, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLine returns CodecBoolExp.Line, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetSmartcodecId returns CodecBoolExp.SmartcodecId, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetSmartcodecId() *IntComparisonExp { return v.SmartcodecId }

// GetUpdatedAt returns CodecBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CodecBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "codec"
type CodecConstraint string

const (
	// unique or primary key constraint on columns "id"
	CodecConstraintCodecPkey CodecConstraint = "codec_pkey"
)

// input type for inserting data into table "codec"
type CodecInsertInput struct {
	// The capabilities of the codec.
	Capabilities string `json:"capabilities"`
	// The date and time when the codec was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the codec was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The unique identifier of the codec.
	Id   string                 `json:"id"`
	Line *LineObjRelInsertInput `json:"line,omitempty"`
	// The smartcodec id of the codec.
	SmartcodecId int `json:"smartcodecId"`
	// The date and time when the codec was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCapabilities returns CodecInsertInput.Capabilities, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetCapabilities() string { return v.Capabilities }

// GetCreatedAt returns CodecInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns CodecInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetId returns CodecInsertInput.Id, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetId() string { return v.Id }

// GetLine returns CodecInsertInput.Line, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetSmartcodecId returns CodecInsertInput.SmartcodecId, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetSmartcodecId() int { return v.SmartcodecId }

// GetUpdatedAt returns CodecInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CodecInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "codec"
type CodecObjRelInsertInput struct {
	Data *CodecInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *CodecOnConflict `json:"onConflict,omitempty"`
}

// GetData returns CodecObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *CodecObjRelInsertInput) GetData() *CodecInsertInput { return v.Data }

// GetOnConflict returns CodecObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *CodecObjRelInsertInput) GetOnConflict() *CodecOnConflict { return v.OnConflict }

// on_conflict condition type for table "codec"
type CodecOnConflict struct {
	Constraint     CodecConstraint     `json:"constraint"`
	Update_columns []CodecUpdateColumn `json:"update_columns"`
	Where          *CodecBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns CodecOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *CodecOnConflict) GetConstraint() CodecConstraint { return v.Constraint }

// GetUpdate_columns returns CodecOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *CodecOnConflict) GetUpdate_columns() []CodecUpdateColumn { return v.Update_columns }

// GetWhere returns CodecOnConflict.Where, and is useful for accessing the field via an interface.
func (v *CodecOnConflict) GetWhere() *CodecBoolExp { return v.Where }

// update columns of table "codec"
type CodecUpdateColumn string

const (
	// column name
	CodecUpdateColumnCapabilities CodecUpdateColumn = "capabilities"
	// column name
	CodecUpdateColumnCreatedat CodecUpdateColumn = "createdAt"
	// column name
	CodecUpdateColumnDeletedat CodecUpdateColumn = "deletedAt"
	// column name
	CodecUpdateColumnId CodecUpdateColumn = "id"
	// column name
	CodecUpdateColumnSmartcodecid CodecUpdateColumn = "smartcodecId"
	// column name
	CodecUpdateColumnUpdatedat CodecUpdateColumn = "updatedAt"
)

// Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
type DateComparisonExp struct {
	Eq     time.Time   `json:"_eq"`
	Gt     time.Time   `json:"_gt"`
	Gte    time.Time   `json:"_gte"`
	In     []time.Time `json:"_in"`
	IsNull bool        `json:"_isNull"`
	Lt     time.Time   `json:"_lt"`
	Lte    time.Time   `json:"_lte"`
	Neq    time.Time   `json:"_neq"`
	Nin    []time.Time `json:"_nin"`
}

// GetEq returns DateComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetEq() time.Time { return v.Eq }

// GetGt returns DateComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetGt() time.Time { return v.Gt }

// GetGte returns DateComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetGte() time.Time { return v.Gte }

// GetIn returns DateComparisonExp.In, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetIn() []time.Time { return v.In }

// GetIsNull returns DateComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLt returns DateComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetLt() time.Time { return v.Lt }

// GetLte returns DateComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetLte() time.Time { return v.Lte }

// GetNeq returns DateComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetNeq() time.Time { return v.Neq }

// GetNin returns DateComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *DateComparisonExp) GetNin() []time.Time { return v.Nin }

// input type for inserting array relation for remote table "event"
type EventArrRelInsertInput struct {
	Data []*EventInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *EventOnConflict `json:"onConflict,omitempty"`
}

// GetData returns EventArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *EventArrRelInsertInput) GetData() []*EventInsertInput { return v.Data }

// GetOnConflict returns EventArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *EventArrRelInsertInput) GetOnConflict() *EventOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
type EventBoolExp struct {
	And              []*EventBoolExp           `json:"_and,omitempty"`
	Not              *EventBoolExp             `json:"_not,omitempty"`
	Or               []*EventBoolExp           `json:"_or,omitempty"`
	AllDay           *BooleanComparisonExp     `json:"allDay,omitempty"`
	BackgroundColor  *CitextComparisonExp      `json:"backgroundColor,omitempty"`
	BorderColor      *CitextComparisonExp      `json:"borderColor,omitempty"`
	Calendar         *CalendarBoolExp          `json:"calendar,omitempty"`
	CalendarId       *UuidComparisonExp        `json:"calendarId,omitempty"`
	ClassNames       *StringComparisonExp      `json:"classNames,omitempty"`
	Constraint       *BooleanComparisonExp     `json:"constraint,omitempty"`
	CreatedAt        *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt        *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Description      *StringComparisonExp      `json:"description,omitempty"`
	Display          *StringComparisonExp      `json:"display,omitempty"`
	DurationEditable *BooleanComparisonExp     `json:"durationEditable,omitempty"`
	Editable         *BooleanComparisonExp     `json:"editable,omitempty"`
	End              *TimestamptzComparisonExp `json:"end,omitempty"`
	EndStr           *StringComparisonExp      `json:"endStr,omitempty"`
	Event            *EventBoolExp             `json:"event,omitempty"`
	Events           *EventBoolExp             `json:"events,omitempty"`
	Events_aggregate *Event_aggregate_bool_exp `json:"events_aggregate,omitempty"`
	ExtendedProps    *JsonbComparisonExp       `json:"extendedProps,omitempty"`
	GroupId          *StringComparisonExp      `json:"groupId,omitempty"`
	Id               *UuidComparisonExp        `json:"id,omitempty"`
	Label            *StringComparisonExp      `json:"label,omitempty"`
	Line             *LineBoolExp              `json:"line,omitempty"`
	LineId           *UuidComparisonExp        `json:"lineId,omitempty"`
	Name             *StringComparisonExp      `json:"name,omitempty"`
	Overlap          *BooleanComparisonExp     `json:"overlap,omitempty"`
	ResourceEditable *BooleanComparisonExp     `json:"resourceEditable,omitempty"`
	SourceId         *UuidComparisonExp        `json:"sourceId,omitempty"`
	Start            *TimestamptzComparisonExp `json:"start,omitempty"`
	StartEditable    *BooleanComparisonExp     `json:"startEditable,omitempty"`
	StartStr         *StringComparisonExp      `json:"startStr,omitempty"`
	TextColor        *CitextComparisonExp      `json:"textColor,omitempty"`
	Title            *StringComparisonExp      `json:"title,omitempty"`
	UpdatedAt        *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
	Url              *StringComparisonExp      `json:"url,omitempty"`
}

// GetAnd returns EventBoolExp.And, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetAnd() []*EventBoolExp { return v.And }

// GetNot returns EventBoolExp.Not, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetNot() *EventBoolExp { return v.Not }

// GetOr returns EventBoolExp.Or, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetOr() []*EventBoolExp { return v.Or }

// GetAllDay returns EventBoolExp.AllDay, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetAllDay() *BooleanComparisonExp { return v.AllDay }

// GetBackgroundColor returns EventBoolExp.BackgroundColor, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetBackgroundColor() *CitextComparisonExp { return v.BackgroundColor }

// GetBorderColor returns EventBoolExp.BorderColor, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetBorderColor() *CitextComparisonExp { return v.BorderColor }

// GetCalendar returns EventBoolExp.Calendar, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetCalendar() *CalendarBoolExp { return v.Calendar }

// GetCalendarId returns EventBoolExp.CalendarId, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetCalendarId() *UuidComparisonExp { return v.CalendarId }

// GetClassNames returns EventBoolExp.ClassNames, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetClassNames() *StringComparisonExp { return v.ClassNames }

// GetConstraint returns EventBoolExp.Constraint, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetConstraint() *BooleanComparisonExp { return v.Constraint }

// GetCreatedAt returns EventBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns EventBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns EventBoolExp.Description, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetDisplay returns EventBoolExp.Display, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetDisplay() *StringComparisonExp { return v.Display }

// GetDurationEditable returns EventBoolExp.DurationEditable, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetDurationEditable() *BooleanComparisonExp { return v.DurationEditable }

// GetEditable returns EventBoolExp.Editable, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetEditable() *BooleanComparisonExp { return v.Editable }

// GetEnd returns EventBoolExp.End, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetEnd() *TimestamptzComparisonExp { return v.End }

// GetEndStr returns EventBoolExp.EndStr, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetEndStr() *StringComparisonExp { return v.EndStr }

// GetEvent returns EventBoolExp.Event, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetEvent() *EventBoolExp { return v.Event }

// GetEvents returns EventBoolExp.Events, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetEvents() *EventBoolExp { return v.Events }

// GetEvents_aggregate returns EventBoolExp.Events_aggregate, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetEvents_aggregate() *Event_aggregate_bool_exp { return v.Events_aggregate }

// GetExtendedProps returns EventBoolExp.ExtendedProps, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetExtendedProps() *JsonbComparisonExp { return v.ExtendedProps }

// GetGroupId returns EventBoolExp.GroupId, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetGroupId() *StringComparisonExp { return v.GroupId }

// GetId returns EventBoolExp.Id, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns EventBoolExp.Label, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLine returns EventBoolExp.Line, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetLineId returns EventBoolExp.LineId, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetLineId() *UuidComparisonExp { return v.LineId }

// GetName returns EventBoolExp.Name, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetOverlap returns EventBoolExp.Overlap, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetOverlap() *BooleanComparisonExp { return v.Overlap }

// GetResourceEditable returns EventBoolExp.ResourceEditable, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetResourceEditable() *BooleanComparisonExp { return v.ResourceEditable }

// GetSourceId returns EventBoolExp.SourceId, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetSourceId() *UuidComparisonExp { return v.SourceId }

// GetStart returns EventBoolExp.Start, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetStart() *TimestamptzComparisonExp { return v.Start }

// GetStartEditable returns EventBoolExp.StartEditable, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetStartEditable() *BooleanComparisonExp { return v.StartEditable }

// GetStartStr returns EventBoolExp.StartStr, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetStartStr() *StringComparisonExp { return v.StartStr }

// GetTextColor returns EventBoolExp.TextColor, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetTextColor() *CitextComparisonExp { return v.TextColor }

// GetTitle returns EventBoolExp.Title, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetTitle() *StringComparisonExp { return v.Title }

// GetUpdatedAt returns EventBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUrl returns EventBoolExp.Url, and is useful for accessing the field via an interface.
func (v *EventBoolExp) GetUrl() *StringComparisonExp { return v.Url }

// unique or primary key constraints on table "event"
type EventConstraint string

const (
	// unique or primary key constraint on columns "id"
	EventConstraintEventPkey EventConstraint = "event_pkey"
)

// input type for inserting data into table "event"
type EventInsertInput struct {
	// Determines if the event is shown in the “all-day” section of relevant views. In addition, if true the time text is not displayed with the event.
	AllDay bool `json:"allDay"`
	// The eventBackgroundColor override for this specific event.
	BackgroundColor string `json:"backgroundColor"`
	// The eventBorderColor override for this specific event.
	BorderColor string                     `json:"borderColor"`
	Calendar    *CalendarObjRelInsertInput `json:"calendar,omitempty"`
	CalendarId  string                     `json:"calendarId"`
	// An array of strings like [ "myclass1", "myclass2" ]. Determines which HTML classNames will be attached to the rendered event.
	ClassNames string `json:"classNames"`
	// The eventConstraint override for this specific event.
	Constraint bool `json:"constraint"`
	// The date and time when the event was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the event was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the event.
	Description string `json:"description"`
	// The rendering type of this event. Can be auto, block, list-item, background, inverse-background, or none.
	Display string `json:"display"`
	// The value overriding the eventDurationEditable setting for this specific event.
	DurationEditable bool `json:"durationEditable"`
	// The value overriding the editable setting for this specific event.
	Editable bool `json:"editable"`
	// Date object that obeys the current timeZone. When an event ends. It could be null if an end wasn’t specified.
	// Note: This value is exclusive. For example, an event with the end of 2018-09-03 will appear to span through 2018-09-02 but end before the start of 2018-09-03. See how events are are parsed from a plain object for further details.
	End time.Time `json:"end"`
	// An ISO8601 string representation of the end date. If the event is all-day, there will not be a time part.
	EndStr string                  `json:"endStr"`
	Event  *EventObjRelInsertInput `json:"event,omitempty"`
	Events *EventArrRelInsertInput `json:"events,omitempty"`
	// A plain object holding miscellaneous other properties specified during parsing. Receives properties in the explicitly given extendedProps hash as well as other non-standard properties.
	ExtendedProps interface{} `json:"extendedProps"`
	// Events that share a groupId will be dragged and resized together automatically.
	GroupId string `json:"groupId"`
	// The unique identifier of the event.
	Id string `json:"id"`
	// The label of the event is used to override the name in the UI.
	Label string                 `json:"label"`
	Line  *LineObjRelInsertInput `json:"line,omitempty"`
	// A reference to the line this calendar is linked to
	LineId string `json:"lineId"`
	// The name of the event.
	Name string `json:"name"`
	// The value overriding the eventOverlap setting for this specific event. If false, prevents this event from being dragged/resized over other events. Also prevents other events from being dragged/resized over this event. Does not accept a function.
	Overlap bool `json:"overlap"`
	// The value overriding the eventResourceEditable setting for this specific event.
	ResourceEditable bool `json:"resourceEditable"`
	// A reference to the Event Source this event came from. If the event was added dynamically via addEvent, and the source parameter was not specified, this value will be null.
	SourceId string `json:"sourceId"`
	// Date object that obeys the current timeZone. When an event begins.
	Start time.Time `json:"start"`
	// The value overriding the eventStartEditable setting for this specific event.
	StartEditable bool `json:"startEditable"`
	// An ISO8601 string representation of the start date. If the event is all-day, there will not be a time part.
	StartStr string `json:"startStr"`
	// The eventTextColor override for this specific event.
	TextColor string `json:"textColor"`
	// The text that will appear on an event.
	Title string `json:"title"`
	// The date and time when the event was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// A URL that will be visited when this event is clicked by the user. For more information on controlling this behavior, see the eventClick callback.
	Url string `json:"url"`
}

// GetAllDay returns EventInsertInput.AllDay, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetAllDay() bool { return v.AllDay }

// GetBackgroundColor returns EventInsertInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetBackgroundColor() string { return v.BackgroundColor }

// GetBorderColor returns EventInsertInput.BorderColor, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetBorderColor() string { return v.BorderColor }

// GetCalendar returns EventInsertInput.Calendar, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetCalendar() *CalendarObjRelInsertInput { return v.Calendar }

// GetCalendarId returns EventInsertInput.CalendarId, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetCalendarId() string { return v.CalendarId }

// GetClassNames returns EventInsertInput.ClassNames, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetClassNames() string { return v.ClassNames }

// GetConstraint returns EventInsertInput.Constraint, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetConstraint() bool { return v.Constraint }

// GetCreatedAt returns EventInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns EventInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns EventInsertInput.Description, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetDescription() string { return v.Description }

// GetDisplay returns EventInsertInput.Display, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetDisplay() string { return v.Display }

// GetDurationEditable returns EventInsertInput.DurationEditable, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetDurationEditable() bool { return v.DurationEditable }

// GetEditable returns EventInsertInput.Editable, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetEditable() bool { return v.Editable }

// GetEnd returns EventInsertInput.End, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetEnd() time.Time { return v.End }

// GetEndStr returns EventInsertInput.EndStr, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetEndStr() string { return v.EndStr }

// GetEvent returns EventInsertInput.Event, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetEvent() *EventObjRelInsertInput { return v.Event }

// GetEvents returns EventInsertInput.Events, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetEvents() *EventArrRelInsertInput { return v.Events }

// GetExtendedProps returns EventInsertInput.ExtendedProps, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetExtendedProps() interface{} { return v.ExtendedProps }

// GetGroupId returns EventInsertInput.GroupId, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetGroupId() string { return v.GroupId }

// GetId returns EventInsertInput.Id, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetId() string { return v.Id }

// GetLabel returns EventInsertInput.Label, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetLabel() string { return v.Label }

// GetLine returns EventInsertInput.Line, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetLineId returns EventInsertInput.LineId, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetLineId() string { return v.LineId }

// GetName returns EventInsertInput.Name, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetName() string { return v.Name }

// GetOverlap returns EventInsertInput.Overlap, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetOverlap() bool { return v.Overlap }

// GetResourceEditable returns EventInsertInput.ResourceEditable, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetResourceEditable() bool { return v.ResourceEditable }

// GetSourceId returns EventInsertInput.SourceId, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetSourceId() string { return v.SourceId }

// GetStart returns EventInsertInput.Start, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetStart() time.Time { return v.Start }

// GetStartEditable returns EventInsertInput.StartEditable, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetStartEditable() bool { return v.StartEditable }

// GetStartStr returns EventInsertInput.StartStr, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetStartStr() string { return v.StartStr }

// GetTextColor returns EventInsertInput.TextColor, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetTextColor() string { return v.TextColor }

// GetTitle returns EventInsertInput.Title, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetTitle() string { return v.Title }

// GetUpdatedAt returns EventInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns EventInsertInput.Url, and is useful for accessing the field via an interface.
func (v *EventInsertInput) GetUrl() string { return v.Url }

// input type for inserting object relation for remote table "event"
type EventObjRelInsertInput struct {
	Data *EventInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *EventOnConflict `json:"onConflict,omitempty"`
}

// GetData returns EventObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *EventObjRelInsertInput) GetData() *EventInsertInput { return v.Data }

// GetOnConflict returns EventObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *EventObjRelInsertInput) GetOnConflict() *EventOnConflict { return v.OnConflict }

// on_conflict condition type for table "event"
type EventOnConflict struct {
	Constraint     EventConstraint     `json:"constraint"`
	Update_columns []EventUpdateColumn `json:"update_columns"`
	Where          *EventBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns EventOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *EventOnConflict) GetConstraint() EventConstraint { return v.Constraint }

// GetUpdate_columns returns EventOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *EventOnConflict) GetUpdate_columns() []EventUpdateColumn { return v.Update_columns }

// GetWhere returns EventOnConflict.Where, and is useful for accessing the field via an interface.
func (v *EventOnConflict) GetWhere() *EventBoolExp { return v.Where }

// select columns of table "event"
type EventSelectColumn string

const (
	// column name
	EventSelectColumnAllday EventSelectColumn = "allDay"
	// column name
	EventSelectColumnBackgroundcolor EventSelectColumn = "backgroundColor"
	// column name
	EventSelectColumnBordercolor EventSelectColumn = "borderColor"
	// column name
	EventSelectColumnCalendarid EventSelectColumn = "calendarId"
	// column name
	EventSelectColumnClassnames EventSelectColumn = "classNames"
	// column name
	EventSelectColumnConstraint EventSelectColumn = "constraint"
	// column name
	EventSelectColumnCreatedat EventSelectColumn = "createdAt"
	// column name
	EventSelectColumnDeletedat EventSelectColumn = "deletedAt"
	// column name
	EventSelectColumnDescription EventSelectColumn = "description"
	// column name
	EventSelectColumnDisplay EventSelectColumn = "display"
	// column name
	EventSelectColumnDurationeditable EventSelectColumn = "durationEditable"
	// column name
	EventSelectColumnEditable EventSelectColumn = "editable"
	// column name
	EventSelectColumnEnd EventSelectColumn = "end"
	// column name
	EventSelectColumnEndstr EventSelectColumn = "endStr"
	// column name
	EventSelectColumnExtendedprops EventSelectColumn = "extendedProps"
	// column name
	EventSelectColumnGroupid EventSelectColumn = "groupId"
	// column name
	EventSelectColumnId EventSelectColumn = "id"
	// column name
	EventSelectColumnLabel EventSelectColumn = "label"
	// column name
	EventSelectColumnLineid EventSelectColumn = "lineId"
	// column name
	EventSelectColumnName EventSelectColumn = "name"
	// column name
	EventSelectColumnOverlap EventSelectColumn = "overlap"
	// column name
	EventSelectColumnResourceeditable EventSelectColumn = "resourceEditable"
	// column name
	EventSelectColumnSourceid EventSelectColumn = "sourceId"
	// column name
	EventSelectColumnStart EventSelectColumn = "start"
	// column name
	EventSelectColumnStarteditable EventSelectColumn = "startEditable"
	// column name
	EventSelectColumnStartstr EventSelectColumn = "startStr"
	// column name
	EventSelectColumnTextcolor EventSelectColumn = "textColor"
	// column name
	EventSelectColumnTitle EventSelectColumn = "title"
	// column name
	EventSelectColumnUpdatedat EventSelectColumn = "updatedAt"
	// column name
	EventSelectColumnUrl EventSelectColumn = "url"
)

// update columns of table "event"
type EventUpdateColumn string

const (
	// column name
	EventUpdateColumnAllday EventUpdateColumn = "allDay"
	// column name
	EventUpdateColumnBackgroundcolor EventUpdateColumn = "backgroundColor"
	// column name
	EventUpdateColumnBordercolor EventUpdateColumn = "borderColor"
	// column name
	EventUpdateColumnCalendarid EventUpdateColumn = "calendarId"
	// column name
	EventUpdateColumnClassnames EventUpdateColumn = "classNames"
	// column name
	EventUpdateColumnConstraint EventUpdateColumn = "constraint"
	// column name
	EventUpdateColumnCreatedat EventUpdateColumn = "createdAt"
	// column name
	EventUpdateColumnDeletedat EventUpdateColumn = "deletedAt"
	// column name
	EventUpdateColumnDescription EventUpdateColumn = "description"
	// column name
	EventUpdateColumnDisplay EventUpdateColumn = "display"
	// column name
	EventUpdateColumnDurationeditable EventUpdateColumn = "durationEditable"
	// column name
	EventUpdateColumnEditable EventUpdateColumn = "editable"
	// column name
	EventUpdateColumnEnd EventUpdateColumn = "end"
	// column name
	EventUpdateColumnEndstr EventUpdateColumn = "endStr"
	// column name
	EventUpdateColumnExtendedprops EventUpdateColumn = "extendedProps"
	// column name
	EventUpdateColumnGroupid EventUpdateColumn = "groupId"
	// column name
	EventUpdateColumnId EventUpdateColumn = "id"
	// column name
	EventUpdateColumnLabel EventUpdateColumn = "label"
	// column name
	EventUpdateColumnLineid EventUpdateColumn = "lineId"
	// column name
	EventUpdateColumnName EventUpdateColumn = "name"
	// column name
	EventUpdateColumnOverlap EventUpdateColumn = "overlap"
	// column name
	EventUpdateColumnResourceeditable EventUpdateColumn = "resourceEditable"
	// column name
	EventUpdateColumnSourceid EventUpdateColumn = "sourceId"
	// column name
	EventUpdateColumnStart EventUpdateColumn = "start"
	// column name
	EventUpdateColumnStarteditable EventUpdateColumn = "startEditable"
	// column name
	EventUpdateColumnStartstr EventUpdateColumn = "startStr"
	// column name
	EventUpdateColumnTextcolor EventUpdateColumn = "textColor"
	// column name
	EventUpdateColumnTitle EventUpdateColumn = "title"
	// column name
	EventUpdateColumnUpdatedat EventUpdateColumn = "updatedAt"
	// column name
	EventUpdateColumnUrl EventUpdateColumn = "url"
)

type Event_aggregate_bool_exp struct {
	Bool_and *Event_aggregate_bool_exp_bool_and `json:"bool_and,omitempty"`
	Bool_or  *Event_aggregate_bool_exp_bool_or  `json:"bool_or,omitempty"`
	Count    *Event_aggregate_bool_exp_count    `json:"count,omitempty"`
}

// GetBool_and returns Event_aggregate_bool_exp.Bool_and, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp) GetBool_and() *Event_aggregate_bool_exp_bool_and {
	return v.Bool_and
}

// GetBool_or returns Event_aggregate_bool_exp.Bool_or, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp) GetBool_or() *Event_aggregate_bool_exp_bool_or { return v.Bool_or }

// GetCount returns Event_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp) GetCount() *Event_aggregate_bool_exp_count { return v.Count }

type Event_aggregate_bool_exp_bool_and struct {
	Arguments Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns `json:"arguments"`
	Distinct  bool                                                                    `json:"distinct"`
	Filter    *EventBoolExp                                                           `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                   `json:"predicate,omitempty"`
}

// GetArguments returns Event_aggregate_bool_exp_bool_and.Arguments, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_and) GetArguments() Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Event_aggregate_bool_exp_bool_and.Distinct, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_and) GetDistinct() bool { return v.Distinct }

// GetFilter returns Event_aggregate_bool_exp_bool_and.Filter, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_and) GetFilter() *EventBoolExp { return v.Filter }

// GetPredicate returns Event_aggregate_bool_exp_bool_and.Predicate, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_and) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type Event_aggregate_bool_exp_bool_or struct {
	Arguments Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns `json:"arguments"`
	Distinct  bool                                                                   `json:"distinct"`
	Filter    *EventBoolExp                                                          `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                  `json:"predicate,omitempty"`
}

// GetArguments returns Event_aggregate_bool_exp_bool_or.Arguments, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_or) GetArguments() Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Event_aggregate_bool_exp_bool_or.Distinct, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_or) GetDistinct() bool { return v.Distinct }

// GetFilter returns Event_aggregate_bool_exp_bool_or.Filter, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_or) GetFilter() *EventBoolExp { return v.Filter }

// GetPredicate returns Event_aggregate_bool_exp_bool_or.Predicate, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_bool_or) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type Event_aggregate_bool_exp_count struct {
	Arguments []EventSelectColumn `json:"arguments"`
	Distinct  bool                `json:"distinct"`
	Filter    *EventBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp   `json:"predicate,omitempty"`
}

// GetArguments returns Event_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_count) GetArguments() []EventSelectColumn { return v.Arguments }

// GetDistinct returns Event_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Event_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_count) GetFilter() *EventBoolExp { return v.Filter }

// GetPredicate returns Event_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Event_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// select "event_aggregate_bool_exp_bool_and_arguments_columns" columns of table "event"
type Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns string

const (
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsAllday Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "allDay"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsConstraint Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "constraint"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsDurationeditable Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "durationEditable"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsEditable Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "editable"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsOverlap Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "overlap"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsResourceeditable Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "resourceEditable"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columnsStarteditable Event_select_column_event_aggregate_bool_exp_bool_and_arguments_columns = "startEditable"
)

// select "event_aggregate_bool_exp_bool_or_arguments_columns" columns of table "event"
type Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns string

const (
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsAllday Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "allDay"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsConstraint Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "constraint"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsDurationeditable Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "durationEditable"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsEditable Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "editable"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsOverlap Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "overlap"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsResourceeditable Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "resourceEditable"
	// column name
	Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columnsStarteditable Event_select_column_event_aggregate_bool_exp_bool_or_arguments_columns = "startEditable"
)

// input type for inserting array relation for remote table "grid"
type GridArrRelInsertInput struct {
	Data []*GridInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *GridOnConflict `json:"onConflict,omitempty"`
}

// GetData returns GridArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *GridArrRelInsertInput) GetData() []*GridInsertInput { return v.Data }

// GetOnConflict returns GridArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *GridArrRelInsertInput) GetOnConflict() *GridOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "grid". All fields are combined with a logical 'AND'.
type GridBoolExp struct {
	And                      []*GridBoolExp                    `json:"_and,omitempty"`
	Not                      *GridBoolExp                      `json:"_not,omitempty"`
	Or                       []*GridBoolExp                    `json:"_or,omitempty"`
	CardBorderWidth          *IntComparisonExp                 `json:"cardBorderWidth,omitempty"`
	Card_grids               *CardGridBoolExp                  `json:"card_grids,omitempty"`
	Card_grids_aggregate     *Card_grid_aggregate_bool_exp     `json:"card_grids_aggregate,omitempty"`
	Column                   *IntComparisonExp                 `json:"column,omitempty"`
	CreatedAt                *TimestamptzComparisonExp         `json:"createdAt,omitempty"`
	DeletedAt                *TimestamptzComparisonExp         `json:"deletedAt,omitempty"`
	Description              *StringComparisonExp              `json:"description,omitempty"`
	Grid_showinfos           *GridShowinfoBoolExp              `json:"grid_showinfos,omitempty"`
	Grid_showinfos_aggregate *Grid_showinfo_aggregate_bool_exp `json:"grid_showinfos_aggregate,omitempty"`
	HorizontalScroll         *BooleanComparisonExp             `json:"horizontalScroll,omitempty"`
	Id                       *UuidComparisonExp                `json:"id,omitempty"`
	Label                    *StringComparisonExp              `json:"label,omitempty"`
	Name                     *StringComparisonExp              `json:"name,omitempty"`
	Position                 *IntComparisonExp                 `json:"position,omitempty"`
	Row                      *IntComparisonExp                 `json:"row,omitempty"`
	Showinfos                *ShowinfoBoolExp                  `json:"showinfos,omitempty"`
	Showinfos_aggregate      *Showinfo_aggregate_bool_exp      `json:"showinfos_aggregate,omitempty"`
	SlotPadding              *IntComparisonExp                 `json:"slotPadding,omitempty"`
	Studio                   *StudioBoolExp                    `json:"studio,omitempty"`
	StudioId                 *UuidComparisonExp                `json:"studioId,omitempty"`
	UpdatedAt                *TimestamptzComparisonExp         `json:"updatedAt,omitempty"`
}

// GetAnd returns GridBoolExp.And, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetAnd() []*GridBoolExp { return v.And }

// GetNot returns GridBoolExp.Not, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetNot() *GridBoolExp { return v.Not }

// GetOr returns GridBoolExp.Or, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetOr() []*GridBoolExp { return v.Or }

// GetCardBorderWidth returns GridBoolExp.CardBorderWidth, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetCardBorderWidth() *IntComparisonExp { return v.CardBorderWidth }

// GetCard_grids returns GridBoolExp.Card_grids, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetCard_grids() *CardGridBoolExp { return v.Card_grids }

// GetCard_grids_aggregate returns GridBoolExp.Card_grids_aggregate, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetCard_grids_aggregate() *Card_grid_aggregate_bool_exp {
	return v.Card_grids_aggregate
}

// GetColumn returns GridBoolExp.Column, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetColumn() *IntComparisonExp { return v.Column }

// GetCreatedAt returns GridBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns GridBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns GridBoolExp.Description, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetGrid_showinfos returns GridBoolExp.Grid_showinfos, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetGrid_showinfos() *GridShowinfoBoolExp { return v.Grid_showinfos }

// GetGrid_showinfos_aggregate returns GridBoolExp.Grid_showinfos_aggregate, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetGrid_showinfos_aggregate() *Grid_showinfo_aggregate_bool_exp {
	return v.Grid_showinfos_aggregate
}

// GetHorizontalScroll returns GridBoolExp.HorizontalScroll, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetHorizontalScroll() *BooleanComparisonExp { return v.HorizontalScroll }

// GetId returns GridBoolExp.Id, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns GridBoolExp.Label, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetName returns GridBoolExp.Name, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetPosition returns GridBoolExp.Position, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetPosition() *IntComparisonExp { return v.Position }

// GetRow returns GridBoolExp.Row, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetRow() *IntComparisonExp { return v.Row }

// GetShowinfos returns GridBoolExp.Showinfos, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetShowinfos() *ShowinfoBoolExp { return v.Showinfos }

// GetShowinfos_aggregate returns GridBoolExp.Showinfos_aggregate, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetShowinfos_aggregate() *Showinfo_aggregate_bool_exp {
	return v.Showinfos_aggregate
}

// GetSlotPadding returns GridBoolExp.SlotPadding, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetSlotPadding() *IntComparisonExp { return v.SlotPadding }

// GetStudio returns GridBoolExp.Studio, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetStudio() *StudioBoolExp { return v.Studio }

// GetStudioId returns GridBoolExp.StudioId, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetStudioId() *UuidComparisonExp { return v.StudioId }

// GetUpdatedAt returns GridBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GridBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "grid"
type GridConstraint string

const (
	// unique or primary key constraint on columns "id"
	GridConstraintGridPkey GridConstraint = "grid_pkey"
)

// input type for inserting data into table "grid"
type GridInsertInput struct {
	// The border width of the cards in the grid.
	CardBorderWidth int                        `json:"cardBorderWidth"`
	Card_grids      *CardGridArrRelInsertInput `json:"card_grids,omitempty"`
	// The number of columns in the grid.
	Column int `json:"column"`
	// The date and time when the grid was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the grid was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the grid.
	Description    string                         `json:"description"`
	Grid_showinfos *GridShowinfoArrRelInsertInput `json:"grid_showinfos,omitempty"`
	// Whether the grid has horizontal scroll.
	HorizontalScroll bool `json:"horizontalScroll"`
	// The unique identifier of the grid.
	Id string `json:"id"`
	// The label of the grid is used to override the name in the UI.
	Label string `json:"label"`
	// The name of the grid.
	Name string `json:"name"`
	// The position of the grid in the ui.
	Position int `json:"position"`
	// The number of rows in the grid.
	Row       int                        `json:"row"`
	Showinfos *ShowinfoArrRelInsertInput `json:"showinfos,omitempty"`
	// The padding of the grid slots.
	SlotPadding int                      `json:"slotPadding"`
	Studio      *StudioObjRelInsertInput `json:"studio,omitempty"`
	// The studio that the grid belongs to.
	StudioId string `json:"studioId"`
	// The date and time when the grid was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCardBorderWidth returns GridInsertInput.CardBorderWidth, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetCardBorderWidth() int { return v.CardBorderWidth }

// GetCard_grids returns GridInsertInput.Card_grids, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetCard_grids() *CardGridArrRelInsertInput { return v.Card_grids }

// GetColumn returns GridInsertInput.Column, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetColumn() int { return v.Column }

// GetCreatedAt returns GridInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns GridInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns GridInsertInput.Description, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetDescription() string { return v.Description }

// GetGrid_showinfos returns GridInsertInput.Grid_showinfos, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetGrid_showinfos() *GridShowinfoArrRelInsertInput { return v.Grid_showinfos }

// GetHorizontalScroll returns GridInsertInput.HorizontalScroll, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetHorizontalScroll() bool { return v.HorizontalScroll }

// GetId returns GridInsertInput.Id, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetId() string { return v.Id }

// GetLabel returns GridInsertInput.Label, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetLabel() string { return v.Label }

// GetName returns GridInsertInput.Name, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetName() string { return v.Name }

// GetPosition returns GridInsertInput.Position, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetPosition() int { return v.Position }

// GetRow returns GridInsertInput.Row, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetRow() int { return v.Row }

// GetShowinfos returns GridInsertInput.Showinfos, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetShowinfos() *ShowinfoArrRelInsertInput { return v.Showinfos }

// GetSlotPadding returns GridInsertInput.SlotPadding, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetSlotPadding() int { return v.SlotPadding }

// GetStudio returns GridInsertInput.Studio, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetStudio() *StudioObjRelInsertInput { return v.Studio }

// GetStudioId returns GridInsertInput.StudioId, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetStudioId() string { return v.StudioId }

// GetUpdatedAt returns GridInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GridInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "grid"
type GridObjRelInsertInput struct {
	Data *GridInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *GridOnConflict `json:"onConflict,omitempty"`
}

// GetData returns GridObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *GridObjRelInsertInput) GetData() *GridInsertInput { return v.Data }

// GetOnConflict returns GridObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *GridObjRelInsertInput) GetOnConflict() *GridOnConflict { return v.OnConflict }

// on_conflict condition type for table "grid"
type GridOnConflict struct {
	Constraint     GridConstraint     `json:"constraint"`
	Update_columns []GridUpdateColumn `json:"update_columns"`
	Where          *GridBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns GridOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *GridOnConflict) GetConstraint() GridConstraint { return v.Constraint }

// GetUpdate_columns returns GridOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *GridOnConflict) GetUpdate_columns() []GridUpdateColumn { return v.Update_columns }

// GetWhere returns GridOnConflict.Where, and is useful for accessing the field via an interface.
func (v *GridOnConflict) GetWhere() *GridBoolExp { return v.Where }

// select columns of table "grid"
type GridSelectColumn string

const (
	// column name
	GridSelectColumnCardborderwidth GridSelectColumn = "cardBorderWidth"
	// column name
	GridSelectColumnColumn GridSelectColumn = "column"
	// column name
	GridSelectColumnCreatedat GridSelectColumn = "createdAt"
	// column name
	GridSelectColumnDeletedat GridSelectColumn = "deletedAt"
	// column name
	GridSelectColumnDescription GridSelectColumn = "description"
	// column name
	GridSelectColumnHorizontalscroll GridSelectColumn = "horizontalScroll"
	// column name
	GridSelectColumnId GridSelectColumn = "id"
	// column name
	GridSelectColumnLabel GridSelectColumn = "label"
	// column name
	GridSelectColumnName GridSelectColumn = "name"
	// column name
	GridSelectColumnPosition GridSelectColumn = "position"
	// column name
	GridSelectColumnRow GridSelectColumn = "row"
	// column name
	GridSelectColumnSlotpadding GridSelectColumn = "slotPadding"
	// column name
	GridSelectColumnStudioid GridSelectColumn = "studioId"
	// column name
	GridSelectColumnUpdatedat GridSelectColumn = "updatedAt"
)

// input type for inserting array relation for remote table "grid_showinfo"
type GridShowinfoArrRelInsertInput struct {
	Data []*GridShowinfoInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *GridShowinfoOnConflict `json:"onConflict,omitempty"`
}

// GetData returns GridShowinfoArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *GridShowinfoArrRelInsertInput) GetData() []*GridShowinfoInsertInput { return v.Data }

// GetOnConflict returns GridShowinfoArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *GridShowinfoArrRelInsertInput) GetOnConflict() *GridShowinfoOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "grid_showinfo". All fields are combined with a logical 'AND'.
type GridShowinfoBoolExp struct {
	And        []*GridShowinfoBoolExp    `json:"_and,omitempty"`
	Not        *GridShowinfoBoolExp      `json:"_not,omitempty"`
	Or         []*GridShowinfoBoolExp    `json:"_or,omitempty"`
	CreatedAt  *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt  *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Grid       *GridBoolExp              `json:"grid,omitempty"`
	GridId     *UuidComparisonExp        `json:"gridId,omitempty"`
	Id         *UuidComparisonExp        `json:"id,omitempty"`
	Showinfo   *ShowinfoBoolExp          `json:"showinfo,omitempty"`
	ShowinfoId *UuidComparisonExp        `json:"showinfoId,omitempty"`
	UpdatedAt  *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns GridShowinfoBoolExp.And, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetAnd() []*GridShowinfoBoolExp { return v.And }

// GetNot returns GridShowinfoBoolExp.Not, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetNot() *GridShowinfoBoolExp { return v.Not }

// GetOr returns GridShowinfoBoolExp.Or, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetOr() []*GridShowinfoBoolExp { return v.Or }

// GetCreatedAt returns GridShowinfoBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns GridShowinfoBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetGrid returns GridShowinfoBoolExp.Grid, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetGrid() *GridBoolExp { return v.Grid }

// GetGridId returns GridShowinfoBoolExp.GridId, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetGridId() *UuidComparisonExp { return v.GridId }

// GetId returns GridShowinfoBoolExp.Id, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetShowinfo returns GridShowinfoBoolExp.Showinfo, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetShowinfo() *ShowinfoBoolExp { return v.Showinfo }

// GetShowinfoId returns GridShowinfoBoolExp.ShowinfoId, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetShowinfoId() *UuidComparisonExp { return v.ShowinfoId }

// GetUpdatedAt returns GridShowinfoBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GridShowinfoBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "grid_showinfo"
type GridShowinfoConstraint string

const (
	// unique or primary key constraint on columns "id"
	GridShowinfoConstraintGridShowinfoPkey GridShowinfoConstraint = "grid_showinfo_pkey"
)

// input type for inserting data into table "grid_showinfo"
type GridShowinfoInsertInput struct {
	// The date and time when the grid_showinfo was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the grid_showinfo was deleted.
	DeletedAt time.Time              `json:"deletedAt"`
	Grid      *GridObjRelInsertInput `json:"grid,omitempty"`
	// The grid this grid_showinfo is linked to.
	GridId string `json:"gridId"`
	// The unique identifier of the grid_showinfo.
	Id       string                     `json:"id"`
	Showinfo *ShowinfoObjRelInsertInput `json:"showinfo,omitempty"`
	// The showinfo this grid_showinfo is linked to.
	ShowinfoId string `json:"showinfoId"`
	// The date and time when the grid_showinfo was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCreatedAt returns GridShowinfoInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns GridShowinfoInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetGrid returns GridShowinfoInsertInput.Grid, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetGrid() *GridObjRelInsertInput { return v.Grid }

// GetGridId returns GridShowinfoInsertInput.GridId, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetGridId() string { return v.GridId }

// GetId returns GridShowinfoInsertInput.Id, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetId() string { return v.Id }

// GetShowinfo returns GridShowinfoInsertInput.Showinfo, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetShowinfo() *ShowinfoObjRelInsertInput { return v.Showinfo }

// GetShowinfoId returns GridShowinfoInsertInput.ShowinfoId, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetShowinfoId() string { return v.ShowinfoId }

// GetUpdatedAt returns GridShowinfoInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GridShowinfoInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// on_conflict condition type for table "grid_showinfo"
type GridShowinfoOnConflict struct {
	Constraint     GridShowinfoConstraint     `json:"constraint"`
	Update_columns []GridShowinfoUpdateColumn `json:"update_columns"`
	Where          *GridShowinfoBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns GridShowinfoOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *GridShowinfoOnConflict) GetConstraint() GridShowinfoConstraint { return v.Constraint }

// GetUpdate_columns returns GridShowinfoOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *GridShowinfoOnConflict) GetUpdate_columns() []GridShowinfoUpdateColumn {
	return v.Update_columns
}

// GetWhere returns GridShowinfoOnConflict.Where, and is useful for accessing the field via an interface.
func (v *GridShowinfoOnConflict) GetWhere() *GridShowinfoBoolExp { return v.Where }

// select columns of table "grid_showinfo"
type GridShowinfoSelectColumn string

const (
	// column name
	GridShowinfoSelectColumnCreatedat GridShowinfoSelectColumn = "createdAt"
	// column name
	GridShowinfoSelectColumnDeletedat GridShowinfoSelectColumn = "deletedAt"
	// column name
	GridShowinfoSelectColumnGridid GridShowinfoSelectColumn = "gridId"
	// column name
	GridShowinfoSelectColumnId GridShowinfoSelectColumn = "id"
	// column name
	GridShowinfoSelectColumnShowinfoid GridShowinfoSelectColumn = "showinfoId"
	// column name
	GridShowinfoSelectColumnUpdatedat GridShowinfoSelectColumn = "updatedAt"
)

// update columns of table "grid_showinfo"
type GridShowinfoUpdateColumn string

const (
	// column name
	GridShowinfoUpdateColumnCreatedat GridShowinfoUpdateColumn = "createdAt"
	// column name
	GridShowinfoUpdateColumnDeletedat GridShowinfoUpdateColumn = "deletedAt"
	// column name
	GridShowinfoUpdateColumnGridid GridShowinfoUpdateColumn = "gridId"
	// column name
	GridShowinfoUpdateColumnId GridShowinfoUpdateColumn = "id"
	// column name
	GridShowinfoUpdateColumnShowinfoid GridShowinfoUpdateColumn = "showinfoId"
	// column name
	GridShowinfoUpdateColumnUpdatedat GridShowinfoUpdateColumn = "updatedAt"
)

// update columns of table "grid"
type GridUpdateColumn string

const (
	// column name
	GridUpdateColumnCardborderwidth GridUpdateColumn = "cardBorderWidth"
	// column name
	GridUpdateColumnColumn GridUpdateColumn = "column"
	// column name
	GridUpdateColumnCreatedat GridUpdateColumn = "createdAt"
	// column name
	GridUpdateColumnDeletedat GridUpdateColumn = "deletedAt"
	// column name
	GridUpdateColumnDescription GridUpdateColumn = "description"
	// column name
	GridUpdateColumnHorizontalscroll GridUpdateColumn = "horizontalScroll"
	// column name
	GridUpdateColumnId GridUpdateColumn = "id"
	// column name
	GridUpdateColumnLabel GridUpdateColumn = "label"
	// column name
	GridUpdateColumnName GridUpdateColumn = "name"
	// column name
	GridUpdateColumnPosition GridUpdateColumn = "position"
	// column name
	GridUpdateColumnRow GridUpdateColumn = "row"
	// column name
	GridUpdateColumnSlotpadding GridUpdateColumn = "slotPadding"
	// column name
	GridUpdateColumnStudioid GridUpdateColumn = "studioId"
	// column name
	GridUpdateColumnUpdatedat GridUpdateColumn = "updatedAt"
)

type Grid_aggregate_bool_exp struct {
	Bool_and *Grid_aggregate_bool_exp_bool_and `json:"bool_and,omitempty"`
	Bool_or  *Grid_aggregate_bool_exp_bool_or  `json:"bool_or,omitempty"`
	Count    *Grid_aggregate_bool_exp_count    `json:"count,omitempty"`
}

// GetBool_and returns Grid_aggregate_bool_exp.Bool_and, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp) GetBool_and() *Grid_aggregate_bool_exp_bool_and { return v.Bool_and }

// GetBool_or returns Grid_aggregate_bool_exp.Bool_or, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp) GetBool_or() *Grid_aggregate_bool_exp_bool_or { return v.Bool_or }

// GetCount returns Grid_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp) GetCount() *Grid_aggregate_bool_exp_count { return v.Count }

type Grid_aggregate_bool_exp_bool_and struct {
	Arguments Grid_select_column_grid_aggregate_bool_exp_bool_and_arguments_columns `json:"arguments"`
	Distinct  bool                                                                  `json:"distinct"`
	Filter    *GridBoolExp                                                          `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                 `json:"predicate,omitempty"`
}

// GetArguments returns Grid_aggregate_bool_exp_bool_and.Arguments, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_and) GetArguments() Grid_select_column_grid_aggregate_bool_exp_bool_and_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Grid_aggregate_bool_exp_bool_and.Distinct, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_and) GetDistinct() bool { return v.Distinct }

// GetFilter returns Grid_aggregate_bool_exp_bool_and.Filter, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_and) GetFilter() *GridBoolExp { return v.Filter }

// GetPredicate returns Grid_aggregate_bool_exp_bool_and.Predicate, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_and) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type Grid_aggregate_bool_exp_bool_or struct {
	Arguments Grid_select_column_grid_aggregate_bool_exp_bool_or_arguments_columns `json:"arguments"`
	Distinct  bool                                                                 `json:"distinct"`
	Filter    *GridBoolExp                                                         `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                `json:"predicate,omitempty"`
}

// GetArguments returns Grid_aggregate_bool_exp_bool_or.Arguments, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_or) GetArguments() Grid_select_column_grid_aggregate_bool_exp_bool_or_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Grid_aggregate_bool_exp_bool_or.Distinct, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_or) GetDistinct() bool { return v.Distinct }

// GetFilter returns Grid_aggregate_bool_exp_bool_or.Filter, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_or) GetFilter() *GridBoolExp { return v.Filter }

// GetPredicate returns Grid_aggregate_bool_exp_bool_or.Predicate, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_bool_or) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type Grid_aggregate_bool_exp_count struct {
	Arguments []GridSelectColumn `json:"arguments"`
	Distinct  bool               `json:"distinct"`
	Filter    *GridBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp  `json:"predicate,omitempty"`
}

// GetArguments returns Grid_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_count) GetArguments() []GridSelectColumn { return v.Arguments }

// GetDistinct returns Grid_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Grid_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_count) GetFilter() *GridBoolExp { return v.Filter }

// GetPredicate returns Grid_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Grid_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// select "grid_aggregate_bool_exp_bool_and_arguments_columns" columns of table "grid"
type Grid_select_column_grid_aggregate_bool_exp_bool_and_arguments_columns string

const (
	// column name
	Grid_select_column_grid_aggregate_bool_exp_bool_and_arguments_columnsHorizontalscroll Grid_select_column_grid_aggregate_bool_exp_bool_and_arguments_columns = "horizontalScroll"
)

// select "grid_aggregate_bool_exp_bool_or_arguments_columns" columns of table "grid"
type Grid_select_column_grid_aggregate_bool_exp_bool_or_arguments_columns string

const (
	// column name
	Grid_select_column_grid_aggregate_bool_exp_bool_or_arguments_columnsHorizontalscroll Grid_select_column_grid_aggregate_bool_exp_bool_or_arguments_columns = "horizontalScroll"
)

type Grid_showinfo_aggregate_bool_exp struct {
	Count *Grid_showinfo_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Grid_showinfo_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Grid_showinfo_aggregate_bool_exp) GetCount() *Grid_showinfo_aggregate_bool_exp_count {
	return v.Count
}

type Grid_showinfo_aggregate_bool_exp_count struct {
	Arguments []GridShowinfoSelectColumn `json:"arguments"`
	Distinct  bool                       `json:"distinct"`
	Filter    *GridShowinfoBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp          `json:"predicate,omitempty"`
}

// GetArguments returns Grid_showinfo_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Grid_showinfo_aggregate_bool_exp_count) GetArguments() []GridShowinfoSelectColumn {
	return v.Arguments
}

// GetDistinct returns Grid_showinfo_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Grid_showinfo_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Grid_showinfo_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Grid_showinfo_aggregate_bool_exp_count) GetFilter() *GridShowinfoBoolExp { return v.Filter }

// GetPredicate returns Grid_showinfo_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Grid_showinfo_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// input type for inserting array relation for remote table "group"
type GroupArrRelInsertInput struct {
	Data []*GroupInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *GroupOnConflict `json:"onConflict,omitempty"`
}

// GetData returns GroupArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *GroupArrRelInsertInput) GetData() []*GroupInsertInput { return v.Data }

// GetOnConflict returns GroupArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *GroupArrRelInsertInput) GetOnConflict() *GroupOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "group". All fields are combined with a logical 'AND'.
type GroupBoolExp struct {
	And                     []*GroupBoolExp                  `json:"_and,omitempty"`
	Not                     *GroupBoolExp                    `json:"_not,omitempty"`
	Or                      []*GroupBoolExp                  `json:"_or,omitempty"`
	CreatedAt               *TimestamptzComparisonExp        `json:"createdAt,omitempty"`
	DeletedAt               *TimestamptzComparisonExp        `json:"deletedAt,omitempty"`
	Description             *StringComparisonExp             `json:"description,omitempty"`
	Group                   *GroupBoolExp                    `json:"group,omitempty"`
	Group_studios           *GroupStudioBoolExp              `json:"group_studios,omitempty"`
	Group_studios_aggregate *Group_studio_aggregate_bool_exp `json:"group_studios_aggregate,omitempty"`
	Groups                  *GroupBoolExp                    `json:"groups,omitempty"`
	Groups_aggregate        *Group_aggregate_bool_exp        `json:"groups_aggregate,omitempty"`
	Id                      *UuidComparisonExp               `json:"id,omitempty"`
	Label                   *StringComparisonExp             `json:"label,omitempty"`
	Logo                    *StringComparisonExp             `json:"logo,omitempty"`
	Name                    *StringComparisonExp             `json:"name,omitempty"`
	Organization            *OrganizationBoolExp             `json:"organization,omitempty"`
	OrganizationId          *UuidComparisonExp               `json:"organizationId,omitempty"`
	ParentId                *UuidComparisonExp               `json:"parentId,omitempty"`
	UpdatedAt               *TimestamptzComparisonExp        `json:"updatedAt,omitempty"`
	User_groups             *UserGroupBoolExp                `json:"user_groups,omitempty"`
	User_groups_aggregate   *User_group_aggregate_bool_exp   `json:"user_groups_aggregate,omitempty"`
}

// GetAnd returns GroupBoolExp.And, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetAnd() []*GroupBoolExp { return v.And }

// GetNot returns GroupBoolExp.Not, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetNot() *GroupBoolExp { return v.Not }

// GetOr returns GroupBoolExp.Or, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetOr() []*GroupBoolExp { return v.Or }

// GetCreatedAt returns GroupBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns GroupBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns GroupBoolExp.Description, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetGroup returns GroupBoolExp.Group, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetGroup() *GroupBoolExp { return v.Group }

// GetGroup_studios returns GroupBoolExp.Group_studios, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetGroup_studios() *GroupStudioBoolExp { return v.Group_studios }

// GetGroup_studios_aggregate returns GroupBoolExp.Group_studios_aggregate, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetGroup_studios_aggregate() *Group_studio_aggregate_bool_exp {
	return v.Group_studios_aggregate
}

// GetGroups returns GroupBoolExp.Groups, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetGroups() *GroupBoolExp { return v.Groups }

// GetGroups_aggregate returns GroupBoolExp.Groups_aggregate, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetGroups_aggregate() *Group_aggregate_bool_exp { return v.Groups_aggregate }

// GetId returns GroupBoolExp.Id, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns GroupBoolExp.Label, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLogo returns GroupBoolExp.Logo, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetLogo() *StringComparisonExp { return v.Logo }

// GetName returns GroupBoolExp.Name, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetOrganization returns GroupBoolExp.Organization, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetOrganization() *OrganizationBoolExp { return v.Organization }

// GetOrganizationId returns GroupBoolExp.OrganizationId, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetOrganizationId() *UuidComparisonExp { return v.OrganizationId }

// GetParentId returns GroupBoolExp.ParentId, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetParentId() *UuidComparisonExp { return v.ParentId }

// GetUpdatedAt returns GroupBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUser_groups returns GroupBoolExp.User_groups, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetUser_groups() *UserGroupBoolExp { return v.User_groups }

// GetUser_groups_aggregate returns GroupBoolExp.User_groups_aggregate, and is useful for accessing the field via an interface.
func (v *GroupBoolExp) GetUser_groups_aggregate() *User_group_aggregate_bool_exp {
	return v.User_groups_aggregate
}

// unique or primary key constraints on table "group"
type GroupConstraint string

const (
	// unique or primary key constraint on columns "id"
	GroupConstraintGroupPkey GroupConstraint = "group_pkey"
)

// input type for inserting data into table "group"
type GroupInsertInput struct {
	// The date and time when the group was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the group was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the group.
	Description   string                        `json:"description"`
	Group         *GroupObjRelInsertInput       `json:"group,omitempty"`
	Group_studios *GroupStudioArrRelInsertInput `json:"group_studios,omitempty"`
	Groups        *GroupArrRelInsertInput       `json:"groups,omitempty"`
	// The unique identifier of the group.
	Id string `json:"id"`
	// The label of the group is used to override the name in the UI.
	Label string `json:"label"`
	// The logo image path of the group.
	Logo string `json:"logo"`
	// The name of the group.
	Name         string                         `json:"name"`
	Organization *OrganizationObjRelInsertInput `json:"organization,omitempty"`
	// The organization id of the group.
	OrganizationId string `json:"organizationId"`
	// The parent group of the group.
	ParentId string `json:"parentId"`
	// The date and time when the group was last updated.
	UpdatedAt   time.Time                   `json:"updatedAt"`
	User_groups *UserGroupArrRelInsertInput `json:"user_groups,omitempty"`
}

// GetCreatedAt returns GroupInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns GroupInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns GroupInsertInput.Description, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetDescription() string { return v.Description }

// GetGroup returns GroupInsertInput.Group, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetGroup() *GroupObjRelInsertInput { return v.Group }

// GetGroup_studios returns GroupInsertInput.Group_studios, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetGroup_studios() *GroupStudioArrRelInsertInput { return v.Group_studios }

// GetGroups returns GroupInsertInput.Groups, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetGroups() *GroupArrRelInsertInput { return v.Groups }

// GetId returns GroupInsertInput.Id, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetId() string { return v.Id }

// GetLabel returns GroupInsertInput.Label, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetLabel() string { return v.Label }

// GetLogo returns GroupInsertInput.Logo, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetLogo() string { return v.Logo }

// GetName returns GroupInsertInput.Name, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetName() string { return v.Name }

// GetOrganization returns GroupInsertInput.Organization, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetOrganization() *OrganizationObjRelInsertInput { return v.Organization }

// GetOrganizationId returns GroupInsertInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetOrganizationId() string { return v.OrganizationId }

// GetParentId returns GroupInsertInput.ParentId, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetParentId() string { return v.ParentId }

// GetUpdatedAt returns GroupInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUser_groups returns GroupInsertInput.User_groups, and is useful for accessing the field via an interface.
func (v *GroupInsertInput) GetUser_groups() *UserGroupArrRelInsertInput { return v.User_groups }

// input type for inserting object relation for remote table "group"
type GroupObjRelInsertInput struct {
	Data *GroupInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *GroupOnConflict `json:"onConflict,omitempty"`
}

// GetData returns GroupObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *GroupObjRelInsertInput) GetData() *GroupInsertInput { return v.Data }

// GetOnConflict returns GroupObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *GroupObjRelInsertInput) GetOnConflict() *GroupOnConflict { return v.OnConflict }

// on_conflict condition type for table "group"
type GroupOnConflict struct {
	Constraint     GroupConstraint     `json:"constraint"`
	Update_columns []GroupUpdateColumn `json:"update_columns"`
	Where          *GroupBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns GroupOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *GroupOnConflict) GetConstraint() GroupConstraint { return v.Constraint }

// GetUpdate_columns returns GroupOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *GroupOnConflict) GetUpdate_columns() []GroupUpdateColumn { return v.Update_columns }

// GetWhere returns GroupOnConflict.Where, and is useful for accessing the field via an interface.
func (v *GroupOnConflict) GetWhere() *GroupBoolExp { return v.Where }

// select columns of table "group"
type GroupSelectColumn string

const (
	// column name
	GroupSelectColumnCreatedat GroupSelectColumn = "createdAt"
	// column name
	GroupSelectColumnDeletedat GroupSelectColumn = "deletedAt"
	// column name
	GroupSelectColumnDescription GroupSelectColumn = "description"
	// column name
	GroupSelectColumnId GroupSelectColumn = "id"
	// column name
	GroupSelectColumnLabel GroupSelectColumn = "label"
	// column name
	GroupSelectColumnLogo GroupSelectColumn = "logo"
	// column name
	GroupSelectColumnName GroupSelectColumn = "name"
	// column name
	GroupSelectColumnOrganizationid GroupSelectColumn = "organizationId"
	// column name
	GroupSelectColumnParentid GroupSelectColumn = "parentId"
	// column name
	GroupSelectColumnUpdatedat GroupSelectColumn = "updatedAt"
)

// input type for inserting array relation for remote table "group_studio"
type GroupStudioArrRelInsertInput struct {
	Data []*GroupStudioInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *GroupStudioOnConflict `json:"onConflict,omitempty"`
}

// GetData returns GroupStudioArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *GroupStudioArrRelInsertInput) GetData() []*GroupStudioInsertInput { return v.Data }

// GetOnConflict returns GroupStudioArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *GroupStudioArrRelInsertInput) GetOnConflict() *GroupStudioOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "group_studio". All fields are combined with a logical 'AND'.
type GroupStudioBoolExp struct {
	And       []*GroupStudioBoolExp     `json:"_and,omitempty"`
	Not       *GroupStudioBoolExp       `json:"_not,omitempty"`
	Or        []*GroupStudioBoolExp     `json:"_or,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Group     *GroupBoolExp             `json:"group,omitempty"`
	GroupId   *UuidComparisonExp        `json:"groupId,omitempty"`
	Studio    *StudioBoolExp            `json:"studio,omitempty"`
	StudioId  *UuidComparisonExp        `json:"studioId,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns GroupStudioBoolExp.And, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetAnd() []*GroupStudioBoolExp { return v.And }

// GetNot returns GroupStudioBoolExp.Not, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetNot() *GroupStudioBoolExp { return v.Not }

// GetOr returns GroupStudioBoolExp.Or, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetOr() []*GroupStudioBoolExp { return v.Or }

// GetCreatedAt returns GroupStudioBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns GroupStudioBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetGroup returns GroupStudioBoolExp.Group, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetGroup() *GroupBoolExp { return v.Group }

// GetGroupId returns GroupStudioBoolExp.GroupId, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetGroupId() *UuidComparisonExp { return v.GroupId }

// GetStudio returns GroupStudioBoolExp.Studio, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetStudio() *StudioBoolExp { return v.Studio }

// GetStudioId returns GroupStudioBoolExp.StudioId, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetStudioId() *UuidComparisonExp { return v.StudioId }

// GetUpdatedAt returns GroupStudioBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupStudioBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "group_studio"
type GroupStudioConstraint string

const (
	// unique or primary key constraint on columns "group_id", "studio_id"
	GroupStudioConstraintGroupStudioPkey GroupStudioConstraint = "group_studio_pkey"
)

// input type for inserting data into table "group_studio"
type GroupStudioInsertInput struct {
	// The date and time when the group studio was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the group studio was deleted.
	DeletedAt time.Time               `json:"deletedAt"`
	Group     *GroupObjRelInsertInput `json:"group,omitempty"`
	// The group of the group studio.
	GroupId string                   `json:"groupId"`
	Studio  *StudioObjRelInsertInput `json:"studio,omitempty"`
	// The studio of the group studio.
	StudioId string `json:"studioId"`
	// The date and time when the group studio was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCreatedAt returns GroupStudioInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns GroupStudioInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetGroup returns GroupStudioInsertInput.Group, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetGroup() *GroupObjRelInsertInput { return v.Group }

// GetGroupId returns GroupStudioInsertInput.GroupId, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetGroupId() string { return v.GroupId }

// GetStudio returns GroupStudioInsertInput.Studio, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetStudio() *StudioObjRelInsertInput { return v.Studio }

// GetStudioId returns GroupStudioInsertInput.StudioId, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetStudioId() string { return v.StudioId }

// GetUpdatedAt returns GroupStudioInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupStudioInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// on_conflict condition type for table "group_studio"
type GroupStudioOnConflict struct {
	Constraint     GroupStudioConstraint     `json:"constraint"`
	Update_columns []GroupStudioUpdateColumn `json:"update_columns"`
	Where          *GroupStudioBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns GroupStudioOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *GroupStudioOnConflict) GetConstraint() GroupStudioConstraint { return v.Constraint }

// GetUpdate_columns returns GroupStudioOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *GroupStudioOnConflict) GetUpdate_columns() []GroupStudioUpdateColumn {
	return v.Update_columns
}

// GetWhere returns GroupStudioOnConflict.Where, and is useful for accessing the field via an interface.
func (v *GroupStudioOnConflict) GetWhere() *GroupStudioBoolExp { return v.Where }

// select columns of table "group_studio"
type GroupStudioSelectColumn string

const (
	// column name
	GroupStudioSelectColumnCreatedat GroupStudioSelectColumn = "createdAt"
	// column name
	GroupStudioSelectColumnDeletedat GroupStudioSelectColumn = "deletedAt"
	// column name
	GroupStudioSelectColumnGroupid GroupStudioSelectColumn = "groupId"
	// column name
	GroupStudioSelectColumnStudioid GroupStudioSelectColumn = "studioId"
	// column name
	GroupStudioSelectColumnUpdatedat GroupStudioSelectColumn = "updatedAt"
)

// update columns of table "group_studio"
type GroupStudioUpdateColumn string

const (
	// column name
	GroupStudioUpdateColumnCreatedat GroupStudioUpdateColumn = "createdAt"
	// column name
	GroupStudioUpdateColumnDeletedat GroupStudioUpdateColumn = "deletedAt"
	// column name
	GroupStudioUpdateColumnGroupid GroupStudioUpdateColumn = "groupId"
	// column name
	GroupStudioUpdateColumnStudioid GroupStudioUpdateColumn = "studioId"
	// column name
	GroupStudioUpdateColumnUpdatedat GroupStudioUpdateColumn = "updatedAt"
)

// update columns of table "group"
type GroupUpdateColumn string

const (
	// column name
	GroupUpdateColumnCreatedat GroupUpdateColumn = "createdAt"
	// column name
	GroupUpdateColumnDeletedat GroupUpdateColumn = "deletedAt"
	// column name
	GroupUpdateColumnDescription GroupUpdateColumn = "description"
	// column name
	GroupUpdateColumnId GroupUpdateColumn = "id"
	// column name
	GroupUpdateColumnLabel GroupUpdateColumn = "label"
	// column name
	GroupUpdateColumnLogo GroupUpdateColumn = "logo"
	// column name
	GroupUpdateColumnName GroupUpdateColumn = "name"
	// column name
	GroupUpdateColumnOrganizationid GroupUpdateColumn = "organizationId"
	// column name
	GroupUpdateColumnParentid GroupUpdateColumn = "parentId"
	// column name
	GroupUpdateColumnUpdatedat GroupUpdateColumn = "updatedAt"
)

type Group_aggregate_bool_exp struct {
	Count *Group_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Group_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Group_aggregate_bool_exp) GetCount() *Group_aggregate_bool_exp_count { return v.Count }

type Group_aggregate_bool_exp_count struct {
	Arguments []GroupSelectColumn `json:"arguments"`
	Distinct  bool                `json:"distinct"`
	Filter    *GroupBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp   `json:"predicate,omitempty"`
}

// GetArguments returns Group_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Group_aggregate_bool_exp_count) GetArguments() []GroupSelectColumn { return v.Arguments }

// GetDistinct returns Group_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Group_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Group_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Group_aggregate_bool_exp_count) GetFilter() *GroupBoolExp { return v.Filter }

// GetPredicate returns Group_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Group_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

type Group_studio_aggregate_bool_exp struct {
	Count *Group_studio_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Group_studio_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Group_studio_aggregate_bool_exp) GetCount() *Group_studio_aggregate_bool_exp_count {
	return v.Count
}

type Group_studio_aggregate_bool_exp_count struct {
	Arguments []GroupStudioSelectColumn `json:"arguments"`
	Distinct  bool                      `json:"distinct"`
	Filter    *GroupStudioBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp         `json:"predicate,omitempty"`
}

// GetArguments returns Group_studio_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Group_studio_aggregate_bool_exp_count) GetArguments() []GroupStudioSelectColumn {
	return v.Arguments
}

// GetDistinct returns Group_studio_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Group_studio_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Group_studio_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Group_studio_aggregate_bool_exp_count) GetFilter() *GroupStudioBoolExp { return v.Filter }

// GetPredicate returns Group_studio_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Group_studio_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// InsertOrganizationInsertOrganizationOrganizationMutationResponse includes the requested fields of the GraphQL type OrganizationMutationResponse.
// The GraphQL type's documentation follows.
//
// response of any mutation on the table "organization"
type InsertOrganizationInsertOrganizationOrganizationMutationResponse struct {
	// number of rows affected by the mutation
	Affected_rows int `json:"affected_rows"`
}

// GetAffected_rows returns InsertOrganizationInsertOrganizationOrganizationMutationResponse.Affected_rows, and is useful for accessing the field via an interface.
func (v *InsertOrganizationInsertOrganizationOrganizationMutationResponse) GetAffected_rows() int {
	return v.Affected_rows
}

// InsertOrganizationOneInsertOrganizationOneOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// Organizations are used as a container for users and groups.
type InsertOrganizationOneInsertOrganizationOneOrganization struct {
	// The unique identifier of the organization.
	Id string `json:"id"`
}

// GetId returns InsertOrganizationOneInsertOrganizationOneOrganization.Id, and is useful for accessing the field via an interface.
func (v *InsertOrganizationOneInsertOrganizationOneOrganization) GetId() string { return v.Id }

// InsertOrganizationOneResponse is returned by InsertOrganizationOne on success.
type InsertOrganizationOneResponse struct {
	// insert a single row into the table: "organization"
	InsertOrganizationOne *InsertOrganizationOneInsertOrganizationOneOrganization `json:"insertOrganizationOne"`
}

// GetInsertOrganizationOne returns InsertOrganizationOneResponse.InsertOrganizationOne, and is useful for accessing the field via an interface.
func (v *InsertOrganizationOneResponse) GetInsertOrganizationOne() *InsertOrganizationOneInsertOrganizationOneOrganization {
	return v.InsertOrganizationOne
}

// InsertOrganizationResponse is returned by InsertOrganization on success.
type InsertOrganizationResponse struct {
	// insert data into the table: "organization"
	InsertOrganization *InsertOrganizationInsertOrganizationOrganizationMutationResponse `json:"insertOrganization"`
}

// GetInsertOrganization returns InsertOrganizationResponse.InsertOrganization, and is useful for accessing the field via an interface.
func (v *InsertOrganizationResponse) GetInsertOrganization() *InsertOrganizationInsertOrganizationOrganizationMutationResponse {
	return v.InsertOrganization
}

// InsertUserOneInsertUserOneUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Users are the main entity of the application.
type InsertUserOneInsertUserOneUser struct {
	// The unique identifier of the user.
	Id string `json:"id"`
	// The organization of the user.
	OrganizationId string `json:"organizationId"`
}

// GetId returns InsertUserOneInsertUserOneUser.Id, and is useful for accessing the field via an interface.
func (v *InsertUserOneInsertUserOneUser) GetId() string { return v.Id }

// GetOrganizationId returns InsertUserOneInsertUserOneUser.OrganizationId, and is useful for accessing the field via an interface.
func (v *InsertUserOneInsertUserOneUser) GetOrganizationId() string { return v.OrganizationId }

// InsertUserOneResponse is returned by InsertUserOne on success.
type InsertUserOneResponse struct {
	// insert a single row into the table: "user"
	InsertUserOne *InsertUserOneInsertUserOneUser `json:"insertUserOne"`
}

// GetInsertUserOne returns InsertUserOneResponse.InsertUserOne, and is useful for accessing the field via an interface.
func (v *InsertUserOneResponse) GetInsertUserOne() *InsertUserOneInsertUserOneUser {
	return v.InsertUserOne
}

// Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
type IntComparisonExp struct {
	Eq     int   `json:"_eq"`
	Gt     int   `json:"_gt"`
	Gte    int   `json:"_gte"`
	In     []int `json:"_in"`
	IsNull bool  `json:"_isNull"`
	Lt     int   `json:"_lt"`
	Lte    int   `json:"_lte"`
	Neq    int   `json:"_neq"`
	Nin    []int `json:"_nin"`
}

// GetEq returns IntComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetEq() int { return v.Eq }

// GetGt returns IntComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetGt() int { return v.Gt }

// GetGte returns IntComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetGte() int { return v.Gte }

// GetIn returns IntComparisonExp.In, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetIn() []int { return v.In }

// GetIsNull returns IntComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLt returns IntComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetLt() int { return v.Lt }

// GetLte returns IntComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetLte() int { return v.Lte }

// GetNeq returns IntComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetNeq() int { return v.Neq }

// GetNin returns IntComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetNin() []int { return v.Nin }

type JsonbCastExp struct {
	String *StringComparisonExp `json:"String,omitempty"`
}

// GetString returns JsonbCastExp.String, and is useful for accessing the field via an interface.
func (v *JsonbCastExp) GetString() *StringComparisonExp { return v.String }

// Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
type JsonbComparisonExp struct {
	Cast *JsonbCastExp `json:"_cast,omitempty"`
	// is the column contained in the given json value
	ContainedIn interface{} `json:"_containedIn"`
	// does the column contain the given json value at the top level
	Contains interface{} `json:"_contains"`
	Eq       interface{} `json:"_eq"`
	Gt       interface{} `json:"_gt"`
	Gte      interface{} `json:"_gte"`
	// does the string exist as a top-level key in the column
	HasKey string `json:"_hasKey"`
	// do all of these strings exist as top-level keys in the column
	HasKeysAll []string `json:"_hasKeysAll"`
	// do any of these strings exist as top-level keys in the column
	HasKeysAny []string      `json:"_hasKeysAny"`
	In         []interface{} `json:"_in"`
	IsNull     bool          `json:"_isNull"`
	Lt         interface{}   `json:"_lt"`
	Lte        interface{}   `json:"_lte"`
	Neq        interface{}   `json:"_neq"`
	Nin        []interface{} `json:"_nin"`
}

// GetCast returns JsonbComparisonExp.Cast, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetCast() *JsonbCastExp { return v.Cast }

// GetContainedIn returns JsonbComparisonExp.ContainedIn, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetContainedIn() interface{} { return v.ContainedIn }

// GetContains returns JsonbComparisonExp.Contains, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetContains() interface{} { return v.Contains }

// GetEq returns JsonbComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetEq() interface{} { return v.Eq }

// GetGt returns JsonbComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetGt() interface{} { return v.Gt }

// GetGte returns JsonbComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetGte() interface{} { return v.Gte }

// GetHasKey returns JsonbComparisonExp.HasKey, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetHasKey() string { return v.HasKey }

// GetHasKeysAll returns JsonbComparisonExp.HasKeysAll, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetHasKeysAll() []string { return v.HasKeysAll }

// GetHasKeysAny returns JsonbComparisonExp.HasKeysAny, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetHasKeysAny() []string { return v.HasKeysAny }

// GetIn returns JsonbComparisonExp.In, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetIn() []interface{} { return v.In }

// GetIsNull returns JsonbComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLt returns JsonbComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetLt() interface{} { return v.Lt }

// GetLte returns JsonbComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetLte() interface{} { return v.Lte }

// GetNeq returns JsonbComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetNeq() interface{} { return v.Neq }

// GetNin returns JsonbComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *JsonbComparisonExp) GetNin() []interface{} { return v.Nin }

// input type for inserting array relation for remote table "line"
type LineArrRelInsertInput struct {
	Data []*LineInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *LineOnConflict `json:"onConflict,omitempty"`
}

// GetData returns LineArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *LineArrRelInsertInput) GetData() []*LineInsertInput { return v.Data }

// GetOnConflict returns LineArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *LineArrRelInsertInput) GetOnConflict() *LineOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "line". All fields are combined with a logical 'AND'.
type LineBoolExp struct {
	And                     []*LineBoolExp                  `json:"_and,omitempty"`
	Not                     *LineBoolExp                    `json:"_not,omitempty"`
	Or                      []*LineBoolExp                  `json:"_or,omitempty"`
	Calendar                *CalendarBoolExp                `json:"calendar,omitempty"`
	CardsByLineId           *CardBoolExp                    `json:"cardsByLineId,omitempty"`
	CardsByLineId_aggregate *Card_aggregate_bool_exp        `json:"cardsByLineId_aggregate,omitempty"`
	Codec                   *CodecBoolExp                   `json:"codec,omitempty"`
	CreatedAt               *TimestamptzComparisonExp       `json:"createdAt,omitempty"`
	DeletedAt               *TimestamptzComparisonExp       `json:"deletedAt,omitempty"`
	Description             *StringComparisonExp            `json:"description,omitempty"`
	Events                  *EventBoolExp                   `json:"events,omitempty"`
	Events_aggregate        *Event_aggregate_bool_exp       `json:"events_aggregate,omitempty"`
	Id                      *UuidComparisonExp              `json:"id,omitempty"`
	Label                   *StringComparisonExp            `json:"label,omitempty"`
	Line_studios            *LineStudioBoolExp              `json:"line_studios,omitempty"`
	Line_studios_aggregate  *Line_studio_aggregate_bool_exp `json:"line_studios_aggregate,omitempty"`
	Line_type               *LineTypeBoolExp                `json:"line_type,omitempty"`
	Name                    *StringComparisonExp            `json:"name,omitempty"`
	Organization            *OrganizationBoolExp            `json:"organization,omitempty"`
	OrganizationId          *UuidComparisonExp              `json:"organizationId,omitempty"`
	Sip                     *SipBoolExp                     `json:"sip,omitempty"`
	Status                  *StringComparisonExp            `json:"status,omitempty"`
	Type                    *LineTypeEnumComparisonExp      `json:"type,omitempty"`
	UpdatedAt               *TimestamptzComparisonExp       `json:"updatedAt,omitempty"`
	Webrtc                  *WebrtcBoolExp                  `json:"webrtc,omitempty"`
}

// GetAnd returns LineBoolExp.And, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetAnd() []*LineBoolExp { return v.And }

// GetNot returns LineBoolExp.Not, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetNot() *LineBoolExp { return v.Not }

// GetOr returns LineBoolExp.Or, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetOr() []*LineBoolExp { return v.Or }

// GetCalendar returns LineBoolExp.Calendar, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetCalendar() *CalendarBoolExp { return v.Calendar }

// GetCardsByLineId returns LineBoolExp.CardsByLineId, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetCardsByLineId() *CardBoolExp { return v.CardsByLineId }

// GetCardsByLineId_aggregate returns LineBoolExp.CardsByLineId_aggregate, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetCardsByLineId_aggregate() *Card_aggregate_bool_exp {
	return v.CardsByLineId_aggregate
}

// GetCodec returns LineBoolExp.Codec, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetCodec() *CodecBoolExp { return v.Codec }

// GetCreatedAt returns LineBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns LineBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns LineBoolExp.Description, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetEvents returns LineBoolExp.Events, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetEvents() *EventBoolExp { return v.Events }

// GetEvents_aggregate returns LineBoolExp.Events_aggregate, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetEvents_aggregate() *Event_aggregate_bool_exp { return v.Events_aggregate }

// GetId returns LineBoolExp.Id, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns LineBoolExp.Label, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLine_studios returns LineBoolExp.Line_studios, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetLine_studios() *LineStudioBoolExp { return v.Line_studios }

// GetLine_studios_aggregate returns LineBoolExp.Line_studios_aggregate, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetLine_studios_aggregate() *Line_studio_aggregate_bool_exp {
	return v.Line_studios_aggregate
}

// GetLine_type returns LineBoolExp.Line_type, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetLine_type() *LineTypeBoolExp { return v.Line_type }

// GetName returns LineBoolExp.Name, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetOrganization returns LineBoolExp.Organization, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetOrganization() *OrganizationBoolExp { return v.Organization }

// GetOrganizationId returns LineBoolExp.OrganizationId, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetOrganizationId() *UuidComparisonExp { return v.OrganizationId }

// GetSip returns LineBoolExp.Sip, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetSip() *SipBoolExp { return v.Sip }

// GetStatus returns LineBoolExp.Status, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetStatus() *StringComparisonExp { return v.Status }

// GetType returns LineBoolExp.Type, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetType() *LineTypeEnumComparisonExp { return v.Type }

// GetUpdatedAt returns LineBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetWebrtc returns LineBoolExp.Webrtc, and is useful for accessing the field via an interface.
func (v *LineBoolExp) GetWebrtc() *WebrtcBoolExp { return v.Webrtc }

// unique or primary key constraints on table "line"
type LineConstraint string

const (
	// unique or primary key constraint on columns "id"
	LineConstraintLinePkey LineConstraint = "line_pkey"
)

// input type for inserting data into table "line"
type LineInsertInput struct {
	Calendar      *CalendarObjRelInsertInput `json:"calendar,omitempty"`
	CardsByLineId *CardArrRelInsertInput     `json:"cardsByLineId,omitempty"`
	Codec         *CodecObjRelInsertInput    `json:"codec,omitempty"`
	// The date and time when the line was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the line was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the line.
	Description string                  `json:"description"`
	Events      *EventArrRelInsertInput `json:"events,omitempty"`
	// The unique identifier of the line.
	Id string `json:"id"`
	// The label of the line is used to override the name in the UI.
	Label        string                       `json:"label"`
	Line_studios *LineStudioArrRelInsertInput `json:"line_studios,omitempty"`
	Line_type    *LineTypeObjRelInsertInput   `json:"line_type,omitempty"`
	// The name of the line.
	Name           string                         `json:"name"`
	Organization   *OrganizationObjRelInsertInput `json:"organization,omitempty"`
	OrganizationId string                         `json:"organizationId"`
	Sip            *SipObjRelInsertInput          `json:"sip,omitempty"`
	// The status of the line.
	Status string `json:"status"`
	// The type of the line.
	Type LineTypeEnum `json:"type"`
	// The date and time when the line was last updated.
	UpdatedAt time.Time                `json:"updatedAt"`
	Webrtc    *WebrtcObjRelInsertInput `json:"webrtc,omitempty"`
}

// GetCalendar returns LineInsertInput.Calendar, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetCalendar() *CalendarObjRelInsertInput { return v.Calendar }

// GetCardsByLineId returns LineInsertInput.CardsByLineId, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetCardsByLineId() *CardArrRelInsertInput { return v.CardsByLineId }

// GetCodec returns LineInsertInput.Codec, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetCodec() *CodecObjRelInsertInput { return v.Codec }

// GetCreatedAt returns LineInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns LineInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns LineInsertInput.Description, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetDescription() string { return v.Description }

// GetEvents returns LineInsertInput.Events, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetEvents() *EventArrRelInsertInput { return v.Events }

// GetId returns LineInsertInput.Id, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetId() string { return v.Id }

// GetLabel returns LineInsertInput.Label, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetLabel() string { return v.Label }

// GetLine_studios returns LineInsertInput.Line_studios, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetLine_studios() *LineStudioArrRelInsertInput { return v.Line_studios }

// GetLine_type returns LineInsertInput.Line_type, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetLine_type() *LineTypeObjRelInsertInput { return v.Line_type }

// GetName returns LineInsertInput.Name, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetName() string { return v.Name }

// GetOrganization returns LineInsertInput.Organization, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetOrganization() *OrganizationObjRelInsertInput { return v.Organization }

// GetOrganizationId returns LineInsertInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetOrganizationId() string { return v.OrganizationId }

// GetSip returns LineInsertInput.Sip, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetSip() *SipObjRelInsertInput { return v.Sip }

// GetStatus returns LineInsertInput.Status, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetStatus() string { return v.Status }

// GetType returns LineInsertInput.Type, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetType() LineTypeEnum { return v.Type }

// GetUpdatedAt returns LineInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetWebrtc returns LineInsertInput.Webrtc, and is useful for accessing the field via an interface.
func (v *LineInsertInput) GetWebrtc() *WebrtcObjRelInsertInput { return v.Webrtc }

// input type for inserting object relation for remote table "line"
type LineObjRelInsertInput struct {
	Data *LineInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *LineOnConflict `json:"onConflict,omitempty"`
}

// GetData returns LineObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *LineObjRelInsertInput) GetData() *LineInsertInput { return v.Data }

// GetOnConflict returns LineObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *LineObjRelInsertInput) GetOnConflict() *LineOnConflict { return v.OnConflict }

// on_conflict condition type for table "line"
type LineOnConflict struct {
	Constraint     LineConstraint     `json:"constraint"`
	Update_columns []LineUpdateColumn `json:"update_columns"`
	Where          *LineBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns LineOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *LineOnConflict) GetConstraint() LineConstraint { return v.Constraint }

// GetUpdate_columns returns LineOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *LineOnConflict) GetUpdate_columns() []LineUpdateColumn { return v.Update_columns }

// GetWhere returns LineOnConflict.Where, and is useful for accessing the field via an interface.
func (v *LineOnConflict) GetWhere() *LineBoolExp { return v.Where }

// select columns of table "line"
type LineSelectColumn string

const (
	// column name
	LineSelectColumnCreatedat LineSelectColumn = "createdAt"
	// column name
	LineSelectColumnDeletedat LineSelectColumn = "deletedAt"
	// column name
	LineSelectColumnDescription LineSelectColumn = "description"
	// column name
	LineSelectColumnId LineSelectColumn = "id"
	// column name
	LineSelectColumnLabel LineSelectColumn = "label"
	// column name
	LineSelectColumnName LineSelectColumn = "name"
	// column name
	LineSelectColumnOrganizationid LineSelectColumn = "organizationId"
	// column name
	LineSelectColumnStatus LineSelectColumn = "status"
	// column name
	LineSelectColumnType LineSelectColumn = "type"
	// column name
	LineSelectColumnUpdatedat LineSelectColumn = "updatedAt"
)

// input type for inserting array relation for remote table "line_studio"
type LineStudioArrRelInsertInput struct {
	Data []*LineStudioInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *LineStudioOnConflict `json:"onConflict,omitempty"`
}

// GetData returns LineStudioArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *LineStudioArrRelInsertInput) GetData() []*LineStudioInsertInput { return v.Data }

// GetOnConflict returns LineStudioArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *LineStudioArrRelInsertInput) GetOnConflict() *LineStudioOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "line_studio". All fields are combined with a logical 'AND'.
type LineStudioBoolExp struct {
	And       []*LineStudioBoolExp      `json:"_and,omitempty"`
	Not       *LineStudioBoolExp        `json:"_not,omitempty"`
	Or        []*LineStudioBoolExp      `json:"_or,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Line      *LineBoolExp              `json:"line,omitempty"`
	LineId    *UuidComparisonExp        `json:"lineId,omitempty"`
	Studio    *StudioBoolExp            `json:"studio,omitempty"`
	StudioId  *UuidComparisonExp        `json:"studioId,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
}

// GetAnd returns LineStudioBoolExp.And, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetAnd() []*LineStudioBoolExp { return v.And }

// GetNot returns LineStudioBoolExp.Not, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetNot() *LineStudioBoolExp { return v.Not }

// GetOr returns LineStudioBoolExp.Or, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetOr() []*LineStudioBoolExp { return v.Or }

// GetCreatedAt returns LineStudioBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns LineStudioBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetLine returns LineStudioBoolExp.Line, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetLineId returns LineStudioBoolExp.LineId, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetLineId() *UuidComparisonExp { return v.LineId }

// GetStudio returns LineStudioBoolExp.Studio, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetStudio() *StudioBoolExp { return v.Studio }

// GetStudioId returns LineStudioBoolExp.StudioId, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetStudioId() *UuidComparisonExp { return v.StudioId }

// GetUpdatedAt returns LineStudioBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *LineStudioBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "line_studio"
type LineStudioConstraint string

const (
	// unique or primary key constraint on columns "line_id", "studio_id"
	LineStudioConstraintLineStudioPkey LineStudioConstraint = "line_studio_pkey"
)

// input type for inserting data into table "line_studio"
type LineStudioInsertInput struct {
	// The date and time when the line_studio was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the line_studio was deleted.
	DeletedAt time.Time              `json:"deletedAt"`
	Line      *LineObjRelInsertInput `json:"line,omitempty"`
	// The line this line_studio is linked to.
	LineId string                   `json:"lineId"`
	Studio *StudioObjRelInsertInput `json:"studio,omitempty"`
	// The studio this line_studio is linked to.
	StudioId string `json:"studioId"`
	// The date and time when the line_studio was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCreatedAt returns LineStudioInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns LineStudioInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetLine returns LineStudioInsertInput.Line, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetLineId returns LineStudioInsertInput.LineId, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetLineId() string { return v.LineId }

// GetStudio returns LineStudioInsertInput.Studio, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetStudio() *StudioObjRelInsertInput { return v.Studio }

// GetStudioId returns LineStudioInsertInput.StudioId, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetStudioId() string { return v.StudioId }

// GetUpdatedAt returns LineStudioInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *LineStudioInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// on_conflict condition type for table "line_studio"
type LineStudioOnConflict struct {
	Constraint     LineStudioConstraint     `json:"constraint"`
	Update_columns []LineStudioUpdateColumn `json:"update_columns"`
	Where          *LineStudioBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns LineStudioOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *LineStudioOnConflict) GetConstraint() LineStudioConstraint { return v.Constraint }

// GetUpdate_columns returns LineStudioOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *LineStudioOnConflict) GetUpdate_columns() []LineStudioUpdateColumn { return v.Update_columns }

// GetWhere returns LineStudioOnConflict.Where, and is useful for accessing the field via an interface.
func (v *LineStudioOnConflict) GetWhere() *LineStudioBoolExp { return v.Where }

// select columns of table "line_studio"
type LineStudioSelectColumn string

const (
	// column name
	LineStudioSelectColumnCreatedat LineStudioSelectColumn = "createdAt"
	// column name
	LineStudioSelectColumnDeletedat LineStudioSelectColumn = "deletedAt"
	// column name
	LineStudioSelectColumnLineid LineStudioSelectColumn = "lineId"
	// column name
	LineStudioSelectColumnStudioid LineStudioSelectColumn = "studioId"
	// column name
	LineStudioSelectColumnUpdatedat LineStudioSelectColumn = "updatedAt"
)

// update columns of table "line_studio"
type LineStudioUpdateColumn string

const (
	// column name
	LineStudioUpdateColumnCreatedat LineStudioUpdateColumn = "createdAt"
	// column name
	LineStudioUpdateColumnDeletedat LineStudioUpdateColumn = "deletedAt"
	// column name
	LineStudioUpdateColumnLineid LineStudioUpdateColumn = "lineId"
	// column name
	LineStudioUpdateColumnStudioid LineStudioUpdateColumn = "studioId"
	// column name
	LineStudioUpdateColumnUpdatedat LineStudioUpdateColumn = "updatedAt"
)

// Boolean expression to filter rows from the table "line_type". All fields are combined with a logical 'AND'.
type LineTypeBoolExp struct {
	And             []*LineTypeBoolExp       `json:"_and,omitempty"`
	Not             *LineTypeBoolExp         `json:"_not,omitempty"`
	Or              []*LineTypeBoolExp       `json:"_or,omitempty"`
	Comment         *StringComparisonExp     `json:"comment,omitempty"`
	Lines           *LineBoolExp             `json:"lines,omitempty"`
	Lines_aggregate *Line_aggregate_bool_exp `json:"lines_aggregate,omitempty"`
	Value           *StringComparisonExp     `json:"value,omitempty"`
}

// GetAnd returns LineTypeBoolExp.And, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetAnd() []*LineTypeBoolExp { return v.And }

// GetNot returns LineTypeBoolExp.Not, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetNot() *LineTypeBoolExp { return v.Not }

// GetOr returns LineTypeBoolExp.Or, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetOr() []*LineTypeBoolExp { return v.Or }

// GetComment returns LineTypeBoolExp.Comment, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetComment() *StringComparisonExp { return v.Comment }

// GetLines returns LineTypeBoolExp.Lines, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetLines() *LineBoolExp { return v.Lines }

// GetLines_aggregate returns LineTypeBoolExp.Lines_aggregate, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetLines_aggregate() *Line_aggregate_bool_exp { return v.Lines_aggregate }

// GetValue returns LineTypeBoolExp.Value, and is useful for accessing the field via an interface.
func (v *LineTypeBoolExp) GetValue() *StringComparisonExp { return v.Value }

// unique or primary key constraints on table "line_type"
type LineTypeConstraint string

const (
	// unique or primary key constraint on columns "value"
	LineTypeConstraintLineTypePkey LineTypeConstraint = "line_type_pkey"
)

type LineTypeEnum string

const (
	// Hardware codec line
	LineTypeEnumCodec LineTypeEnum = "CODEC"
	// SIP line
	LineTypeEnumSip LineTypeEnum = "SIP"
	// WebRTC line
	LineTypeEnumWebrtc LineTypeEnum = "WEBRTC"
)

// Boolean expression to compare columns of type "LineTypeEnum". All fields are combined with logical 'AND'.
type LineTypeEnumComparisonExp struct {
	Eq     LineTypeEnum   `json:"_eq"`
	In     []LineTypeEnum `json:"_in"`
	IsNull bool           `json:"_isNull"`
	Neq    LineTypeEnum   `json:"_neq"`
	Nin    []LineTypeEnum `json:"_nin"`
}

// GetEq returns LineTypeEnumComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *LineTypeEnumComparisonExp) GetEq() LineTypeEnum { return v.Eq }

// GetIn returns LineTypeEnumComparisonExp.In, and is useful for accessing the field via an interface.
func (v *LineTypeEnumComparisonExp) GetIn() []LineTypeEnum { return v.In }

// GetIsNull returns LineTypeEnumComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *LineTypeEnumComparisonExp) GetIsNull() bool { return v.IsNull }

// GetNeq returns LineTypeEnumComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *LineTypeEnumComparisonExp) GetNeq() LineTypeEnum { return v.Neq }

// GetNin returns LineTypeEnumComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *LineTypeEnumComparisonExp) GetNin() []LineTypeEnum { return v.Nin }

// input type for inserting data into table "line_type"
type LineTypeInsertInput struct {
	// The comment of the line type.
	Comment string                 `json:"comment"`
	Lines   *LineArrRelInsertInput `json:"lines,omitempty"`
	// The value of the line type.
	Value string `json:"value"`
}

// GetComment returns LineTypeInsertInput.Comment, and is useful for accessing the field via an interface.
func (v *LineTypeInsertInput) GetComment() string { return v.Comment }

// GetLines returns LineTypeInsertInput.Lines, and is useful for accessing the field via an interface.
func (v *LineTypeInsertInput) GetLines() *LineArrRelInsertInput { return v.Lines }

// GetValue returns LineTypeInsertInput.Value, and is useful for accessing the field via an interface.
func (v *LineTypeInsertInput) GetValue() string { return v.Value }

// input type for inserting object relation for remote table "line_type"
type LineTypeObjRelInsertInput struct {
	Data *LineTypeInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *LineTypeOnConflict `json:"onConflict,omitempty"`
}

// GetData returns LineTypeObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *LineTypeObjRelInsertInput) GetData() *LineTypeInsertInput { return v.Data }

// GetOnConflict returns LineTypeObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *LineTypeObjRelInsertInput) GetOnConflict() *LineTypeOnConflict { return v.OnConflict }

// on_conflict condition type for table "line_type"
type LineTypeOnConflict struct {
	Constraint     LineTypeConstraint     `json:"constraint"`
	Update_columns []LineTypeUpdateColumn `json:"update_columns"`
	Where          *LineTypeBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns LineTypeOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *LineTypeOnConflict) GetConstraint() LineTypeConstraint { return v.Constraint }

// GetUpdate_columns returns LineTypeOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *LineTypeOnConflict) GetUpdate_columns() []LineTypeUpdateColumn { return v.Update_columns }

// GetWhere returns LineTypeOnConflict.Where, and is useful for accessing the field via an interface.
func (v *LineTypeOnConflict) GetWhere() *LineTypeBoolExp { return v.Where }

// update columns of table "line_type"
type LineTypeUpdateColumn string

const (
	// column name
	LineTypeUpdateColumnComment LineTypeUpdateColumn = "comment"
	// column name
	LineTypeUpdateColumnValue LineTypeUpdateColumn = "value"
)

// update columns of table "line"
type LineUpdateColumn string

const (
	// column name
	LineUpdateColumnCreatedat LineUpdateColumn = "createdAt"
	// column name
	LineUpdateColumnDeletedat LineUpdateColumn = "deletedAt"
	// column name
	LineUpdateColumnDescription LineUpdateColumn = "description"
	// column name
	LineUpdateColumnId LineUpdateColumn = "id"
	// column name
	LineUpdateColumnLabel LineUpdateColumn = "label"
	// column name
	LineUpdateColumnName LineUpdateColumn = "name"
	// column name
	LineUpdateColumnOrganizationid LineUpdateColumn = "organizationId"
	// column name
	LineUpdateColumnStatus LineUpdateColumn = "status"
	// column name
	LineUpdateColumnType LineUpdateColumn = "type"
	// column name
	LineUpdateColumnUpdatedat LineUpdateColumn = "updatedAt"
)

type Line_aggregate_bool_exp struct {
	Count *Line_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Line_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Line_aggregate_bool_exp) GetCount() *Line_aggregate_bool_exp_count { return v.Count }

type Line_aggregate_bool_exp_count struct {
	Arguments []LineSelectColumn `json:"arguments"`
	Distinct  bool               `json:"distinct"`
	Filter    *LineBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp  `json:"predicate,omitempty"`
}

// GetArguments returns Line_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Line_aggregate_bool_exp_count) GetArguments() []LineSelectColumn { return v.Arguments }

// GetDistinct returns Line_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Line_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Line_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Line_aggregate_bool_exp_count) GetFilter() *LineBoolExp { return v.Filter }

// GetPredicate returns Line_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Line_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

type Line_studio_aggregate_bool_exp struct {
	Count *Line_studio_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Line_studio_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Line_studio_aggregate_bool_exp) GetCount() *Line_studio_aggregate_bool_exp_count {
	return v.Count
}

type Line_studio_aggregate_bool_exp_count struct {
	Arguments []LineStudioSelectColumn `json:"arguments"`
	Distinct  bool                     `json:"distinct"`
	Filter    *LineStudioBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp        `json:"predicate,omitempty"`
}

// GetArguments returns Line_studio_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Line_studio_aggregate_bool_exp_count) GetArguments() []LineStudioSelectColumn {
	return v.Arguments
}

// GetDistinct returns Line_studio_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Line_studio_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Line_studio_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Line_studio_aggregate_bool_exp_count) GetFilter() *LineStudioBoolExp { return v.Filter }

// GetPredicate returns Line_studio_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Line_studio_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
type OrganizationBoolExp struct {
	And               []*OrganizationBoolExp     `json:"_and,omitempty"`
	Not               *OrganizationBoolExp       `json:"_not,omitempty"`
	Or                []*OrganizationBoolExp     `json:"_or,omitempty"`
	CreatedAt         *TimestamptzComparisonExp  `json:"createdAt,omitempty"`
	DeletedAt         *TimestamptzComparisonExp  `json:"deletedAt,omitempty"`
	Description       *StringComparisonExp       `json:"description,omitempty"`
	Groups            *GroupBoolExp              `json:"groups,omitempty"`
	Groups_aggregate  *Group_aggregate_bool_exp  `json:"groups_aggregate,omitempty"`
	Id                *UuidComparisonExp         `json:"id,omitempty"`
	Label             *StringComparisonExp       `json:"label,omitempty"`
	Lines             *LineBoolExp               `json:"lines,omitempty"`
	Lines_aggregate   *Line_aggregate_bool_exp   `json:"lines_aggregate,omitempty"`
	Logo              *StringComparisonExp       `json:"logo,omitempty"`
	Name              *StringComparisonExp       `json:"name,omitempty"`
	Studios           *StudioBoolExp             `json:"studios,omitempty"`
	Studios_aggregate *Studio_aggregate_bool_exp `json:"studios_aggregate,omitempty"`
	UpdatedAt         *TimestamptzComparisonExp  `json:"updatedAt,omitempty"`
	Users             *UserBoolExp               `json:"users,omitempty"`
	Users_aggregate   *User_aggregate_bool_exp   `json:"users_aggregate,omitempty"`
}

// GetAnd returns OrganizationBoolExp.And, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetAnd() []*OrganizationBoolExp { return v.And }

// GetNot returns OrganizationBoolExp.Not, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetNot() *OrganizationBoolExp { return v.Not }

// GetOr returns OrganizationBoolExp.Or, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetOr() []*OrganizationBoolExp { return v.Or }

// GetCreatedAt returns OrganizationBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns OrganizationBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns OrganizationBoolExp.Description, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetGroups returns OrganizationBoolExp.Groups, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetGroups() *GroupBoolExp { return v.Groups }

// GetGroups_aggregate returns OrganizationBoolExp.Groups_aggregate, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetGroups_aggregate() *Group_aggregate_bool_exp {
	return v.Groups_aggregate
}

// GetId returns OrganizationBoolExp.Id, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns OrganizationBoolExp.Label, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLines returns OrganizationBoolExp.Lines, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetLines() *LineBoolExp { return v.Lines }

// GetLines_aggregate returns OrganizationBoolExp.Lines_aggregate, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetLines_aggregate() *Line_aggregate_bool_exp { return v.Lines_aggregate }

// GetLogo returns OrganizationBoolExp.Logo, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetLogo() *StringComparisonExp { return v.Logo }

// GetName returns OrganizationBoolExp.Name, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetStudios returns OrganizationBoolExp.Studios, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetStudios() *StudioBoolExp { return v.Studios }

// GetStudios_aggregate returns OrganizationBoolExp.Studios_aggregate, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetStudios_aggregate() *Studio_aggregate_bool_exp {
	return v.Studios_aggregate
}

// GetUpdatedAt returns OrganizationBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUsers returns OrganizationBoolExp.Users, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetUsers() *UserBoolExp { return v.Users }

// GetUsers_aggregate returns OrganizationBoolExp.Users_aggregate, and is useful for accessing the field via an interface.
func (v *OrganizationBoolExp) GetUsers_aggregate() *User_aggregate_bool_exp { return v.Users_aggregate }

// unique or primary key constraints on table "organization"
type OrganizationConstraint string

const (
	// unique or primary key constraint on columns "id"
	OrganizationConstraintOrganizationPkey OrganizationConstraint = "organization_pkey"
)

// input type for inserting data into table "organization"
type OrganizationInsertInput struct {
	// The date and time when the organization was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the organization was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the organization.
	Description string                  `json:"description"`
	Groups      *GroupArrRelInsertInput `json:"groups,omitempty"`
	// The unique identifier of the organization.
	Id string `json:"id"`
	// The label of the organization is used to override the name in the UI.
	Label string                 `json:"label"`
	Lines *LineArrRelInsertInput `json:"lines,omitempty"`
	// The logo image path of the organization.
	Logo string `json:"logo"`
	// The name of the organization.
	Name    string                   `json:"name"`
	Studios *StudioArrRelInsertInput `json:"studios,omitempty"`
	// The date and time when the organization was last updated.
	UpdatedAt time.Time              `json:"updatedAt"`
	Users     *UserArrRelInsertInput `json:"users,omitempty"`
}

// GetCreatedAt returns OrganizationInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns OrganizationInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns OrganizationInsertInput.Description, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetDescription() string { return v.Description }

// GetGroups returns OrganizationInsertInput.Groups, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetGroups() *GroupArrRelInsertInput { return v.Groups }

// GetId returns OrganizationInsertInput.Id, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetId() string { return v.Id }

// GetLabel returns OrganizationInsertInput.Label, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetLabel() string { return v.Label }

// GetLines returns OrganizationInsertInput.Lines, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetLines() *LineArrRelInsertInput { return v.Lines }

// GetLogo returns OrganizationInsertInput.Logo, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetLogo() string { return v.Logo }

// GetName returns OrganizationInsertInput.Name, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetName() string { return v.Name }

// GetStudios returns OrganizationInsertInput.Studios, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetStudios() *StudioArrRelInsertInput { return v.Studios }

// GetUpdatedAt returns OrganizationInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUsers returns OrganizationInsertInput.Users, and is useful for accessing the field via an interface.
func (v *OrganizationInsertInput) GetUsers() *UserArrRelInsertInput { return v.Users }

// input type for inserting object relation for remote table "organization"
type OrganizationObjRelInsertInput struct {
	Data *OrganizationInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *OrganizationOnConflict `json:"onConflict,omitempty"`
}

// GetData returns OrganizationObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *OrganizationObjRelInsertInput) GetData() *OrganizationInsertInput { return v.Data }

// GetOnConflict returns OrganizationObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *OrganizationObjRelInsertInput) GetOnConflict() *OrganizationOnConflict { return v.OnConflict }

// on_conflict condition type for table "organization"
type OrganizationOnConflict struct {
	Constraint     OrganizationConstraint     `json:"constraint"`
	Update_columns []OrganizationUpdateColumn `json:"update_columns"`
	Where          *OrganizationBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns OrganizationOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *OrganizationOnConflict) GetConstraint() OrganizationConstraint { return v.Constraint }

// GetUpdate_columns returns OrganizationOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *OrganizationOnConflict) GetUpdate_columns() []OrganizationUpdateColumn {
	return v.Update_columns
}

// GetWhere returns OrganizationOnConflict.Where, and is useful for accessing the field via an interface.
func (v *OrganizationOnConflict) GetWhere() *OrganizationBoolExp { return v.Where }

// update columns of table "organization"
type OrganizationUpdateColumn string

const (
	// column name
	OrganizationUpdateColumnCreatedat OrganizationUpdateColumn = "createdAt"
	// column name
	OrganizationUpdateColumnDeletedat OrganizationUpdateColumn = "deletedAt"
	// column name
	OrganizationUpdateColumnDescription OrganizationUpdateColumn = "description"
	// column name
	OrganizationUpdateColumnId OrganizationUpdateColumn = "id"
	// column name
	OrganizationUpdateColumnLabel OrganizationUpdateColumn = "label"
	// column name
	OrganizationUpdateColumnLogo OrganizationUpdateColumn = "logo"
	// column name
	OrganizationUpdateColumnName OrganizationUpdateColumn = "name"
	// column name
	OrganizationUpdateColumnUpdatedat OrganizationUpdateColumn = "updatedAt"
)

// input type for inserting array relation for remote table "showinfo"
type ShowinfoArrRelInsertInput struct {
	Data []*ShowinfoInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *ShowinfoOnConflict `json:"onConflict,omitempty"`
}

// GetData returns ShowinfoArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *ShowinfoArrRelInsertInput) GetData() []*ShowinfoInsertInput { return v.Data }

// GetOnConflict returns ShowinfoArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *ShowinfoArrRelInsertInput) GetOnConflict() *ShowinfoOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "showinfo". All fields are combined with a logical 'AND'.
type ShowinfoBoolExp struct {
	And                      []*ShowinfoBoolExp                `json:"_and,omitempty"`
	Not                      *ShowinfoBoolExp                  `json:"_not,omitempty"`
	Or                       []*ShowinfoBoolExp                `json:"_or,omitempty"`
	Align                    *StringComparisonExp              `json:"align,omitempty"`
	BackgroundColor          *CitextComparisonExp              `json:"backgroundColor,omitempty"`
	Bold                     *BooleanComparisonExp             `json:"bold,omitempty"`
	Color                    *StringComparisonExp              `json:"color,omitempty"`
	CreatedAt                *TimestamptzComparisonExp         `json:"createdAt,omitempty"`
	DeletedAt                *TimestamptzComparisonExp         `json:"deletedAt,omitempty"`
	Global                   *BooleanComparisonExp             `json:"global,omitempty"`
	Grid                     *GridBoolExp                      `json:"grid,omitempty"`
	GridId                   *UuidComparisonExp                `json:"gridId,omitempty"`
	Grid_showinfos           *GridShowinfoBoolExp              `json:"grid_showinfos,omitempty"`
	Grid_showinfos_aggregate *Grid_showinfo_aggregate_bool_exp `json:"grid_showinfos_aggregate,omitempty"`
	Id                       *UuidComparisonExp                `json:"id,omitempty"`
	Name                     *StringComparisonExp              `json:"name,omitempty"`
	Path                     *StringComparisonExp              `json:"path,omitempty"`
	Position                 *IntComparisonExp                 `json:"position,omitempty"`
	Show                     *BooleanComparisonExp             `json:"show,omitempty"`
	Size                     *IntComparisonExp                 `json:"size,omitempty"`
	UpdatedAt                *TimestamptzComparisonExp         `json:"updatedAt,omitempty"`
}

// GetAnd returns ShowinfoBoolExp.And, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetAnd() []*ShowinfoBoolExp { return v.And }

// GetNot returns ShowinfoBoolExp.Not, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetNot() *ShowinfoBoolExp { return v.Not }

// GetOr returns ShowinfoBoolExp.Or, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetOr() []*ShowinfoBoolExp { return v.Or }

// GetAlign returns ShowinfoBoolExp.Align, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetAlign() *StringComparisonExp { return v.Align }

// GetBackgroundColor returns ShowinfoBoolExp.BackgroundColor, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetBackgroundColor() *CitextComparisonExp { return v.BackgroundColor }

// GetBold returns ShowinfoBoolExp.Bold, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetBold() *BooleanComparisonExp { return v.Bold }

// GetColor returns ShowinfoBoolExp.Color, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetColor() *StringComparisonExp { return v.Color }

// GetCreatedAt returns ShowinfoBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns ShowinfoBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetGlobal returns ShowinfoBoolExp.Global, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetGlobal() *BooleanComparisonExp { return v.Global }

// GetGrid returns ShowinfoBoolExp.Grid, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetGrid() *GridBoolExp { return v.Grid }

// GetGridId returns ShowinfoBoolExp.GridId, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetGridId() *UuidComparisonExp { return v.GridId }

// GetGrid_showinfos returns ShowinfoBoolExp.Grid_showinfos, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetGrid_showinfos() *GridShowinfoBoolExp { return v.Grid_showinfos }

// GetGrid_showinfos_aggregate returns ShowinfoBoolExp.Grid_showinfos_aggregate, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetGrid_showinfos_aggregate() *Grid_showinfo_aggregate_bool_exp {
	return v.Grid_showinfos_aggregate
}

// GetId returns ShowinfoBoolExp.Id, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetName returns ShowinfoBoolExp.Name, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetPath returns ShowinfoBoolExp.Path, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetPath() *StringComparisonExp { return v.Path }

// GetPosition returns ShowinfoBoolExp.Position, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetPosition() *IntComparisonExp { return v.Position }

// GetShow returns ShowinfoBoolExp.Show, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetShow() *BooleanComparisonExp { return v.Show }

// GetSize returns ShowinfoBoolExp.Size, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetSize() *IntComparisonExp { return v.Size }

// GetUpdatedAt returns ShowinfoBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ShowinfoBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "showinfo"
type ShowinfoConstraint string

const (
	// unique or primary key constraint on columns "id"
	ShowinfoConstraintShowinfoPkey ShowinfoConstraint = "showinfo_pkey"
)

// input type for inserting data into table "showinfo"
type ShowinfoInsertInput struct {
	// The alignment of the text.
	Align string `json:"align"`
	// The background color of the information.
	BackgroundColor string `json:"backgroundColor"`
	// Make the text bold.
	Bold bool `json:"bold"`
	// The color of the text.
	Color string `json:"color"`
	// The date and time when the showinfo was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the showinfo was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// Is it the global showinfo template.
	Global bool                   `json:"global"`
	Grid   *GridObjRelInsertInput `json:"grid,omitempty"`
	// The grid this showinfo is linked to.
	GridId         string                         `json:"gridId"`
	Grid_showinfos *GridShowinfoArrRelInsertInput `json:"grid_showinfos,omitempty"`
	// The unique identifier of the showinfo.
	Id string `json:"id"`
	// The name of the information.
	Name string `json:"name"`
	// Javascript path to the information.
	Path string `json:"path"`
	// The position of the information.
	Position int `json:"position"`
	// Show or hide the information in the card.
	Show bool `json:"show"`
	// The size of the text.
	Size int `json:"size"`
	// The date and time when the showinfo was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetAlign returns ShowinfoInsertInput.Align, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetAlign() string { return v.Align }

// GetBackgroundColor returns ShowinfoInsertInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetBackgroundColor() string { return v.BackgroundColor }

// GetBold returns ShowinfoInsertInput.Bold, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetBold() bool { return v.Bold }

// GetColor returns ShowinfoInsertInput.Color, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetColor() string { return v.Color }

// GetCreatedAt returns ShowinfoInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns ShowinfoInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetGlobal returns ShowinfoInsertInput.Global, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetGlobal() bool { return v.Global }

// GetGrid returns ShowinfoInsertInput.Grid, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetGrid() *GridObjRelInsertInput { return v.Grid }

// GetGridId returns ShowinfoInsertInput.GridId, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetGridId() string { return v.GridId }

// GetGrid_showinfos returns ShowinfoInsertInput.Grid_showinfos, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetGrid_showinfos() *GridShowinfoArrRelInsertInput {
	return v.Grid_showinfos
}

// GetId returns ShowinfoInsertInput.Id, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetId() string { return v.Id }

// GetName returns ShowinfoInsertInput.Name, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetName() string { return v.Name }

// GetPath returns ShowinfoInsertInput.Path, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetPath() string { return v.Path }

// GetPosition returns ShowinfoInsertInput.Position, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetPosition() int { return v.Position }

// GetShow returns ShowinfoInsertInput.Show, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetShow() bool { return v.Show }

// GetSize returns ShowinfoInsertInput.Size, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetSize() int { return v.Size }

// GetUpdatedAt returns ShowinfoInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ShowinfoInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "showinfo"
type ShowinfoObjRelInsertInput struct {
	Data *ShowinfoInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *ShowinfoOnConflict `json:"onConflict,omitempty"`
}

// GetData returns ShowinfoObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *ShowinfoObjRelInsertInput) GetData() *ShowinfoInsertInput { return v.Data }

// GetOnConflict returns ShowinfoObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *ShowinfoObjRelInsertInput) GetOnConflict() *ShowinfoOnConflict { return v.OnConflict }

// on_conflict condition type for table "showinfo"
type ShowinfoOnConflict struct {
	Constraint     ShowinfoConstraint     `json:"constraint"`
	Update_columns []ShowinfoUpdateColumn `json:"update_columns"`
	Where          *ShowinfoBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns ShowinfoOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *ShowinfoOnConflict) GetConstraint() ShowinfoConstraint { return v.Constraint }

// GetUpdate_columns returns ShowinfoOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *ShowinfoOnConflict) GetUpdate_columns() []ShowinfoUpdateColumn { return v.Update_columns }

// GetWhere returns ShowinfoOnConflict.Where, and is useful for accessing the field via an interface.
func (v *ShowinfoOnConflict) GetWhere() *ShowinfoBoolExp { return v.Where }

// select columns of table "showinfo"
type ShowinfoSelectColumn string

const (
	// column name
	ShowinfoSelectColumnAlign ShowinfoSelectColumn = "align"
	// column name
	ShowinfoSelectColumnBackgroundcolor ShowinfoSelectColumn = "backgroundColor"
	// column name
	ShowinfoSelectColumnBold ShowinfoSelectColumn = "bold"
	// column name
	ShowinfoSelectColumnColor ShowinfoSelectColumn = "color"
	// column name
	ShowinfoSelectColumnCreatedat ShowinfoSelectColumn = "createdAt"
	// column name
	ShowinfoSelectColumnDeletedat ShowinfoSelectColumn = "deletedAt"
	// column name
	ShowinfoSelectColumnGlobal ShowinfoSelectColumn = "global"
	// column name
	ShowinfoSelectColumnGridid ShowinfoSelectColumn = "gridId"
	// column name
	ShowinfoSelectColumnId ShowinfoSelectColumn = "id"
	// column name
	ShowinfoSelectColumnName ShowinfoSelectColumn = "name"
	// column name
	ShowinfoSelectColumnPath ShowinfoSelectColumn = "path"
	// column name
	ShowinfoSelectColumnPosition ShowinfoSelectColumn = "position"
	// column name
	ShowinfoSelectColumnShow ShowinfoSelectColumn = "show"
	// column name
	ShowinfoSelectColumnSize ShowinfoSelectColumn = "size"
	// column name
	ShowinfoSelectColumnUpdatedat ShowinfoSelectColumn = "updatedAt"
)

// update columns of table "showinfo"
type ShowinfoUpdateColumn string

const (
	// column name
	ShowinfoUpdateColumnAlign ShowinfoUpdateColumn = "align"
	// column name
	ShowinfoUpdateColumnBackgroundcolor ShowinfoUpdateColumn = "backgroundColor"
	// column name
	ShowinfoUpdateColumnBold ShowinfoUpdateColumn = "bold"
	// column name
	ShowinfoUpdateColumnColor ShowinfoUpdateColumn = "color"
	// column name
	ShowinfoUpdateColumnCreatedat ShowinfoUpdateColumn = "createdAt"
	// column name
	ShowinfoUpdateColumnDeletedat ShowinfoUpdateColumn = "deletedAt"
	// column name
	ShowinfoUpdateColumnGlobal ShowinfoUpdateColumn = "global"
	// column name
	ShowinfoUpdateColumnGridid ShowinfoUpdateColumn = "gridId"
	// column name
	ShowinfoUpdateColumnId ShowinfoUpdateColumn = "id"
	// column name
	ShowinfoUpdateColumnName ShowinfoUpdateColumn = "name"
	// column name
	ShowinfoUpdateColumnPath ShowinfoUpdateColumn = "path"
	// column name
	ShowinfoUpdateColumnPosition ShowinfoUpdateColumn = "position"
	// column name
	ShowinfoUpdateColumnShow ShowinfoUpdateColumn = "show"
	// column name
	ShowinfoUpdateColumnSize ShowinfoUpdateColumn = "size"
	// column name
	ShowinfoUpdateColumnUpdatedat ShowinfoUpdateColumn = "updatedAt"
)

type Showinfo_aggregate_bool_exp struct {
	Bool_and *Showinfo_aggregate_bool_exp_bool_and `json:"bool_and,omitempty"`
	Bool_or  *Showinfo_aggregate_bool_exp_bool_or  `json:"bool_or,omitempty"`
	Count    *Showinfo_aggregate_bool_exp_count    `json:"count,omitempty"`
}

// GetBool_and returns Showinfo_aggregate_bool_exp.Bool_and, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp) GetBool_and() *Showinfo_aggregate_bool_exp_bool_and {
	return v.Bool_and
}

// GetBool_or returns Showinfo_aggregate_bool_exp.Bool_or, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp) GetBool_or() *Showinfo_aggregate_bool_exp_bool_or {
	return v.Bool_or
}

// GetCount returns Showinfo_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp) GetCount() *Showinfo_aggregate_bool_exp_count { return v.Count }

type Showinfo_aggregate_bool_exp_bool_and struct {
	Arguments Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columns `json:"arguments"`
	Distinct  bool                                                                          `json:"distinct"`
	Filter    *ShowinfoBoolExp                                                              `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                         `json:"predicate,omitempty"`
}

// GetArguments returns Showinfo_aggregate_bool_exp_bool_and.Arguments, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_and) GetArguments() Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Showinfo_aggregate_bool_exp_bool_and.Distinct, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_and) GetDistinct() bool { return v.Distinct }

// GetFilter returns Showinfo_aggregate_bool_exp_bool_and.Filter, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_and) GetFilter() *ShowinfoBoolExp { return v.Filter }

// GetPredicate returns Showinfo_aggregate_bool_exp_bool_and.Predicate, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_and) GetPredicate() *BooleanComparisonExp {
	return v.Predicate
}

type Showinfo_aggregate_bool_exp_bool_or struct {
	Arguments Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columns `json:"arguments"`
	Distinct  bool                                                                         `json:"distinct"`
	Filter    *ShowinfoBoolExp                                                             `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                        `json:"predicate,omitempty"`
}

// GetArguments returns Showinfo_aggregate_bool_exp_bool_or.Arguments, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_or) GetArguments() Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columns {
	return v.Arguments
}

// GetDistinct returns Showinfo_aggregate_bool_exp_bool_or.Distinct, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_or) GetDistinct() bool { return v.Distinct }

// GetFilter returns Showinfo_aggregate_bool_exp_bool_or.Filter, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_or) GetFilter() *ShowinfoBoolExp { return v.Filter }

// GetPredicate returns Showinfo_aggregate_bool_exp_bool_or.Predicate, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_bool_or) GetPredicate() *BooleanComparisonExp {
	return v.Predicate
}

type Showinfo_aggregate_bool_exp_count struct {
	Arguments []ShowinfoSelectColumn `json:"arguments"`
	Distinct  bool                   `json:"distinct"`
	Filter    *ShowinfoBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp      `json:"predicate,omitempty"`
}

// GetArguments returns Showinfo_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_count) GetArguments() []ShowinfoSelectColumn { return v.Arguments }

// GetDistinct returns Showinfo_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Showinfo_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_count) GetFilter() *ShowinfoBoolExp { return v.Filter }

// GetPredicate returns Showinfo_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Showinfo_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// select "showinfo_aggregate_bool_exp_bool_and_arguments_columns" columns of table "showinfo"
type Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columns string

const (
	// column name
	Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columnsBold Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columns = "bold"
	// column name
	Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columnsGlobal Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columns = "global"
	// column name
	Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columnsShow Showinfo_select_column_showinfo_aggregate_bool_exp_bool_and_arguments_columns = "show"
)

// select "showinfo_aggregate_bool_exp_bool_or_arguments_columns" columns of table "showinfo"
type Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columns string

const (
	// column name
	Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columnsBold Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columns = "bold"
	// column name
	Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columnsGlobal Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columns = "global"
	// column name
	Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columnsShow Showinfo_select_column_showinfo_aggregate_bool_exp_bool_or_arguments_columns = "show"
)

// Boolean expression to filter rows from the table "sip". All fields are combined with a logical 'AND'.
type SipBoolExp struct {
	And       []*SipBoolExp             `json:"_and,omitempty"`
	Not       *SipBoolExp               `json:"_not,omitempty"`
	Or        []*SipBoolExp             `json:"_or,omitempty"`
	Address   *StringComparisonExp      `json:"address,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Id        *UuidComparisonExp        `json:"id,omitempty"`
	Line      *LineBoolExp              `json:"line,omitempty"`
	Password  *StringComparisonExp      `json:"password,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
	Username  *StringComparisonExp      `json:"username,omitempty"`
}

// GetAnd returns SipBoolExp.And, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetAnd() []*SipBoolExp { return v.And }

// GetNot returns SipBoolExp.Not, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetNot() *SipBoolExp { return v.Not }

// GetOr returns SipBoolExp.Or, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetOr() []*SipBoolExp { return v.Or }

// GetAddress returns SipBoolExp.Address, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetAddress() *StringComparisonExp { return v.Address }

// GetCreatedAt returns SipBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns SipBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetId returns SipBoolExp.Id, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLine returns SipBoolExp.Line, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetPassword returns SipBoolExp.Password, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetPassword() *StringComparisonExp { return v.Password }

// GetUpdatedAt returns SipBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUsername returns SipBoolExp.Username, and is useful for accessing the field via an interface.
func (v *SipBoolExp) GetUsername() *StringComparisonExp { return v.Username }

// unique or primary key constraints on table "sip"
type SipConstraint string

const (
	// unique or primary key constraint on columns "id"
	SipConstraintSipPkey SipConstraint = "sip_pkey"
)

// input type for inserting data into table "sip"
type SipInsertInput struct {
	// The address of the trunk.
	Address string `json:"address"`
	// The date and time when the SIP line was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the SIP line was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The unique identifier of the SIP line.
	Id   string                 `json:"id"`
	Line *LineObjRelInsertInput `json:"line,omitempty"`
	// The password of the SIP line.
	Password string `json:"password"`
	// The date and time when the SIP line was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The username of the SIP line.
	Username string `json:"username"`
}

// GetAddress returns SipInsertInput.Address, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetAddress() string { return v.Address }

// GetCreatedAt returns SipInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns SipInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetId returns SipInsertInput.Id, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetId() string { return v.Id }

// GetLine returns SipInsertInput.Line, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetPassword returns SipInsertInput.Password, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetPassword() string { return v.Password }

// GetUpdatedAt returns SipInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUsername returns SipInsertInput.Username, and is useful for accessing the field via an interface.
func (v *SipInsertInput) GetUsername() string { return v.Username }

// input type for inserting object relation for remote table "sip"
type SipObjRelInsertInput struct {
	Data *SipInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *SipOnConflict `json:"onConflict,omitempty"`
}

// GetData returns SipObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *SipObjRelInsertInput) GetData() *SipInsertInput { return v.Data }

// GetOnConflict returns SipObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *SipObjRelInsertInput) GetOnConflict() *SipOnConflict { return v.OnConflict }

// on_conflict condition type for table "sip"
type SipOnConflict struct {
	Constraint     SipConstraint     `json:"constraint"`
	Update_columns []SipUpdateColumn `json:"update_columns"`
	Where          *SipBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns SipOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *SipOnConflict) GetConstraint() SipConstraint { return v.Constraint }

// GetUpdate_columns returns SipOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *SipOnConflict) GetUpdate_columns() []SipUpdateColumn { return v.Update_columns }

// GetWhere returns SipOnConflict.Where, and is useful for accessing the field via an interface.
func (v *SipOnConflict) GetWhere() *SipBoolExp { return v.Where }

// update columns of table "sip"
type SipUpdateColumn string

const (
	// column name
	SipUpdateColumnAddress SipUpdateColumn = "address"
	// column name
	SipUpdateColumnCreatedat SipUpdateColumn = "createdAt"
	// column name
	SipUpdateColumnDeletedat SipUpdateColumn = "deletedAt"
	// column name
	SipUpdateColumnId SipUpdateColumn = "id"
	// column name
	SipUpdateColumnPassword SipUpdateColumn = "password"
	// column name
	SipUpdateColumnUpdatedat SipUpdateColumn = "updatedAt"
	// column name
	SipUpdateColumnUsername SipUpdateColumn = "username"
)

// Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
type StringComparisonExp struct {
	Eq  string `json:"_eq"`
	Gt  string `json:"_gt"`
	Gte string `json:"_gte"`
	// does the column match the given case-insensitive pattern
	Ilike string   `json:"_ilike"`
	In    []string `json:"_in"`
	// does the column match the given POSIX regular expression, case insensitive
	Iregex string `json:"_iregex"`
	IsNull bool   `json:"_isNull"`
	// does the column match the given pattern
	Like string `json:"_like"`
	Lt   string `json:"_lt"`
	Lte  string `json:"_lte"`
	Neq  string `json:"_neq"`
	// does the column NOT match the given case-insensitive pattern
	Nilike string   `json:"_nilike"`
	Nin    []string `json:"_nin"`
	// does the column NOT match the given POSIX regular expression, case insensitive
	Niregex string `json:"_niregex"`
	// does the column NOT match the given pattern
	Nlike string `json:"_nlike"`
	// does the column NOT match the given POSIX regular expression, case sensitive
	Nregex string `json:"_nregex"`
	// does the column NOT match the given SQL regular expression
	Nsimilar string `json:"_nsimilar"`
	// does the column match the given POSIX regular expression, case sensitive
	Regex string `json:"_regex"`
	// does the column match the given SQL regular expression
	Similar string `json:"_similar"`
}

// GetEq returns StringComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetEq() string { return v.Eq }

// GetGt returns StringComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetGt() string { return v.Gt }

// GetGte returns StringComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetGte() string { return v.Gte }

// GetIlike returns StringComparisonExp.Ilike, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetIlike() string { return v.Ilike }

// GetIn returns StringComparisonExp.In, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetIn() []string { return v.In }

// GetIregex returns StringComparisonExp.Iregex, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetIregex() string { return v.Iregex }

// GetIsNull returns StringComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLike returns StringComparisonExp.Like, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetLike() string { return v.Like }

// GetLt returns StringComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetLt() string { return v.Lt }

// GetLte returns StringComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetLte() string { return v.Lte }

// GetNeq returns StringComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNeq() string { return v.Neq }

// GetNilike returns StringComparisonExp.Nilike, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNilike() string { return v.Nilike }

// GetNin returns StringComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNin() []string { return v.Nin }

// GetNiregex returns StringComparisonExp.Niregex, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNiregex() string { return v.Niregex }

// GetNlike returns StringComparisonExp.Nlike, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNlike() string { return v.Nlike }

// GetNregex returns StringComparisonExp.Nregex, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNregex() string { return v.Nregex }

// GetNsimilar returns StringComparisonExp.Nsimilar, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetNsimilar() string { return v.Nsimilar }

// GetRegex returns StringComparisonExp.Regex, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetRegex() string { return v.Regex }

// GetSimilar returns StringComparisonExp.Similar, and is useful for accessing the field via an interface.
func (v *StringComparisonExp) GetSimilar() string { return v.Similar }

// input type for inserting array relation for remote table "studio"
type StudioArrRelInsertInput struct {
	Data []*StudioInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *StudioOnConflict `json:"onConflict,omitempty"`
}

// GetData returns StudioArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *StudioArrRelInsertInput) GetData() []*StudioInsertInput { return v.Data }

// GetOnConflict returns StudioArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *StudioArrRelInsertInput) GetOnConflict() *StudioOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "studio". All fields are combined with a logical 'AND'.
type StudioBoolExp struct {
	And                     []*StudioBoolExp                 `json:"_and,omitempty"`
	Not                     *StudioBoolExp                   `json:"_not,omitempty"`
	Or                      []*StudioBoolExp                 `json:"_or,omitempty"`
	CreatedAt               *TimestamptzComparisonExp        `json:"createdAt,omitempty"`
	DeletedAt               *TimestamptzComparisonExp        `json:"deletedAt,omitempty"`
	Description             *StringComparisonExp             `json:"description,omitempty"`
	Grids                   *GridBoolExp                     `json:"grids,omitempty"`
	Grids_aggregate         *Grid_aggregate_bool_exp         `json:"grids_aggregate,omitempty"`
	Group_studios           *GroupStudioBoolExp              `json:"group_studios,omitempty"`
	Group_studios_aggregate *Group_studio_aggregate_bool_exp `json:"group_studios_aggregate,omitempty"`
	Id                      *UuidComparisonExp               `json:"id,omitempty"`
	Label                   *StringComparisonExp             `json:"label,omitempty"`
	Line_studios            *LineStudioBoolExp               `json:"line_studios,omitempty"`
	Line_studios_aggregate  *Line_studio_aggregate_bool_exp  `json:"line_studios_aggregate,omitempty"`
	Logo                    *StringComparisonExp             `json:"logo,omitempty"`
	Name                    *StringComparisonExp             `json:"name,omitempty"`
	Organization            *OrganizationBoolExp             `json:"organization,omitempty"`
	OrganizationId          *UuidComparisonExp               `json:"organizationId,omitempty"`
	UpdatedAt               *TimestamptzComparisonExp        `json:"updatedAt,omitempty"`
}

// GetAnd returns StudioBoolExp.And, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetAnd() []*StudioBoolExp { return v.And }

// GetNot returns StudioBoolExp.Not, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetNot() *StudioBoolExp { return v.Not }

// GetOr returns StudioBoolExp.Or, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetOr() []*StudioBoolExp { return v.Or }

// GetCreatedAt returns StudioBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns StudioBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns StudioBoolExp.Description, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetGrids returns StudioBoolExp.Grids, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetGrids() *GridBoolExp { return v.Grids }

// GetGrids_aggregate returns StudioBoolExp.Grids_aggregate, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetGrids_aggregate() *Grid_aggregate_bool_exp { return v.Grids_aggregate }

// GetGroup_studios returns StudioBoolExp.Group_studios, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetGroup_studios() *GroupStudioBoolExp { return v.Group_studios }

// GetGroup_studios_aggregate returns StudioBoolExp.Group_studios_aggregate, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetGroup_studios_aggregate() *Group_studio_aggregate_bool_exp {
	return v.Group_studios_aggregate
}

// GetId returns StudioBoolExp.Id, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns StudioBoolExp.Label, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetLine_studios returns StudioBoolExp.Line_studios, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetLine_studios() *LineStudioBoolExp { return v.Line_studios }

// GetLine_studios_aggregate returns StudioBoolExp.Line_studios_aggregate, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetLine_studios_aggregate() *Line_studio_aggregate_bool_exp {
	return v.Line_studios_aggregate
}

// GetLogo returns StudioBoolExp.Logo, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetLogo() *StringComparisonExp { return v.Logo }

// GetName returns StudioBoolExp.Name, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetOrganization returns StudioBoolExp.Organization, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetOrganization() *OrganizationBoolExp { return v.Organization }

// GetOrganizationId returns StudioBoolExp.OrganizationId, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetOrganizationId() *UuidComparisonExp { return v.OrganizationId }

// GetUpdatedAt returns StudioBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *StudioBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "studio"
type StudioConstraint string

const (
	// unique or primary key constraint on columns "id"
	StudioConstraintStudioPkey StudioConstraint = "studio_pkey"
)

// input type for inserting data into table "studio"
type StudioInsertInput struct {
	// The date and time when the studio was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the studio was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the studio.
	Description   string                        `json:"description"`
	Grids         *GridArrRelInsertInput        `json:"grids,omitempty"`
	Group_studios *GroupStudioArrRelInsertInput `json:"group_studios,omitempty"`
	// The unique identifier of the studio.
	Id string `json:"id"`
	// The label of the studio is used to override the name in the UI.
	Label        string                       `json:"label"`
	Line_studios *LineStudioArrRelInsertInput `json:"line_studios,omitempty"`
	// The logo image path of the studio.
	Logo string `json:"logo"`
	// The name of the studio.
	Name         string                         `json:"name"`
	Organization *OrganizationObjRelInsertInput `json:"organization,omitempty"`
	// The organization id of the studio.
	OrganizationId string `json:"organizationId"`
	// The date and time when the studio was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCreatedAt returns StudioInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns StudioInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns StudioInsertInput.Description, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetDescription() string { return v.Description }

// GetGrids returns StudioInsertInput.Grids, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetGrids() *GridArrRelInsertInput { return v.Grids }

// GetGroup_studios returns StudioInsertInput.Group_studios, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetGroup_studios() *GroupStudioArrRelInsertInput { return v.Group_studios }

// GetId returns StudioInsertInput.Id, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetId() string { return v.Id }

// GetLabel returns StudioInsertInput.Label, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetLabel() string { return v.Label }

// GetLine_studios returns StudioInsertInput.Line_studios, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetLine_studios() *LineStudioArrRelInsertInput { return v.Line_studios }

// GetLogo returns StudioInsertInput.Logo, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetLogo() string { return v.Logo }

// GetName returns StudioInsertInput.Name, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetName() string { return v.Name }

// GetOrganization returns StudioInsertInput.Organization, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetOrganization() *OrganizationObjRelInsertInput { return v.Organization }

// GetOrganizationId returns StudioInsertInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetOrganizationId() string { return v.OrganizationId }

// GetUpdatedAt returns StudioInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *StudioInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "studio"
type StudioObjRelInsertInput struct {
	Data *StudioInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *StudioOnConflict `json:"onConflict,omitempty"`
}

// GetData returns StudioObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *StudioObjRelInsertInput) GetData() *StudioInsertInput { return v.Data }

// GetOnConflict returns StudioObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *StudioObjRelInsertInput) GetOnConflict() *StudioOnConflict { return v.OnConflict }

// on_conflict condition type for table "studio"
type StudioOnConflict struct {
	Constraint     StudioConstraint     `json:"constraint"`
	Update_columns []StudioUpdateColumn `json:"update_columns"`
	Where          *StudioBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns StudioOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *StudioOnConflict) GetConstraint() StudioConstraint { return v.Constraint }

// GetUpdate_columns returns StudioOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *StudioOnConflict) GetUpdate_columns() []StudioUpdateColumn { return v.Update_columns }

// GetWhere returns StudioOnConflict.Where, and is useful for accessing the field via an interface.
func (v *StudioOnConflict) GetWhere() *StudioBoolExp { return v.Where }

// select columns of table "studio"
type StudioSelectColumn string

const (
	// column name
	StudioSelectColumnCreatedat StudioSelectColumn = "createdAt"
	// column name
	StudioSelectColumnDeletedat StudioSelectColumn = "deletedAt"
	// column name
	StudioSelectColumnDescription StudioSelectColumn = "description"
	// column name
	StudioSelectColumnId StudioSelectColumn = "id"
	// column name
	StudioSelectColumnLabel StudioSelectColumn = "label"
	// column name
	StudioSelectColumnLogo StudioSelectColumn = "logo"
	// column name
	StudioSelectColumnName StudioSelectColumn = "name"
	// column name
	StudioSelectColumnOrganizationid StudioSelectColumn = "organizationId"
	// column name
	StudioSelectColumnUpdatedat StudioSelectColumn = "updatedAt"
)

// update columns of table "studio"
type StudioUpdateColumn string

const (
	// column name
	StudioUpdateColumnCreatedat StudioUpdateColumn = "createdAt"
	// column name
	StudioUpdateColumnDeletedat StudioUpdateColumn = "deletedAt"
	// column name
	StudioUpdateColumnDescription StudioUpdateColumn = "description"
	// column name
	StudioUpdateColumnId StudioUpdateColumn = "id"
	// column name
	StudioUpdateColumnLabel StudioUpdateColumn = "label"
	// column name
	StudioUpdateColumnLogo StudioUpdateColumn = "logo"
	// column name
	StudioUpdateColumnName StudioUpdateColumn = "name"
	// column name
	StudioUpdateColumnOrganizationid StudioUpdateColumn = "organizationId"
	// column name
	StudioUpdateColumnUpdatedat StudioUpdateColumn = "updatedAt"
)

type Studio_aggregate_bool_exp struct {
	Count *Studio_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns Studio_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *Studio_aggregate_bool_exp) GetCount() *Studio_aggregate_bool_exp_count { return v.Count }

type Studio_aggregate_bool_exp_count struct {
	Arguments []StudioSelectColumn `json:"arguments"`
	Distinct  bool                 `json:"distinct"`
	Filter    *StudioBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp    `json:"predicate,omitempty"`
}

// GetArguments returns Studio_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *Studio_aggregate_bool_exp_count) GetArguments() []StudioSelectColumn { return v.Arguments }

// GetDistinct returns Studio_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *Studio_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns Studio_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *Studio_aggregate_bool_exp_count) GetFilter() *StudioBoolExp { return v.Filter }

// GetPredicate returns Studio_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *Studio_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
type TagBoolExp struct {
	And                 []*TagBoolExp                `json:"_and,omitempty"`
	Not                 *TagBoolExp                  `json:"_not,omitempty"`
	Or                  []*TagBoolExp                `json:"_or,omitempty"`
	Card_tags           *CardTagBoolExp              `json:"card_tags,omitempty"`
	Card_tags_aggregate *Card_tag_aggregate_bool_exp `json:"card_tags_aggregate,omitempty"`
	Color               *CitextComparisonExp         `json:"color,omitempty"`
	CreatedAt           *TimestamptzComparisonExp    `json:"createdAt,omitempty"`
	DeletedAt           *TimestamptzComparisonExp    `json:"deletedAt,omitempty"`
	Description         *StringComparisonExp         `json:"description,omitempty"`
	Id                  *UuidComparisonExp           `json:"id,omitempty"`
	Label               *StringComparisonExp         `json:"label,omitempty"`
	Name                *StringComparisonExp         `json:"name,omitempty"`
	UpdatedAt           *TimestamptzComparisonExp    `json:"updatedAt,omitempty"`
}

// GetAnd returns TagBoolExp.And, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetAnd() []*TagBoolExp { return v.And }

// GetNot returns TagBoolExp.Not, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetNot() *TagBoolExp { return v.Not }

// GetOr returns TagBoolExp.Or, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetOr() []*TagBoolExp { return v.Or }

// GetCard_tags returns TagBoolExp.Card_tags, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetCard_tags() *CardTagBoolExp { return v.Card_tags }

// GetCard_tags_aggregate returns TagBoolExp.Card_tags_aggregate, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetCard_tags_aggregate() *Card_tag_aggregate_bool_exp {
	return v.Card_tags_aggregate
}

// GetColor returns TagBoolExp.Color, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetColor() *CitextComparisonExp { return v.Color }

// GetCreatedAt returns TagBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns TagBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetDescription returns TagBoolExp.Description, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetDescription() *StringComparisonExp { return v.Description }

// GetId returns TagBoolExp.Id, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLabel returns TagBoolExp.Label, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetLabel() *StringComparisonExp { return v.Label }

// GetName returns TagBoolExp.Name, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetName() *StringComparisonExp { return v.Name }

// GetUpdatedAt returns TagBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TagBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// unique or primary key constraints on table "tag"
type TagConstraint string

const (
	// unique or primary key constraint on columns "id"
	TagConstraintTagPkey TagConstraint = "tag_pkey"
)

// input type for inserting data into table "tag"
type TagInsertInput struct {
	Card_tags *CardTagArrRelInsertInput `json:"card_tags,omitempty"`
	// The color of the tag.
	Color string `json:"color"`
	// The date and time when the tag was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the tag was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The description of the tag.
	Description string `json:"description"`
	// The unique identifier of the tag.
	Id string `json:"id"`
	// The label of the tag is used to override the name in the UI.
	Label string `json:"label"`
	// The name of the tag.
	Name string `json:"name"`
	// The date and time when the tag was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetCard_tags returns TagInsertInput.Card_tags, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetCard_tags() *CardTagArrRelInsertInput { return v.Card_tags }

// GetColor returns TagInsertInput.Color, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetColor() string { return v.Color }

// GetCreatedAt returns TagInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns TagInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetDescription returns TagInsertInput.Description, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetDescription() string { return v.Description }

// GetId returns TagInsertInput.Id, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetId() string { return v.Id }

// GetLabel returns TagInsertInput.Label, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetLabel() string { return v.Label }

// GetName returns TagInsertInput.Name, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetName() string { return v.Name }

// GetUpdatedAt returns TagInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TagInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// input type for inserting object relation for remote table "tag"
type TagObjRelInsertInput struct {
	Data *TagInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *TagOnConflict `json:"onConflict,omitempty"`
}

// GetData returns TagObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *TagObjRelInsertInput) GetData() *TagInsertInput { return v.Data }

// GetOnConflict returns TagObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *TagObjRelInsertInput) GetOnConflict() *TagOnConflict { return v.OnConflict }

// on_conflict condition type for table "tag"
type TagOnConflict struct {
	Constraint     TagConstraint     `json:"constraint"`
	Update_columns []TagUpdateColumn `json:"update_columns"`
	Where          *TagBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns TagOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *TagOnConflict) GetConstraint() TagConstraint { return v.Constraint }

// GetUpdate_columns returns TagOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *TagOnConflict) GetUpdate_columns() []TagUpdateColumn { return v.Update_columns }

// GetWhere returns TagOnConflict.Where, and is useful for accessing the field via an interface.
func (v *TagOnConflict) GetWhere() *TagBoolExp { return v.Where }

// update columns of table "tag"
type TagUpdateColumn string

const (
	// column name
	TagUpdateColumnColor TagUpdateColumn = "color"
	// column name
	TagUpdateColumnCreatedat TagUpdateColumn = "createdAt"
	// column name
	TagUpdateColumnDeletedat TagUpdateColumn = "deletedAt"
	// column name
	TagUpdateColumnDescription TagUpdateColumn = "description"
	// column name
	TagUpdateColumnId TagUpdateColumn = "id"
	// column name
	TagUpdateColumnLabel TagUpdateColumn = "label"
	// column name
	TagUpdateColumnName TagUpdateColumn = "name"
	// column name
	TagUpdateColumnUpdatedat TagUpdateColumn = "updatedAt"
)

// Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
type TimestamptzComparisonExp struct {
	Eq     time.Time   `json:"_eq"`
	Gt     time.Time   `json:"_gt"`
	Gte    time.Time   `json:"_gte"`
	In     []time.Time `json:"_in"`
	IsNull bool        `json:"_isNull"`
	Lt     time.Time   `json:"_lt"`
	Lte    time.Time   `json:"_lte"`
	Neq    time.Time   `json:"_neq"`
	Nin    []time.Time `json:"_nin"`
}

// GetEq returns TimestamptzComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetEq() time.Time { return v.Eq }

// GetGt returns TimestamptzComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetGt() time.Time { return v.Gt }

// GetGte returns TimestamptzComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetGte() time.Time { return v.Gte }

// GetIn returns TimestamptzComparisonExp.In, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetIn() []time.Time { return v.In }

// GetIsNull returns TimestamptzComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLt returns TimestamptzComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetLt() time.Time { return v.Lt }

// GetLte returns TimestamptzComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetLte() time.Time { return v.Lte }

// GetNeq returns TimestamptzComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetNeq() time.Time { return v.Neq }

// GetNin returns TimestamptzComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *TimestamptzComparisonExp) GetNin() []time.Time { return v.Nin }

// input type for inserting array relation for remote table "user"
type UserArrRelInsertInput struct {
	Data []*UserInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *UserOnConflict `json:"onConflict,omitempty"`
}

// GetData returns UserArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *UserArrRelInsertInput) GetData() []*UserInsertInput { return v.Data }

// GetOnConflict returns UserArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *UserArrRelInsertInput) GetOnConflict() *UserOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
type UserBoolExp struct {
	And                   []*UserBoolExp                 `json:"_and,omitempty"`
	Not                   *UserBoolExp                   `json:"_not,omitempty"`
	Or                    []*UserBoolExp                 `json:"_or,omitempty"`
	BeginDate             *DateComparisonExp             `json:"beginDate,omitempty"`
	CreatedAt             *TimestamptzComparisonExp      `json:"createdAt,omitempty"`
	DeletedAt             *TimestamptzComparisonExp      `json:"deletedAt,omitempty"`
	Email                 *CitextComparisonExp           `json:"email,omitempty"`
	EndDate               *DateComparisonExp             `json:"endDate,omitempty"`
	EulaAccepted          *BooleanComparisonExp          `json:"eulaAccepted,omitempty"`
	FirstName             *StringComparisonExp           `json:"firstName,omitempty"`
	Id                    *UuidComparisonExp             `json:"id,omitempty"`
	LastName              *StringComparisonExp           `json:"lastName,omitempty"`
	LastSeen              *TimestamptzComparisonExp      `json:"lastSeen,omitempty"`
	Organization          *OrganizationBoolExp           `json:"organization,omitempty"`
	OrganizationId        *UuidComparisonExp             `json:"organizationId,omitempty"`
	Password              *StringComparisonExp           `json:"password,omitempty"`
	ResetPassword         *BooleanComparisonExp          `json:"resetPassword,omitempty"`
	UpdatedAt             *TimestamptzComparisonExp      `json:"updatedAt,omitempty"`
	User_groups           *UserGroupBoolExp              `json:"user_groups,omitempty"`
	User_groups_aggregate *User_group_aggregate_bool_exp `json:"user_groups_aggregate,omitempty"`
	Username              *StringComparisonExp           `json:"username,omitempty"`
}

// GetAnd returns UserBoolExp.And, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetAnd() []*UserBoolExp { return v.And }

// GetNot returns UserBoolExp.Not, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetNot() *UserBoolExp { return v.Not }

// GetOr returns UserBoolExp.Or, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetOr() []*UserBoolExp { return v.Or }

// GetBeginDate returns UserBoolExp.BeginDate, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetBeginDate() *DateComparisonExp { return v.BeginDate }

// GetCreatedAt returns UserBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns UserBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetEmail returns UserBoolExp.Email, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetEmail() *CitextComparisonExp { return v.Email }

// GetEndDate returns UserBoolExp.EndDate, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetEndDate() *DateComparisonExp { return v.EndDate }

// GetEulaAccepted returns UserBoolExp.EulaAccepted, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetEulaAccepted() *BooleanComparisonExp { return v.EulaAccepted }

// GetFirstName returns UserBoolExp.FirstName, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetFirstName() *StringComparisonExp { return v.FirstName }

// GetId returns UserBoolExp.Id, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLastName returns UserBoolExp.LastName, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetLastName() *StringComparisonExp { return v.LastName }

// GetLastSeen returns UserBoolExp.LastSeen, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetLastSeen() *TimestamptzComparisonExp { return v.LastSeen }

// GetOrganization returns UserBoolExp.Organization, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetOrganization() *OrganizationBoolExp { return v.Organization }

// GetOrganizationId returns UserBoolExp.OrganizationId, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetOrganizationId() *UuidComparisonExp { return v.OrganizationId }

// GetPassword returns UserBoolExp.Password, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetPassword() *StringComparisonExp { return v.Password }

// GetResetPassword returns UserBoolExp.ResetPassword, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetResetPassword() *BooleanComparisonExp { return v.ResetPassword }

// GetUpdatedAt returns UserBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUser_groups returns UserBoolExp.User_groups, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetUser_groups() *UserGroupBoolExp { return v.User_groups }

// GetUser_groups_aggregate returns UserBoolExp.User_groups_aggregate, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetUser_groups_aggregate() *User_group_aggregate_bool_exp {
	return v.User_groups_aggregate
}

// GetUsername returns UserBoolExp.Username, and is useful for accessing the field via an interface.
func (v *UserBoolExp) GetUsername() *StringComparisonExp { return v.Username }

// unique or primary key constraints on table "user"
type UserConstraint string

const (
	// unique or primary key constraint on columns "id"
	UserConstraintUserPkey UserConstraint = "user_pkey"
)

// input type for inserting array relation for remote table "user_group"
type UserGroupArrRelInsertInput struct {
	Data []*UserGroupInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *UserGroupOnConflict `json:"onConflict,omitempty"`
}

// GetData returns UserGroupArrRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *UserGroupArrRelInsertInput) GetData() []*UserGroupInsertInput { return v.Data }

// GetOnConflict returns UserGroupArrRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *UserGroupArrRelInsertInput) GetOnConflict() *UserGroupOnConflict { return v.OnConflict }

// Boolean expression to filter rows from the table "user_group". All fields are combined with a logical 'AND'.
type UserGroupBoolExp struct {
	And       []*UserGroupBoolExp       `json:"_and,omitempty"`
	Not       *UserGroupBoolExp         `json:"_not,omitempty"`
	Or        []*UserGroupBoolExp       `json:"_or,omitempty"`
	CreatedAt *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Group     *GroupBoolExp             `json:"group,omitempty"`
	GroupId   *UuidComparisonExp        `json:"groupId,omitempty"`
	UpdatedAt *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
	User      *UserBoolExp              `json:"user,omitempty"`
	UserId    *UuidComparisonExp        `json:"userId,omitempty"`
}

// GetAnd returns UserGroupBoolExp.And, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetAnd() []*UserGroupBoolExp { return v.And }

// GetNot returns UserGroupBoolExp.Not, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetNot() *UserGroupBoolExp { return v.Not }

// GetOr returns UserGroupBoolExp.Or, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetOr() []*UserGroupBoolExp { return v.Or }

// GetCreatedAt returns UserGroupBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns UserGroupBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetGroup returns UserGroupBoolExp.Group, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetGroup() *GroupBoolExp { return v.Group }

// GetGroupId returns UserGroupBoolExp.GroupId, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetGroupId() *UuidComparisonExp { return v.GroupId }

// GetUpdatedAt returns UserGroupBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetUser returns UserGroupBoolExp.User, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetUser() *UserBoolExp { return v.User }

// GetUserId returns UserGroupBoolExp.UserId, and is useful for accessing the field via an interface.
func (v *UserGroupBoolExp) GetUserId() *UuidComparisonExp { return v.UserId }

// unique or primary key constraints on table "user_group"
type UserGroupConstraint string

const (
	// unique or primary key constraint on columns "group_id", "user_id"
	UserGroupConstraintUserGroupPkey UserGroupConstraint = "user_group_pkey"
)

// input type for inserting data into table "user_group"
type UserGroupInsertInput struct {
	// The date and time when the user group was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the user group was deleted.
	DeletedAt time.Time               `json:"deletedAt"`
	Group     *GroupObjRelInsertInput `json:"group,omitempty"`
	// The group of the user group.
	GroupId string `json:"groupId"`
	// The date and time when the user group was last updated.
	UpdatedAt time.Time              `json:"updatedAt"`
	User      *UserObjRelInsertInput `json:"user,omitempty"`
	// The user of the user group.
	UserId string `json:"userId"`
}

// GetCreatedAt returns UserGroupInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns UserGroupInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetGroup returns UserGroupInsertInput.Group, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetGroup() *GroupObjRelInsertInput { return v.Group }

// GetGroupId returns UserGroupInsertInput.GroupId, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetGroupId() string { return v.GroupId }

// GetUpdatedAt returns UserGroupInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUser returns UserGroupInsertInput.User, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetUser() *UserObjRelInsertInput { return v.User }

// GetUserId returns UserGroupInsertInput.UserId, and is useful for accessing the field via an interface.
func (v *UserGroupInsertInput) GetUserId() string { return v.UserId }

// on_conflict condition type for table "user_group"
type UserGroupOnConflict struct {
	Constraint     UserGroupConstraint     `json:"constraint"`
	Update_columns []UserGroupUpdateColumn `json:"update_columns"`
	Where          *UserGroupBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns UserGroupOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *UserGroupOnConflict) GetConstraint() UserGroupConstraint { return v.Constraint }

// GetUpdate_columns returns UserGroupOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *UserGroupOnConflict) GetUpdate_columns() []UserGroupUpdateColumn { return v.Update_columns }

// GetWhere returns UserGroupOnConflict.Where, and is useful for accessing the field via an interface.
func (v *UserGroupOnConflict) GetWhere() *UserGroupBoolExp { return v.Where }

// select columns of table "user_group"
type UserGroupSelectColumn string

const (
	// column name
	UserGroupSelectColumnCreatedat UserGroupSelectColumn = "createdAt"
	// column name
	UserGroupSelectColumnDeletedat UserGroupSelectColumn = "deletedAt"
	// column name
	UserGroupSelectColumnGroupid UserGroupSelectColumn = "groupId"
	// column name
	UserGroupSelectColumnUpdatedat UserGroupSelectColumn = "updatedAt"
	// column name
	UserGroupSelectColumnUserid UserGroupSelectColumn = "userId"
)

// update columns of table "user_group"
type UserGroupUpdateColumn string

const (
	// column name
	UserGroupUpdateColumnCreatedat UserGroupUpdateColumn = "createdAt"
	// column name
	UserGroupUpdateColumnDeletedat UserGroupUpdateColumn = "deletedAt"
	// column name
	UserGroupUpdateColumnGroupid UserGroupUpdateColumn = "groupId"
	// column name
	UserGroupUpdateColumnUpdatedat UserGroupUpdateColumn = "updatedAt"
	// column name
	UserGroupUpdateColumnUserid UserGroupUpdateColumn = "userId"
)

// input type for inserting data into table "user"
type UserInsertInput struct {
	// The date when the user started working.
	BeginDate time.Time `json:"beginDate"`
	// The date and time when the user was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the user was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The email of the user.
	Email string `json:"email"`
	// The date when the user stopped working.
	EndDate time.Time `json:"endDate"`
	// Whether the user has accepted the eula.
	EulaAccepted bool `json:"eulaAccepted"`
	// The first name of the user.
	FirstName string `json:"firstName"`
	// The unique identifier of the user.
	Id string `json:"id"`
	// The last name of the user.
	LastName string `json:"lastName"`
	// The date and time when the user was last seen.
	LastSeen     time.Time                      `json:"lastSeen"`
	Organization *OrganizationObjRelInsertInput `json:"organization,omitempty"`
	// The organization of the user.
	OrganizationId string `json:"organizationId"`
	// The password of the user.
	Password string `json:"password"`
	// Whether the user should be asked to reset their password on next login.
	ResetPassword bool `json:"resetPassword"`
	// The date and time when the user was last updated.
	UpdatedAt   time.Time                   `json:"updatedAt"`
	User_groups *UserGroupArrRelInsertInput `json:"user_groups,omitempty"`
	// The username of the user.
	Username string `json:"username"`
}

// GetBeginDate returns UserInsertInput.BeginDate, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetBeginDate() time.Time { return v.BeginDate }

// GetCreatedAt returns UserInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns UserInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetEmail returns UserInsertInput.Email, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetEmail() string { return v.Email }

// GetEndDate returns UserInsertInput.EndDate, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetEndDate() time.Time { return v.EndDate }

// GetEulaAccepted returns UserInsertInput.EulaAccepted, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetEulaAccepted() bool { return v.EulaAccepted }

// GetFirstName returns UserInsertInput.FirstName, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetFirstName() string { return v.FirstName }

// GetId returns UserInsertInput.Id, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetId() string { return v.Id }

// GetLastName returns UserInsertInput.LastName, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetLastName() string { return v.LastName }

// GetLastSeen returns UserInsertInput.LastSeen, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetLastSeen() time.Time { return v.LastSeen }

// GetOrganization returns UserInsertInput.Organization, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetOrganization() *OrganizationObjRelInsertInput { return v.Organization }

// GetOrganizationId returns UserInsertInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetOrganizationId() string { return v.OrganizationId }

// GetPassword returns UserInsertInput.Password, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetPassword() string { return v.Password }

// GetResetPassword returns UserInsertInput.ResetPassword, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetResetPassword() bool { return v.ResetPassword }

// GetUpdatedAt returns UserInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUser_groups returns UserInsertInput.User_groups, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetUser_groups() *UserGroupArrRelInsertInput { return v.User_groups }

// GetUsername returns UserInsertInput.Username, and is useful for accessing the field via an interface.
func (v *UserInsertInput) GetUsername() string { return v.Username }

// input type for inserting object relation for remote table "user"
type UserObjRelInsertInput struct {
	Data *UserInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *UserOnConflict `json:"onConflict,omitempty"`
}

// GetData returns UserObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *UserObjRelInsertInput) GetData() *UserInsertInput { return v.Data }

// GetOnConflict returns UserObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *UserObjRelInsertInput) GetOnConflict() *UserOnConflict { return v.OnConflict }

// on_conflict condition type for table "user"
type UserOnConflict struct {
	Constraint     UserConstraint     `json:"constraint"`
	Update_columns []UserUpdateColumn `json:"update_columns"`
	Where          *UserBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns UserOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *UserOnConflict) GetConstraint() UserConstraint { return v.Constraint }

// GetUpdate_columns returns UserOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *UserOnConflict) GetUpdate_columns() []UserUpdateColumn { return v.Update_columns }

// GetWhere returns UserOnConflict.Where, and is useful for accessing the field via an interface.
func (v *UserOnConflict) GetWhere() *UserBoolExp { return v.Where }

// select columns of table "user"
type UserSelectColumn string

const (
	// column name
	UserSelectColumnBegindate UserSelectColumn = "beginDate"
	// column name
	UserSelectColumnCreatedat UserSelectColumn = "createdAt"
	// column name
	UserSelectColumnDeletedat UserSelectColumn = "deletedAt"
	// column name
	UserSelectColumnEmail UserSelectColumn = "email"
	// column name
	UserSelectColumnEnddate UserSelectColumn = "endDate"
	// column name
	UserSelectColumnEulaaccepted UserSelectColumn = "eulaAccepted"
	// column name
	UserSelectColumnFirstname UserSelectColumn = "firstName"
	// column name
	UserSelectColumnId UserSelectColumn = "id"
	// column name
	UserSelectColumnLastname UserSelectColumn = "lastName"
	// column name
	UserSelectColumnLastseen UserSelectColumn = "lastSeen"
	// column name
	UserSelectColumnOrganizationid UserSelectColumn = "organizationId"
	// column name
	UserSelectColumnPassword UserSelectColumn = "password"
	// column name
	UserSelectColumnResetpassword UserSelectColumn = "resetPassword"
	// column name
	UserSelectColumnUpdatedat UserSelectColumn = "updatedAt"
	// column name
	UserSelectColumnUsername UserSelectColumn = "username"
)

// update columns of table "user"
type UserUpdateColumn string

const (
	// column name
	UserUpdateColumnBegindate UserUpdateColumn = "beginDate"
	// column name
	UserUpdateColumnCreatedat UserUpdateColumn = "createdAt"
	// column name
	UserUpdateColumnDeletedat UserUpdateColumn = "deletedAt"
	// column name
	UserUpdateColumnEmail UserUpdateColumn = "email"
	// column name
	UserUpdateColumnEnddate UserUpdateColumn = "endDate"
	// column name
	UserUpdateColumnEulaaccepted UserUpdateColumn = "eulaAccepted"
	// column name
	UserUpdateColumnFirstname UserUpdateColumn = "firstName"
	// column name
	UserUpdateColumnId UserUpdateColumn = "id"
	// column name
	UserUpdateColumnLastname UserUpdateColumn = "lastName"
	// column name
	UserUpdateColumnLastseen UserUpdateColumn = "lastSeen"
	// column name
	UserUpdateColumnOrganizationid UserUpdateColumn = "organizationId"
	// column name
	UserUpdateColumnPassword UserUpdateColumn = "password"
	// column name
	UserUpdateColumnResetpassword UserUpdateColumn = "resetPassword"
	// column name
	UserUpdateColumnUpdatedat UserUpdateColumn = "updatedAt"
	// column name
	UserUpdateColumnUsername UserUpdateColumn = "username"
)

type User_aggregate_bool_exp struct {
	Bool_and *User_aggregate_bool_exp_bool_and `json:"bool_and,omitempty"`
	Bool_or  *User_aggregate_bool_exp_bool_or  `json:"bool_or,omitempty"`
	Count    *User_aggregate_bool_exp_count    `json:"count,omitempty"`
}

// GetBool_and returns User_aggregate_bool_exp.Bool_and, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp) GetBool_and() *User_aggregate_bool_exp_bool_and { return v.Bool_and }

// GetBool_or returns User_aggregate_bool_exp.Bool_or, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp) GetBool_or() *User_aggregate_bool_exp_bool_or { return v.Bool_or }

// GetCount returns User_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp) GetCount() *User_aggregate_bool_exp_count { return v.Count }

type User_aggregate_bool_exp_bool_and struct {
	Arguments User_select_column_user_aggregate_bool_exp_bool_and_arguments_columns `json:"arguments"`
	Distinct  bool                                                                  `json:"distinct"`
	Filter    *UserBoolExp                                                          `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                 `json:"predicate,omitempty"`
}

// GetArguments returns User_aggregate_bool_exp_bool_and.Arguments, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_and) GetArguments() User_select_column_user_aggregate_bool_exp_bool_and_arguments_columns {
	return v.Arguments
}

// GetDistinct returns User_aggregate_bool_exp_bool_and.Distinct, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_and) GetDistinct() bool { return v.Distinct }

// GetFilter returns User_aggregate_bool_exp_bool_and.Filter, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_and) GetFilter() *UserBoolExp { return v.Filter }

// GetPredicate returns User_aggregate_bool_exp_bool_and.Predicate, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_and) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type User_aggregate_bool_exp_bool_or struct {
	Arguments User_select_column_user_aggregate_bool_exp_bool_or_arguments_columns `json:"arguments"`
	Distinct  bool                                                                 `json:"distinct"`
	Filter    *UserBoolExp                                                         `json:"filter,omitempty"`
	Predicate *BooleanComparisonExp                                                `json:"predicate,omitempty"`
}

// GetArguments returns User_aggregate_bool_exp_bool_or.Arguments, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_or) GetArguments() User_select_column_user_aggregate_bool_exp_bool_or_arguments_columns {
	return v.Arguments
}

// GetDistinct returns User_aggregate_bool_exp_bool_or.Distinct, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_or) GetDistinct() bool { return v.Distinct }

// GetFilter returns User_aggregate_bool_exp_bool_or.Filter, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_or) GetFilter() *UserBoolExp { return v.Filter }

// GetPredicate returns User_aggregate_bool_exp_bool_or.Predicate, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_bool_or) GetPredicate() *BooleanComparisonExp { return v.Predicate }

type User_aggregate_bool_exp_count struct {
	Arguments []UserSelectColumn `json:"arguments"`
	Distinct  bool               `json:"distinct"`
	Filter    *UserBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp  `json:"predicate,omitempty"`
}

// GetArguments returns User_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_count) GetArguments() []UserSelectColumn { return v.Arguments }

// GetDistinct returns User_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns User_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_count) GetFilter() *UserBoolExp { return v.Filter }

// GetPredicate returns User_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *User_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

type User_group_aggregate_bool_exp struct {
	Count *User_group_aggregate_bool_exp_count `json:"count,omitempty"`
}

// GetCount returns User_group_aggregate_bool_exp.Count, and is useful for accessing the field via an interface.
func (v *User_group_aggregate_bool_exp) GetCount() *User_group_aggregate_bool_exp_count {
	return v.Count
}

type User_group_aggregate_bool_exp_count struct {
	Arguments []UserGroupSelectColumn `json:"arguments"`
	Distinct  bool                    `json:"distinct"`
	Filter    *UserGroupBoolExp       `json:"filter,omitempty"`
	Predicate *IntComparisonExp       `json:"predicate,omitempty"`
}

// GetArguments returns User_group_aggregate_bool_exp_count.Arguments, and is useful for accessing the field via an interface.
func (v *User_group_aggregate_bool_exp_count) GetArguments() []UserGroupSelectColumn {
	return v.Arguments
}

// GetDistinct returns User_group_aggregate_bool_exp_count.Distinct, and is useful for accessing the field via an interface.
func (v *User_group_aggregate_bool_exp_count) GetDistinct() bool { return v.Distinct }

// GetFilter returns User_group_aggregate_bool_exp_count.Filter, and is useful for accessing the field via an interface.
func (v *User_group_aggregate_bool_exp_count) GetFilter() *UserGroupBoolExp { return v.Filter }

// GetPredicate returns User_group_aggregate_bool_exp_count.Predicate, and is useful for accessing the field via an interface.
func (v *User_group_aggregate_bool_exp_count) GetPredicate() *IntComparisonExp { return v.Predicate }

// select "user_aggregate_bool_exp_bool_and_arguments_columns" columns of table "user"
type User_select_column_user_aggregate_bool_exp_bool_and_arguments_columns string

const (
	// column name
	User_select_column_user_aggregate_bool_exp_bool_and_arguments_columnsEulaaccepted User_select_column_user_aggregate_bool_exp_bool_and_arguments_columns = "eulaAccepted"
	// column name
	User_select_column_user_aggregate_bool_exp_bool_and_arguments_columnsResetpassword User_select_column_user_aggregate_bool_exp_bool_and_arguments_columns = "resetPassword"
)

// select "user_aggregate_bool_exp_bool_or_arguments_columns" columns of table "user"
type User_select_column_user_aggregate_bool_exp_bool_or_arguments_columns string

const (
	// column name
	User_select_column_user_aggregate_bool_exp_bool_or_arguments_columnsEulaaccepted User_select_column_user_aggregate_bool_exp_bool_or_arguments_columns = "eulaAccepted"
	// column name
	User_select_column_user_aggregate_bool_exp_bool_or_arguments_columnsResetpassword User_select_column_user_aggregate_bool_exp_bool_or_arguments_columns = "resetPassword"
)

// Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
type UuidComparisonExp struct {
	Eq     string   `json:"_eq"`
	Gt     string   `json:"_gt"`
	Gte    string   `json:"_gte"`
	In     []string `json:"_in"`
	IsNull bool     `json:"_isNull"`
	Lt     string   `json:"_lt"`
	Lte    string   `json:"_lte"`
	Neq    string   `json:"_neq"`
	Nin    []string `json:"_nin"`
}

// GetEq returns UuidComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetEq() string { return v.Eq }

// GetGt returns UuidComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetGt() string { return v.Gt }

// GetGte returns UuidComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetGte() string { return v.Gte }

// GetIn returns UuidComparisonExp.In, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetIn() []string { return v.In }

// GetIsNull returns UuidComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetIsNull() bool { return v.IsNull }

// GetLt returns UuidComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetLt() string { return v.Lt }

// GetLte returns UuidComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetLte() string { return v.Lte }

// GetNeq returns UuidComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetNeq() string { return v.Neq }

// GetNin returns UuidComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *UuidComparisonExp) GetNin() []string { return v.Nin }

// Boolean expression to filter rows from the table "webrtc". All fields are combined with a logical 'AND'.
type WebrtcBoolExp struct {
	And            []*WebrtcBoolExp          `json:"_and,omitempty"`
	Not            *WebrtcBoolExp            `json:"_not,omitempty"`
	Or             []*WebrtcBoolExp          `json:"_or,omitempty"`
	AudioPortRead  *IntComparisonExp         `json:"audioPortRead,omitempty"`
	AudioPortWrite *IntComparisonExp         `json:"audioPortWrite,omitempty"`
	CreatedAt      *TimestamptzComparisonExp `json:"createdAt,omitempty"`
	DeletedAt      *TimestamptzComparisonExp `json:"deletedAt,omitempty"`
	Id             *UuidComparisonExp        `json:"id,omitempty"`
	Line           *LineBoolExp              `json:"line,omitempty"`
	UpdatedAt      *TimestamptzComparisonExp `json:"updatedAt,omitempty"`
	Video          *BooleanComparisonExp     `json:"video,omitempty"`
	VideoPortRead  *IntComparisonExp         `json:"videoPortRead,omitempty"`
	VideoPortWrite *IntComparisonExp         `json:"videoPortWrite,omitempty"`
}

// GetAnd returns WebrtcBoolExp.And, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetAnd() []*WebrtcBoolExp { return v.And }

// GetNot returns WebrtcBoolExp.Not, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetNot() *WebrtcBoolExp { return v.Not }

// GetOr returns WebrtcBoolExp.Or, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetOr() []*WebrtcBoolExp { return v.Or }

// GetAudioPortRead returns WebrtcBoolExp.AudioPortRead, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetAudioPortRead() *IntComparisonExp { return v.AudioPortRead }

// GetAudioPortWrite returns WebrtcBoolExp.AudioPortWrite, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetAudioPortWrite() *IntComparisonExp { return v.AudioPortWrite }

// GetCreatedAt returns WebrtcBoolExp.CreatedAt, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetCreatedAt() *TimestamptzComparisonExp { return v.CreatedAt }

// GetDeletedAt returns WebrtcBoolExp.DeletedAt, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetDeletedAt() *TimestamptzComparisonExp { return v.DeletedAt }

// GetId returns WebrtcBoolExp.Id, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetId() *UuidComparisonExp { return v.Id }

// GetLine returns WebrtcBoolExp.Line, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetLine() *LineBoolExp { return v.Line }

// GetUpdatedAt returns WebrtcBoolExp.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetUpdatedAt() *TimestamptzComparisonExp { return v.UpdatedAt }

// GetVideo returns WebrtcBoolExp.Video, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetVideo() *BooleanComparisonExp { return v.Video }

// GetVideoPortRead returns WebrtcBoolExp.VideoPortRead, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetVideoPortRead() *IntComparisonExp { return v.VideoPortRead }

// GetVideoPortWrite returns WebrtcBoolExp.VideoPortWrite, and is useful for accessing the field via an interface.
func (v *WebrtcBoolExp) GetVideoPortWrite() *IntComparisonExp { return v.VideoPortWrite }

// unique or primary key constraints on table "webrtc"
type WebrtcConstraint string

const (
	// unique or primary key constraint on columns "id"
	WebrtcConstraintWebrtcPkey WebrtcConstraint = "webrtc_pkey"
)

// input type for inserting data into table "webrtc"
type WebrtcInsertInput struct {
	// The port used to read audio.
	AudioPortRead int `json:"audioPortRead"`
	// The port used to write audio.
	AudioPortWrite int `json:"audioPortWrite"`
	// The date and time when the WebRTC line was created.
	CreatedAt time.Time `json:"createdAt"`
	// The date and time when the WebRTC line was deleted.
	DeletedAt time.Time `json:"deletedAt"`
	// The unique identifier of the WebRTC line.
	Id   string                 `json:"id"`
	Line *LineObjRelInsertInput `json:"line,omitempty"`
	// The date and time when the WebRTC line was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// Whether the WebRTC line has video.
	Video bool `json:"video"`
	// The port used to read video.
	VideoPortRead int `json:"videoPortRead"`
	// The port used to write video.
	VideoPortWrite int `json:"videoPortWrite"`
}

// GetAudioPortRead returns WebrtcInsertInput.AudioPortRead, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetAudioPortRead() int { return v.AudioPortRead }

// GetAudioPortWrite returns WebrtcInsertInput.AudioPortWrite, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetAudioPortWrite() int { return v.AudioPortWrite }

// GetCreatedAt returns WebrtcInsertInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDeletedAt returns WebrtcInsertInput.DeletedAt, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetDeletedAt() time.Time { return v.DeletedAt }

// GetId returns WebrtcInsertInput.Id, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetId() string { return v.Id }

// GetLine returns WebrtcInsertInput.Line, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetLine() *LineObjRelInsertInput { return v.Line }

// GetUpdatedAt returns WebrtcInsertInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetVideo returns WebrtcInsertInput.Video, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetVideo() bool { return v.Video }

// GetVideoPortRead returns WebrtcInsertInput.VideoPortRead, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetVideoPortRead() int { return v.VideoPortRead }

// GetVideoPortWrite returns WebrtcInsertInput.VideoPortWrite, and is useful for accessing the field via an interface.
func (v *WebrtcInsertInput) GetVideoPortWrite() int { return v.VideoPortWrite }

// input type for inserting object relation for remote table "webrtc"
type WebrtcObjRelInsertInput struct {
	Data *WebrtcInsertInput `json:"data,omitempty"`
	// upsert condition
	OnConflict *WebrtcOnConflict `json:"onConflict,omitempty"`
}

// GetData returns WebrtcObjRelInsertInput.Data, and is useful for accessing the field via an interface.
func (v *WebrtcObjRelInsertInput) GetData() *WebrtcInsertInput { return v.Data }

// GetOnConflict returns WebrtcObjRelInsertInput.OnConflict, and is useful for accessing the field via an interface.
func (v *WebrtcObjRelInsertInput) GetOnConflict() *WebrtcOnConflict { return v.OnConflict }

// on_conflict condition type for table "webrtc"
type WebrtcOnConflict struct {
	Constraint     WebrtcConstraint     `json:"constraint"`
	Update_columns []WebrtcUpdateColumn `json:"update_columns"`
	Where          *WebrtcBoolExp       `json:"where,omitempty"`
}

// GetConstraint returns WebrtcOnConflict.Constraint, and is useful for accessing the field via an interface.
func (v *WebrtcOnConflict) GetConstraint() WebrtcConstraint { return v.Constraint }

// GetUpdate_columns returns WebrtcOnConflict.Update_columns, and is useful for accessing the field via an interface.
func (v *WebrtcOnConflict) GetUpdate_columns() []WebrtcUpdateColumn { return v.Update_columns }

// GetWhere returns WebrtcOnConflict.Where, and is useful for accessing the field via an interface.
func (v *WebrtcOnConflict) GetWhere() *WebrtcBoolExp { return v.Where }

// update columns of table "webrtc"
type WebrtcUpdateColumn string

const (
	// column name
	WebrtcUpdateColumnAudioportread WebrtcUpdateColumn = "audioPortRead"
	// column name
	WebrtcUpdateColumnAudioportwrite WebrtcUpdateColumn = "audioPortWrite"
	// column name
	WebrtcUpdateColumnCreatedat WebrtcUpdateColumn = "createdAt"
	// column name
	WebrtcUpdateColumnDeletedat WebrtcUpdateColumn = "deletedAt"
	// column name
	WebrtcUpdateColumnId WebrtcUpdateColumn = "id"
	// column name
	WebrtcUpdateColumnUpdatedat WebrtcUpdateColumn = "updatedAt"
	// column name
	WebrtcUpdateColumnVideo WebrtcUpdateColumn = "video"
	// column name
	WebrtcUpdateColumnVideoportread WebrtcUpdateColumn = "videoPortRead"
	// column name
	WebrtcUpdateColumnVideoportwrite WebrtcUpdateColumn = "videoPortWrite"
)

// __InsertOrganizationInput is used internally by genqlient
type __InsertOrganizationInput struct {
	Objects []*OrganizationInsertInput `json:"objects,omitempty"`
}

// GetObjects returns __InsertOrganizationInput.Objects, and is useful for accessing the field via an interface.
func (v *__InsertOrganizationInput) GetObjects() []*OrganizationInsertInput { return v.Objects }

// __InsertOrganizationOneInput is used internally by genqlient
type __InsertOrganizationOneInput struct {
	Object *OrganizationInsertInput `json:"object,omitempty"`
}

// GetObject returns __InsertOrganizationOneInput.Object, and is useful for accessing the field via an interface.
func (v *__InsertOrganizationOneInput) GetObject() *OrganizationInsertInput { return v.Object }

// __InsertUserOneInput is used internally by genqlient
type __InsertUserOneInput struct {
	Object *UserInsertInput `json:"object,omitempty"`
}

// GetObject returns __InsertUserOneInput.Object, and is useful for accessing the field via an interface.
func (v *__InsertUserOneInput) GetObject() *UserInsertInput { return v.Object }

func InsertOrganization(
	ctx context.Context,
	client graphql.Client,
	objects []*OrganizationInsertInput,
) (*InsertOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "InsertOrganization",
		Query: `
mutation InsertOrganization ($objects: [OrganizationInsertInput!]!) {
	insertOrganization(objects: $objects) {
		affected_rows
	}
}
`,
		Variables: &__InsertOrganizationInput{
			Objects: objects,
		},
	}
	var err error

	var data InsertOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func InsertOrganizationOne(
	ctx context.Context,
	client graphql.Client,
	object *OrganizationInsertInput,
) (*InsertOrganizationOneResponse, error) {
	req := &graphql.Request{
		OpName: "InsertOrganizationOne",
		Query: `
mutation InsertOrganizationOne ($object: OrganizationInsertInput!) {
	insertOrganizationOne(object: $object) {
		id
	}
}
`,
		Variables: &__InsertOrganizationOneInput{
			Object: object,
		},
	}
	var err error

	var data InsertOrganizationOneResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func InsertUserOne(
	ctx context.Context,
	client graphql.Client,
	object *UserInsertInput,
) (*InsertUserOneResponse, error) {
	req := &graphql.Request{
		OpName: "InsertUserOne",
		Query: `
mutation InsertUserOne ($object: UserInsertInput!) {
	insertUserOne(object: $object) {
		id
		organizationId
	}
}
`,
		Variables: &__InsertUserOneInput{
			Object: object,
		},
	}
	var err error

	var data InsertUserOneResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
